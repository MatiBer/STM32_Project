
Projekt_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000258c  0800ae08  0800ae08  0001ae08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d394  0800d394  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d394  0800d394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d39c  0800d39c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d39c  0800d39c  0001d39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3a0  0800d3a0  0001d3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001ec  0800d590  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  0800d590  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d09  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387c  00000000  00000000  00039f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003d7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001488  00000000  00000000  0003ede0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa99  00000000  00000000  00040268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b7b6  00000000  00000000  0006ad01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff246  00000000  00000000  000864b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001856fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d0c  00000000  00000000  00185750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800adf0 	.word	0x0800adf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800adf0 	.word	0x0800adf0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 8000eb8:	f001 fe4c 	bl	8002b54 <wire_reset>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <send_cmd+0x1a>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e01e      	b.n	8000f04 <send_cmd+0x58>

  if (!rom_code) {
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 8000ecc:	20cc      	movs	r0, #204	; 0xcc
 8000ece:	f001 fecb 	bl	8002c68 <wire_write>
 8000ed2:	e012      	b.n	8000efa <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 8000ed4:	2055      	movs	r0, #85	; 0x55
 8000ed6:	f001 fec7 	bl	8002c68 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e009      	b.n	8000ef4 <send_cmd+0x48>
      wire_write(rom_code[i]);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 febd 	bl	8002c68 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b07      	cmp	r3, #7
 8000ef8:	ddf2      	ble.n	8000ee0 <send_cmd+0x34>
  }
  wire_write(cmd);
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f001 feb3 	bl	8002c68 <wire_write>
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 8000f14:	2144      	movs	r1, #68	; 0x44
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffc8 	bl	8000eac <send_cmd>
 8000f1c:	4603      	mov	r3, r0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <ds18b20_read_scratchpad>:

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8000f26:	b590      	push	{r4, r7, lr}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8000f30:	21be      	movs	r1, #190	; 0xbe
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffba 	bl	8000eac <send_cmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e01e      	b.n	8000f80 <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	e009      	b.n	8000f5c <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	18d4      	adds	r4, r2, r3
 8000f4e:	f001 fe49 	bl	8002be4 <wire_read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b08      	cmp	r3, #8
 8000f60:	ddf2      	ble.n	8000f48 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 8000f62:	2108      	movs	r1, #8
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f001 fec7 	bl	8002cf8 <wire_crc>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	3308      	adds	r3, #8
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	7afa      	ldrb	r2, [r7, #11]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d101      	bne.n	8000f7e <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}

08000f88 <ds18b20_get_temp>:

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ffc5 	bl	8000f26 <ds18b20_read_scratchpad>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d002      	beq.n	8000fa8 <ds18b20_get_temp+0x20>
    return 85.0f;
 8000fa2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000fd0 <ds18b20_get_temp+0x48>
 8000fa6:	e00b      	b.n	8000fc0 <ds18b20_get_temp+0x38>
 8000fa8:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8000faa:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8000fac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fb8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000fbc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8000fc0:	eef0 7a47 	vmov.f32	s15, s14
 8000fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	42aa0000 	.word	0x42aa0000

08000fd4 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b3b      	ldr	r3, [pc, #236]	; (80010d8 <MX_GPIO_Init+0x104>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a3a      	ldr	r2, [pc, #232]	; (80010d8 <MX_GPIO_Init+0x104>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_GPIO_Init+0x104>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a34      	ldr	r2, [pc, #208]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_GPIO_Init+0x104>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a2e      	ldr	r2, [pc, #184]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_GPIO_Init+0x104>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2120      	movs	r1, #32
 800104e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001052:	f002 f9f9 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f641 0104 	movw	r1, #6148	; 0x1804
 800105c:	481f      	ldr	r0, [pc, #124]	; (80010dc <MX_GPIO_Init+0x108>)
 800105e:	f002 f9f3 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800106c:	f002 f9ec 	bl	8003448 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001070:	230c      	movs	r3, #12
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001080:	2307      	movs	r3, #7
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108e:	f002 f831 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|BL_Pin;
 8001092:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f002 f821 	bl	80030f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12;
 80010b2:	f641 0304 	movw	r3, #6148	; 0x1804
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_GPIO_Init+0x108>)
 80010cc:	f002 f812 	bl	80030f4 <HAL_GPIO_Init>

}
 80010d0:	bf00      	nop
 80010d2:	3728      	adds	r7, #40	; 0x28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400

080010e0 <calc_pulse>:

static volatile uint32_t received_value;
static int received_bits;

static pulse_t calc_pulse(uint32_t time)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2bf9      	cmp	r3, #249	; 0xf9
 80010ec:	d801      	bhi.n	80010f2 <calc_pulse+0x12>
		return PULSE_ERROR;
 80010ee:	2305      	movs	r3, #5
 80010f0:	e021      	b.n	8001136 <calc_pulse+0x56>
	else if (time < 1200)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80010f8:	d201      	bcs.n	80010fe <calc_pulse+0x1e>
		return PULSE_SHORT;
 80010fa:	2304      	movs	r3, #4
 80010fc:	e01b      	b.n	8001136 <calc_pulse+0x56>
	else if (time < 2000)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001104:	d201      	bcs.n	800110a <calc_pulse+0x2a>
		return PULSE_LONG;
 8001106:	2303      	movs	r3, #3
 8001108:	e015      	b.n	8001136 <calc_pulse+0x56>
	else if (time < 3000)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001110:	4293      	cmp	r3, r2
 8001112:	d801      	bhi.n	8001118 <calc_pulse+0x38>
		return PULSE_2MS;
 8001114:	2302      	movs	r3, #2
 8001116:	e00e      	b.n	8001136 <calc_pulse+0x56>
	else if (time < 6000)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f241 726f 	movw	r2, #5999	; 0x176f
 800111e:	4293      	cmp	r3, r2
 8001120:	d801      	bhi.n	8001126 <calc_pulse+0x46>
		return PULSE_4MS;
 8001122:	2301      	movs	r3, #1
 8001124:	e007      	b.n	8001136 <calc_pulse+0x56>
	else if (time < 12000)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f642 62df 	movw	r2, #11999	; 0x2edf
 800112c:	4293      	cmp	r3, r2
 800112e:	d801      	bhi.n	8001134 <calc_pulse+0x54>
		return PULSE_9MS;
 8001130:	2300      	movs	r3, #0
 8001132:	e000      	b.n	8001136 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8001134:	2305      	movs	r3, #5
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <ir_tim_interrupt>:

void ir_tim_interrupt(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <ir_tim_interrupt+0xa4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b1f      	cmp	r3, #31
 8001150:	dc43      	bgt.n	80011da <ir_tim_interrupt+0x96>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1));
 8001152:	2100      	movs	r1, #0
 8001154:	4825      	ldr	r0, [pc, #148]	; (80011ec <ir_tim_interrupt+0xa8>)
 8001156:	f005 fce3 	bl	8006b20 <HAL_TIM_ReadCapturedValue>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffbf 	bl	80010e0 <calc_pulse>
 8001162:	4603      	mov	r3, r0
 8001164:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	3b01      	subs	r3, #1
 800116a:	2b03      	cmp	r3, #3
 800116c:	d831      	bhi.n	80011d2 <ir_tim_interrupt+0x8e>
 800116e:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <ir_tim_interrupt+0x30>)
 8001170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001174:	080011b5 	.word	0x080011b5
 8001178:	080011c3 	.word	0x080011c3
 800117c:	0800119b 	.word	0x0800119b
 8001180:	08001185 	.word	0x08001185
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <ir_tim_interrupt+0xac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	085b      	lsrs	r3, r3, #1
 800118a:	4a19      	ldr	r2, [pc, #100]	; (80011f0 <ir_tim_interrupt+0xac>)
 800118c:	6013      	str	r3, [r2, #0]
		received_bits++;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <ir_tim_interrupt+0xa4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a14      	ldr	r2, [pc, #80]	; (80011e8 <ir_tim_interrupt+0xa4>)
 8001196:	6013      	str	r3, [r2, #0]
		break;
 8001198:	e022      	b.n	80011e0 <ir_tim_interrupt+0x9c>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <ir_tim_interrupt+0xac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	085b      	lsrs	r3, r3, #1
 80011a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <ir_tim_interrupt+0xac>)
 80011a6:	6013      	str	r3, [r2, #0]
		received_bits++;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <ir_tim_interrupt+0xa4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <ir_tim_interrupt+0xa4>)
 80011b0:	6013      	str	r3, [r2, #0]
		break;
 80011b2:	e015      	b.n	80011e0 <ir_tim_interrupt+0x9c>
	case PULSE_4MS:
		received_value = 0;
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <ir_tim_interrupt+0xac>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <ir_tim_interrupt+0xa4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
		break;
 80011c0:	e00e      	b.n	80011e0 <ir_tim_interrupt+0x9c>
	case PULSE_2MS:
		if (received_bits == 0)
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <ir_tim_interrupt+0xa4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d109      	bne.n	80011de <ir_tim_interrupt+0x9a>
			received_bits = 32;
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <ir_tim_interrupt+0xa4>)
 80011cc:	2220      	movs	r2, #32
 80011ce:	601a      	str	r2, [r3, #0]
		break;
 80011d0:	e005      	b.n	80011de <ir_tim_interrupt+0x9a>
	default:
		received_bits = 0;
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <ir_tim_interrupt+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
		break;
 80011d8:	e002      	b.n	80011e0 <ir_tim_interrupt+0x9c>
		return;
 80011da:	bf00      	nop
 80011dc:	e000      	b.n	80011e0 <ir_tim_interrupt+0x9c>
		break;
 80011de:	bf00      	nop
	}
}
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000020c 	.word	0x2000020c
 80011ec:	20000378 	.word	0x20000378
 80011f0:	20000208 	.word	0x20000208

080011f4 <ir_init>:


void ir_init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim3);
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <ir_init+0x18>)
 80011fa:	f004 ffb7 	bl	800616c <HAL_TIM_Base_Start>
	  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80011fe:	2100      	movs	r1, #0
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <ir_init+0x18>)
 8001202:	f005 f87d 	bl	8006300 <HAL_TIM_IC_Start_IT>
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000378 	.word	0x20000378

08001210 <ir_read>:


int ir_read(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
	if (received_bits != 32)
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <ir_read+0x30>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b20      	cmp	r3, #32
 800121c:	d002      	beq.n	8001224 <ir_read+0x14>
		return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e007      	b.n	8001234 <ir_read+0x24>

	uint8_t value = received_value >> 16;
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <ir_read+0x34>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0c1b      	lsrs	r3, r3, #16
 800122a:	71fb      	strb	r3, [r7, #7]
	received_bits = 0;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <ir_read+0x30>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
	return value;
 8001232:	79fb      	ldrb	r3, [r7, #7]
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	2000020c 	.word	0x2000020c
 8001244:	20000208 	.word	0x20000208

08001248 <Active_alarm>:
/**
  * @brief Działanie alarmu
  * @retval None
  */
void Active_alarm(uint8_t remote)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	uint32_t now = HAL_GetTick();
 8001252:	f001 fe0d 	bl	8002e70 <HAL_GetTick>
 8001256:	60f8      	str	r0, [r7, #12]
	if(now - last_ms >= 100) {
 8001258:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <Active_alarm+0x4c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b63      	cmp	r3, #99	; 0x63
 8001262:	d907      	bls.n	8001274 <Active_alarm+0x2c>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);//Miga dioda
 8001264:	2120      	movs	r1, #32
 8001266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126a:	f002 f905 	bl	8003478 <HAL_GPIO_TogglePin>
		last_ms = now;
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <Active_alarm+0x4c>)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6013      	str	r3, [r2, #0]
	}

	if(remote == IR_BACK){//Wyłączenie alarmu
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	2b43      	cmp	r3, #67	; 0x43
 8001278:	d108      	bne.n	800128c <Active_alarm+0x44>
		Alarm_on = false;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <Active_alarm+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2120      	movs	r1, #32
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f002 f8de 	bl	8003448 <HAL_GPIO_WritePin>
	}

}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200002e8 	.word	0x200002e8
 8001298:	2000029d 	.word	0x2000029d

0800129c <Turn_on_alarm>:

void Turn_on_alarm(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	Alarm_on = true;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <Turn_on_alarm+0x14>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	2000029d 	.word	0x2000029d

080012b4 <Save_last_time>:
  * @brief Zapisanie ostatnich wartości zegara
  * @retval None
  */

void Save_last_time(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	new_time.Hours = time.Hours;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <Save_last_time+0x40>)
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <Save_last_time+0x44>)
 80012be:	701a      	strb	r2, [r3, #0]
	new_time.Minutes = time.Minutes;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <Save_last_time+0x40>)
 80012c2:	785a      	ldrb	r2, [r3, #1]
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <Save_last_time+0x44>)
 80012c6:	705a      	strb	r2, [r3, #1]
	new_time.Seconds = time.Seconds;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <Save_last_time+0x40>)
 80012ca:	789a      	ldrb	r2, [r3, #2]
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <Save_last_time+0x44>)
 80012ce:	709a      	strb	r2, [r3, #2]
	new_date.Date = date.Date;
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <Save_last_time+0x48>)
 80012d2:	789a      	ldrb	r2, [r3, #2]
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <Save_last_time+0x4c>)
 80012d6:	709a      	strb	r2, [r3, #2]
	new_date.Month = date.Month;
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <Save_last_time+0x48>)
 80012da:	785a      	ldrb	r2, [r3, #1]
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Save_last_time+0x4c>)
 80012de:	705a      	strb	r2, [r3, #1]
	new_date.Year = date.Year;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <Save_last_time+0x48>)
 80012e2:	78da      	ldrb	r2, [r3, #3]
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <Save_last_time+0x4c>)
 80012e6:	70da      	strb	r2, [r3, #3]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000210 	.word	0x20000210
 80012f8:	200002a0 	.word	0x200002a0
 80012fc:	20000224 	.word	0x20000224
 8001300:	200002b4 	.word	0x200002b4

08001304 <Save_last_alarm>:
  * @brief Przechowuje wartości ustawionego alarmu
  * @retval None
  */

void Save_last_alarm(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	HAL_RTC_GetAlarm(&hrtc, &alarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8001308:	2300      	movs	r3, #0
 800130a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800130e:	4907      	ldr	r1, [pc, #28]	; (800132c <Save_last_alarm+0x28>)
 8001310:	4807      	ldr	r0, [pc, #28]	; (8001330 <Save_last_alarm+0x2c>)
 8001312:	f004 f8ad 	bl	8005470 <HAL_RTC_GetAlarm>
	new_alarm.AlarmTime.Hours = alarm.AlarmTime.Hours;
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <Save_last_alarm+0x28>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <Save_last_alarm+0x30>)
 800131c:	701a      	strb	r2, [r3, #0]
	new_alarm.AlarmTime.Minutes = alarm.AlarmTime.Minutes;
 800131e:	4b03      	ldr	r3, [pc, #12]	; (800132c <Save_last_alarm+0x28>)
 8001320:	785a      	ldrb	r2, [r3, #1]
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <Save_last_alarm+0x30>)
 8001324:	705a      	strb	r2, [r3, #1]
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000228 	.word	0x20000228
 8001330:	200002ec 	.word	0x200002ec
 8001334:	200002b8 	.word	0x200002b8

08001338 <Color_Selected>:
/**
  * @brief Zaznacza wybraną wartość zegara
  * @retval None
  */
void Color_Selected(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af04      	add	r7, sp, #16
	if(Select_time_date == 0){
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <Color_Selected+0x1e0>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d122      	bne.n	800138c <Color_Selected+0x54>
		sprintf(strColored,"%02d",new_time.Hours);
 8001346:	4b75      	ldr	r3, [pc, #468]	; (800151c <Color_Selected+0x1e4>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	4974      	ldr	r1, [pc, #464]	; (8001520 <Color_Selected+0x1e8>)
 800134e:	4875      	ldr	r0, [pc, #468]	; (8001524 <Color_Selected+0x1ec>)
 8001350:	f007 fbce 	bl	8008af0 <siprintf>
		ST7735_WriteString(15, 35, strColored, Font_16x26, ST7735_BLACK,ST7735_BLACK);
 8001354:	4b74      	ldr	r3, [pc, #464]	; (8001528 <Color_Selected+0x1f0>)
 8001356:	2200      	movs	r2, #0
 8001358:	9202      	str	r2, [sp, #8]
 800135a:	2200      	movs	r2, #0
 800135c:	9201      	str	r2, [sp, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	9200      	str	r2, [sp, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a6f      	ldr	r2, [pc, #444]	; (8001524 <Color_Selected+0x1ec>)
 8001366:	2123      	movs	r1, #35	; 0x23
 8001368:	200f      	movs	r0, #15
 800136a:	f001 f838 	bl	80023de <ST7735_WriteString>
		ST7735_WriteString(15, 35, strColored, Font_16x26, ST7735_WHITE,ST7735_BLACK);
 800136e:	4b6e      	ldr	r3, [pc, #440]	; (8001528 <Color_Selected+0x1f0>)
 8001370:	2200      	movs	r2, #0
 8001372:	9202      	str	r2, [sp, #8]
 8001374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001378:	9201      	str	r2, [sp, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	9200      	str	r2, [sp, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a68      	ldr	r2, [pc, #416]	; (8001524 <Color_Selected+0x1ec>)
 8001382:	2123      	movs	r1, #35	; 0x23
 8001384:	200f      	movs	r0, #15
 8001386:	f001 f82a 	bl	80023de <ST7735_WriteString>
	else if(Select_time_date == 5){
		sprintf(strColored,"20%02d",new_date.Year);
		ST7735_WriteString(91, 67, strColored, Font_11x18, ST7735_BLACK,ST7735_BLACK);
		ST7735_WriteString(91, 67, strColored, Font_11x18, ST7735_WHITE,ST7735_BLACK);
	}
}
 800138a:	e0c1      	b.n	8001510 <Color_Selected+0x1d8>
	else if(Select_time_date == 1){
 800138c:	4b62      	ldr	r3, [pc, #392]	; (8001518 <Color_Selected+0x1e0>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d122      	bne.n	80013da <Color_Selected+0xa2>
		sprintf(strColored,"%02d",new_time.Minutes);
 8001394:	4b61      	ldr	r3, [pc, #388]	; (800151c <Color_Selected+0x1e4>)
 8001396:	785b      	ldrb	r3, [r3, #1]
 8001398:	461a      	mov	r2, r3
 800139a:	4961      	ldr	r1, [pc, #388]	; (8001520 <Color_Selected+0x1e8>)
 800139c:	4861      	ldr	r0, [pc, #388]	; (8001524 <Color_Selected+0x1ec>)
 800139e:	f007 fba7 	bl	8008af0 <siprintf>
		ST7735_WriteString(63, 35, strColored, Font_16x26, ST7735_BLACK,ST7735_BLACK);
 80013a2:	4b61      	ldr	r3, [pc, #388]	; (8001528 <Color_Selected+0x1f0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	9202      	str	r2, [sp, #8]
 80013a8:	2200      	movs	r2, #0
 80013aa:	9201      	str	r2, [sp, #4]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a5c      	ldr	r2, [pc, #368]	; (8001524 <Color_Selected+0x1ec>)
 80013b4:	2123      	movs	r1, #35	; 0x23
 80013b6:	203f      	movs	r0, #63	; 0x3f
 80013b8:	f001 f811 	bl	80023de <ST7735_WriteString>
		ST7735_WriteString(63, 35, strColored, Font_16x26, ST7735_WHITE,ST7735_BLACK);
 80013bc:	4b5a      	ldr	r3, [pc, #360]	; (8001528 <Color_Selected+0x1f0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	9202      	str	r2, [sp, #8]
 80013c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c6:	9201      	str	r2, [sp, #4]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a55      	ldr	r2, [pc, #340]	; (8001524 <Color_Selected+0x1ec>)
 80013d0:	2123      	movs	r1, #35	; 0x23
 80013d2:	203f      	movs	r0, #63	; 0x3f
 80013d4:	f001 f803 	bl	80023de <ST7735_WriteString>
}
 80013d8:	e09a      	b.n	8001510 <Color_Selected+0x1d8>
	else if(Select_time_date == 2){
 80013da:	4b4f      	ldr	r3, [pc, #316]	; (8001518 <Color_Selected+0x1e0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d122      	bne.n	8001428 <Color_Selected+0xf0>
		sprintf(strColored,"%02d",new_time.Seconds);
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <Color_Selected+0x1e4>)
 80013e4:	789b      	ldrb	r3, [r3, #2]
 80013e6:	461a      	mov	r2, r3
 80013e8:	494d      	ldr	r1, [pc, #308]	; (8001520 <Color_Selected+0x1e8>)
 80013ea:	484e      	ldr	r0, [pc, #312]	; (8001524 <Color_Selected+0x1ec>)
 80013ec:	f007 fb80 	bl	8008af0 <siprintf>
		ST7735_WriteString(111, 35, strColored, Font_16x26, ST7735_BLACK,ST7735_BLACK);
 80013f0:	4b4d      	ldr	r3, [pc, #308]	; (8001528 <Color_Selected+0x1f0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	9202      	str	r2, [sp, #8]
 80013f6:	2200      	movs	r2, #0
 80013f8:	9201      	str	r2, [sp, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a48      	ldr	r2, [pc, #288]	; (8001524 <Color_Selected+0x1ec>)
 8001402:	2123      	movs	r1, #35	; 0x23
 8001404:	206f      	movs	r0, #111	; 0x6f
 8001406:	f000 ffea 	bl	80023de <ST7735_WriteString>
		ST7735_WriteString(111, 35, strColored, Font_16x26, ST7735_WHITE,ST7735_BLACK);
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <Color_Selected+0x1f0>)
 800140c:	2200      	movs	r2, #0
 800140e:	9202      	str	r2, [sp, #8]
 8001410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001414:	9201      	str	r2, [sp, #4]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	9200      	str	r2, [sp, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a41      	ldr	r2, [pc, #260]	; (8001524 <Color_Selected+0x1ec>)
 800141e:	2123      	movs	r1, #35	; 0x23
 8001420:	206f      	movs	r0, #111	; 0x6f
 8001422:	f000 ffdc 	bl	80023de <ST7735_WriteString>
}
 8001426:	e073      	b.n	8001510 <Color_Selected+0x1d8>
	else if(Select_time_date == 3){
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <Color_Selected+0x1e0>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d122      	bne.n	8001476 <Color_Selected+0x13e>
		sprintf(strColored,"%02d",new_date.Date);
 8001430:	4b3e      	ldr	r3, [pc, #248]	; (800152c <Color_Selected+0x1f4>)
 8001432:	789b      	ldrb	r3, [r3, #2]
 8001434:	461a      	mov	r2, r3
 8001436:	493a      	ldr	r1, [pc, #232]	; (8001520 <Color_Selected+0x1e8>)
 8001438:	483a      	ldr	r0, [pc, #232]	; (8001524 <Color_Selected+0x1ec>)
 800143a:	f007 fb59 	bl	8008af0 <siprintf>
		ST7735_WriteString(25, 67, strColored, Font_11x18, ST7735_BLACK,ST7735_BLACK);
 800143e:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <Color_Selected+0x1f8>)
 8001440:	2200      	movs	r2, #0
 8001442:	9202      	str	r2, [sp, #8]
 8001444:	2200      	movs	r2, #0
 8001446:	9201      	str	r2, [sp, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	9200      	str	r2, [sp, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a35      	ldr	r2, [pc, #212]	; (8001524 <Color_Selected+0x1ec>)
 8001450:	2143      	movs	r1, #67	; 0x43
 8001452:	2019      	movs	r0, #25
 8001454:	f000 ffc3 	bl	80023de <ST7735_WriteString>
		ST7735_WriteString(25, 67, strColored, Font_11x18, ST7735_WHITE,ST7735_BLACK);
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <Color_Selected+0x1f8>)
 800145a:	2200      	movs	r2, #0
 800145c:	9202      	str	r2, [sp, #8]
 800145e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <Color_Selected+0x1ec>)
 800146c:	2143      	movs	r1, #67	; 0x43
 800146e:	2019      	movs	r0, #25
 8001470:	f000 ffb5 	bl	80023de <ST7735_WriteString>
}
 8001474:	e04c      	b.n	8001510 <Color_Selected+0x1d8>
	else if(Select_time_date == 4){
 8001476:	4b28      	ldr	r3, [pc, #160]	; (8001518 <Color_Selected+0x1e0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b04      	cmp	r3, #4
 800147c:	d122      	bne.n	80014c4 <Color_Selected+0x18c>
		sprintf(strColored,"%02d",new_date.Month);
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <Color_Selected+0x1f4>)
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	461a      	mov	r2, r3
 8001484:	4926      	ldr	r1, [pc, #152]	; (8001520 <Color_Selected+0x1e8>)
 8001486:	4827      	ldr	r0, [pc, #156]	; (8001524 <Color_Selected+0x1ec>)
 8001488:	f007 fb32 	bl	8008af0 <siprintf>
		ST7735_WriteString(58, 67, strColored, Font_11x18, ST7735_BLACK,ST7735_BLACK);
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <Color_Selected+0x1f8>)
 800148e:	2200      	movs	r2, #0
 8001490:	9202      	str	r2, [sp, #8]
 8001492:	2200      	movs	r2, #0
 8001494:	9201      	str	r2, [sp, #4]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a21      	ldr	r2, [pc, #132]	; (8001524 <Color_Selected+0x1ec>)
 800149e:	2143      	movs	r1, #67	; 0x43
 80014a0:	203a      	movs	r0, #58	; 0x3a
 80014a2:	f000 ff9c 	bl	80023de <ST7735_WriteString>
		ST7735_WriteString(58, 67, strColored, Font_11x18, ST7735_WHITE,ST7735_BLACK);
 80014a6:	4b22      	ldr	r3, [pc, #136]	; (8001530 <Color_Selected+0x1f8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	9202      	str	r2, [sp, #8]
 80014ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	9200      	str	r2, [sp, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <Color_Selected+0x1ec>)
 80014ba:	2143      	movs	r1, #67	; 0x43
 80014bc:	203a      	movs	r0, #58	; 0x3a
 80014be:	f000 ff8e 	bl	80023de <ST7735_WriteString>
}
 80014c2:	e025      	b.n	8001510 <Color_Selected+0x1d8>
	else if(Select_time_date == 5){
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <Color_Selected+0x1e0>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d121      	bne.n	8001510 <Color_Selected+0x1d8>
		sprintf(strColored,"20%02d",new_date.Year);
 80014cc:	4b17      	ldr	r3, [pc, #92]	; (800152c <Color_Selected+0x1f4>)
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4918      	ldr	r1, [pc, #96]	; (8001534 <Color_Selected+0x1fc>)
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <Color_Selected+0x1ec>)
 80014d6:	f007 fb0b 	bl	8008af0 <siprintf>
		ST7735_WriteString(91, 67, strColored, Font_11x18, ST7735_BLACK,ST7735_BLACK);
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <Color_Selected+0x1f8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	9202      	str	r2, [sp, #8]
 80014e0:	2200      	movs	r2, #0
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <Color_Selected+0x1ec>)
 80014ec:	2143      	movs	r1, #67	; 0x43
 80014ee:	205b      	movs	r0, #91	; 0x5b
 80014f0:	f000 ff75 	bl	80023de <ST7735_WriteString>
		ST7735_WriteString(91, 67, strColored, Font_11x18, ST7735_WHITE,ST7735_BLACK);
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <Color_Selected+0x1f8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	9202      	str	r2, [sp, #8]
 80014fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fe:	9201      	str	r2, [sp, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <Color_Selected+0x1ec>)
 8001508:	2143      	movs	r1, #67	; 0x43
 800150a:	205b      	movs	r0, #91	; 0x5b
 800150c:	f000 ff67 	bl	80023de <ST7735_WriteString>
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002e4 	.word	0x200002e4
 800151c:	200002a0 	.word	0x200002a0
 8001520:	0800ae08 	.word	0x0800ae08
 8001524:	20000290 	.word	0x20000290
 8001528:	20000008 	.word	0x20000008
 800152c:	200002b4 	.word	0x200002b4
 8001530:	20000000 	.word	0x20000000
 8001534:	0800ae10 	.word	0x0800ae10

08001538 <Plus_Time>:
/**
  * @brief Zwiększa wybraną wartość zegara
  * @retval None
  */
void Plus_Time(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	if(Select_time_date == 0)
 800153c:	4b43      	ldr	r3, [pc, #268]	; (800164c <Plus_Time+0x114>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d111      	bne.n	8001568 <Plus_Time+0x30>
		new_time.Hours = (new_time.Hours +1) % 24;
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <Plus_Time+0x118>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	4b42      	ldr	r3, [pc, #264]	; (8001654 <Plus_Time+0x11c>)
 800154c:	fb83 1302 	smull	r1, r3, r3, r2
 8001550:	1099      	asrs	r1, r3, #2
 8001552:	17d3      	asrs	r3, r2, #31
 8001554:	1ac9      	subs	r1, r1, r3
 8001556:	460b      	mov	r3, r1
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	440b      	add	r3, r1
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	1ad1      	subs	r1, r2, r3
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <Plus_Time+0x118>)
 8001564:	701a      	strb	r2, [r3, #0]
		new_date.Date = new_date.Date % 30 + 1;
	else if(Select_time_date == 4)
		new_date.Month = new_date.Month % 11 + 1;
	else if(Select_time_date == 5)
		new_date.Year = (new_date.Year +1) % 100;
}
 8001566:	e06c      	b.n	8001642 <Plus_Time+0x10a>
	else if(Select_time_date == 1)
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <Plus_Time+0x114>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d112      	bne.n	8001596 <Plus_Time+0x5e>
		new_time.Minutes = (new_time.Minutes +1) % 60;
 8001570:	4b37      	ldr	r3, [pc, #220]	; (8001650 <Plus_Time+0x118>)
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	1c5a      	adds	r2, r3, #1
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <Plus_Time+0x120>)
 8001578:	fb83 1302 	smull	r1, r3, r3, r2
 800157c:	4413      	add	r3, r2
 800157e:	1159      	asrs	r1, r3, #5
 8001580:	17d3      	asrs	r3, r2, #31
 8001582:	1ac9      	subs	r1, r1, r3
 8001584:	460b      	mov	r3, r1
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	1a5b      	subs	r3, r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	1ad1      	subs	r1, r2, r3
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <Plus_Time+0x118>)
 8001592:	705a      	strb	r2, [r3, #1]
}
 8001594:	e055      	b.n	8001642 <Plus_Time+0x10a>
	else if(Select_time_date == 2)
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <Plus_Time+0x114>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d112      	bne.n	80015c4 <Plus_Time+0x8c>
		new_time.Seconds = (new_time.Seconds +1) % 60;
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <Plus_Time+0x118>)
 80015a0:	789b      	ldrb	r3, [r3, #2]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <Plus_Time+0x120>)
 80015a6:	fb83 1302 	smull	r1, r3, r3, r2
 80015aa:	4413      	add	r3, r2
 80015ac:	1159      	asrs	r1, r3, #5
 80015ae:	17d3      	asrs	r3, r2, #31
 80015b0:	1ac9      	subs	r1, r1, r3
 80015b2:	460b      	mov	r3, r1
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	1a5b      	subs	r3, r3, r1
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	1ad1      	subs	r1, r2, r3
 80015bc:	b2ca      	uxtb	r2, r1
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <Plus_Time+0x118>)
 80015c0:	709a      	strb	r2, [r3, #2]
}
 80015c2:	e03e      	b.n	8001642 <Plus_Time+0x10a>
	else if(Select_time_date == 3)
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <Plus_Time+0x114>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d110      	bne.n	80015ee <Plus_Time+0xb6>
		new_date.Date = new_date.Date % 30 + 1;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <Plus_Time+0x124>)
 80015ce:	789a      	ldrb	r2, [r3, #2]
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <Plus_Time+0x120>)
 80015d2:	fba3 1302 	umull	r1, r3, r3, r2
 80015d6:	0919      	lsrs	r1, r3, #4
 80015d8:	460b      	mov	r3, r1
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a5b      	subs	r3, r3, r1
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <Plus_Time+0x124>)
 80015ea:	709a      	strb	r2, [r3, #2]
}
 80015ec:	e029      	b.n	8001642 <Plus_Time+0x10a>
	else if(Select_time_date == 4)
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <Plus_Time+0x114>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d111      	bne.n	800161a <Plus_Time+0xe2>
		new_date.Month = new_date.Month % 11 + 1;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <Plus_Time+0x124>)
 80015f8:	7859      	ldrb	r1, [r3, #1]
 80015fa:	4b19      	ldr	r3, [pc, #100]	; (8001660 <Plus_Time+0x128>)
 80015fc:	fba3 2301 	umull	r2, r3, r3, r1
 8001600:	08da      	lsrs	r2, r3, #3
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	1acb      	subs	r3, r1, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3301      	adds	r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <Plus_Time+0x124>)
 8001616:	705a      	strb	r2, [r3, #1]
}
 8001618:	e013      	b.n	8001642 <Plus_Time+0x10a>
	else if(Select_time_date == 5)
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <Plus_Time+0x114>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d10f      	bne.n	8001642 <Plus_Time+0x10a>
		new_date.Year = (new_date.Year +1) % 100;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <Plus_Time+0x124>)
 8001624:	78db      	ldrb	r3, [r3, #3]
 8001626:	3301      	adds	r3, #1
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <Plus_Time+0x12c>)
 800162a:	fb82 1203 	smull	r1, r2, r2, r3
 800162e:	1151      	asrs	r1, r2, #5
 8001630:	17da      	asrs	r2, r3, #31
 8001632:	1a8a      	subs	r2, r1, r2
 8001634:	2164      	movs	r1, #100	; 0x64
 8001636:	fb01 f202 	mul.w	r2, r1, r2
 800163a:	1a9a      	subs	r2, r3, r2
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <Plus_Time+0x124>)
 8001640:	70da      	strb	r2, [r3, #3]
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	200002e4 	.word	0x200002e4
 8001650:	200002a0 	.word	0x200002a0
 8001654:	2aaaaaab 	.word	0x2aaaaaab
 8001658:	88888889 	.word	0x88888889
 800165c:	200002b4 	.word	0x200002b4
 8001660:	ba2e8ba3 	.word	0xba2e8ba3
 8001664:	51eb851f 	.word	0x51eb851f

08001668 <Minus_Time>:
/**
  * @brief Zmniejsza wybraną wartość zegara
  * @retval None
  */
void Minus_Time(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
	if(Select_time_date == 0){
 800166c:	4b37      	ldr	r3, [pc, #220]	; (800174c <Minus_Time+0xe4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <Minus_Time+0x28>
		if(new_time.Hours == 0) new_time.Hours = 24;
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <Minus_Time+0xe8>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <Minus_Time+0x1a>
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <Minus_Time+0xe8>)
 800167e:	2218      	movs	r2, #24
 8001680:	701a      	strb	r2, [r3, #0]
		new_time.Hours = (new_time.Hours -1);
 8001682:	4b33      	ldr	r3, [pc, #204]	; (8001750 <Minus_Time+0xe8>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3b01      	subs	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <Minus_Time+0xe8>)
 800168c:	701a      	strb	r2, [r3, #0]
	}
	else if(Select_time_date == 5){
		if(new_date.Year == 0) new_date.Year = 100;
		new_date.Year = (new_date.Year -1);
	}
}
 800168e:	e058      	b.n	8001742 <Minus_Time+0xda>
	else if(Select_time_date == 1){
 8001690:	4b2e      	ldr	r3, [pc, #184]	; (800174c <Minus_Time+0xe4>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10d      	bne.n	80016b4 <Minus_Time+0x4c>
		if(new_time.Minutes == 0) new_time.Minutes = 60;
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <Minus_Time+0xe8>)
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <Minus_Time+0x3e>
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <Minus_Time+0xe8>)
 80016a2:	223c      	movs	r2, #60	; 0x3c
 80016a4:	705a      	strb	r2, [r3, #1]
		new_time.Minutes = (new_time.Minutes -1);
 80016a6:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <Minus_Time+0xe8>)
 80016a8:	785b      	ldrb	r3, [r3, #1]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <Minus_Time+0xe8>)
 80016b0:	705a      	strb	r2, [r3, #1]
}
 80016b2:	e046      	b.n	8001742 <Minus_Time+0xda>
	else if(Select_time_date == 2){
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <Minus_Time+0xe4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d10d      	bne.n	80016d8 <Minus_Time+0x70>
		if(new_time.Seconds == 0) new_time.Seconds = 60;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <Minus_Time+0xe8>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <Minus_Time+0x62>
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <Minus_Time+0xe8>)
 80016c6:	223c      	movs	r2, #60	; 0x3c
 80016c8:	709a      	strb	r2, [r3, #2]
		new_time.Seconds = (new_time.Seconds -1);
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <Minus_Time+0xe8>)
 80016cc:	789b      	ldrb	r3, [r3, #2]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <Minus_Time+0xe8>)
 80016d4:	709a      	strb	r2, [r3, #2]
}
 80016d6:	e034      	b.n	8001742 <Minus_Time+0xda>
	else if(Select_time_date == 3){
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <Minus_Time+0xe4>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d10d      	bne.n	80016fc <Minus_Time+0x94>
		new_date.Date = (new_date.Date -1);
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <Minus_Time+0xec>)
 80016e2:	789b      	ldrb	r3, [r3, #2]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <Minus_Time+0xec>)
 80016ea:	709a      	strb	r2, [r3, #2]
		if(new_date.Date == 0) new_date.Date = 31;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <Minus_Time+0xec>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d126      	bne.n	8001742 <Minus_Time+0xda>
 80016f4:	4b17      	ldr	r3, [pc, #92]	; (8001754 <Minus_Time+0xec>)
 80016f6:	221f      	movs	r2, #31
 80016f8:	709a      	strb	r2, [r3, #2]
}
 80016fa:	e022      	b.n	8001742 <Minus_Time+0xda>
	else if(Select_time_date == 4){
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <Minus_Time+0xe4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b04      	cmp	r3, #4
 8001702:	d10d      	bne.n	8001720 <Minus_Time+0xb8>
		new_date.Month = (new_date.Month -1);
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <Minus_Time+0xec>)
 8001706:	785b      	ldrb	r3, [r3, #1]
 8001708:	3b01      	subs	r3, #1
 800170a:	b2da      	uxtb	r2, r3
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <Minus_Time+0xec>)
 800170e:	705a      	strb	r2, [r3, #1]
		if(new_date.Month == 0) new_date.Month = 12;
 8001710:	4b10      	ldr	r3, [pc, #64]	; (8001754 <Minus_Time+0xec>)
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d114      	bne.n	8001742 <Minus_Time+0xda>
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <Minus_Time+0xec>)
 800171a:	220c      	movs	r2, #12
 800171c:	705a      	strb	r2, [r3, #1]
}
 800171e:	e010      	b.n	8001742 <Minus_Time+0xda>
	else if(Select_time_date == 5){
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <Minus_Time+0xe4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d10c      	bne.n	8001742 <Minus_Time+0xda>
		if(new_date.Year == 0) new_date.Year = 100;
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <Minus_Time+0xec>)
 800172a:	78db      	ldrb	r3, [r3, #3]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <Minus_Time+0xce>
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <Minus_Time+0xec>)
 8001732:	2264      	movs	r2, #100	; 0x64
 8001734:	70da      	strb	r2, [r3, #3]
		new_date.Year = (new_date.Year -1);
 8001736:	4b07      	ldr	r3, [pc, #28]	; (8001754 <Minus_Time+0xec>)
 8001738:	78db      	ldrb	r3, [r3, #3]
 800173a:	3b01      	subs	r3, #1
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <Minus_Time+0xec>)
 8001740:	70da      	strb	r2, [r3, #3]
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	200002e4 	.word	0x200002e4
 8001750:	200002a0 	.word	0x200002a0
 8001754:	200002b4 	.word	0x200002b4

08001758 <Change_Time>:
/**
  * @brief Zmienianie czasu i daty
  * @retval None
  */
void Change_Time(uint8_t remote)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
	if(remote == IR_BACK)//anulowanie zmieniania czasu
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b43      	cmp	r3, #67	; 0x43
 8001766:	d102      	bne.n	800176e <Change_Time+0x16>
		Enable_change = false;
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <Change_Time+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]

	if(remote == IR_PLUS){
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2b40      	cmp	r3, #64	; 0x40
 8001772:	d101      	bne.n	8001778 <Change_Time+0x20>
		Plus_Time();
 8001774:	f7ff fee0 	bl	8001538 <Plus_Time>
	}

	if(remote == IR_MINUS){
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b19      	cmp	r3, #25
 800177c:	d101      	bne.n	8001782 <Change_Time+0x2a>
		Minus_Time();
 800177e:	f7ff ff73 	bl	8001668 <Minus_Time>
	}

	if(remote == IR_FORWARD)//przełącza wartość którą zmieniamy
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	2b09      	cmp	r3, #9
 8001786:	d10f      	bne.n	80017a8 <Change_Time+0x50>
		Select_time_date = (Select_time_date +1) % 6;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <Change_Time+0xa8>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <Change_Time+0xac>)
 8001790:	fb83 3102 	smull	r3, r1, r3, r2
 8001794:	17d3      	asrs	r3, r2, #31
 8001796:	1ac9      	subs	r1, r1, r3
 8001798:	460b      	mov	r3, r1
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	440b      	add	r3, r1
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	1ad1      	subs	r1, r2, r3
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <Change_Time+0xa8>)
 80017a6:	701a      	strb	r2, [r3, #0]

	if(remote == IR_REWIND){//przełącza wartość którą zmieniamy
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b07      	cmp	r3, #7
 80017ac:	d10c      	bne.n	80017c8 <Change_Time+0x70>
		if(Select_time_date == 0) Select_time_date = 6;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <Change_Time+0xa8>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <Change_Time+0x64>
 80017b6:	4b12      	ldr	r3, [pc, #72]	; (8001800 <Change_Time+0xa8>)
 80017b8:	2206      	movs	r2, #6
 80017ba:	701a      	strb	r2, [r3, #0]
		Select_time_date = (Select_time_date -1);
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <Change_Time+0xa8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <Change_Time+0xa8>)
 80017c6:	701a      	strb	r2, [r3, #0]
	}

	Color_Selected();
 80017c8:	f7ff fdb6 	bl	8001338 <Color_Selected>

	if(remote == IR_PLAY){//Wczytuje zmienioną wartość do zegara
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b15      	cmp	r3, #21
 80017d0:	d10f      	bne.n	80017f2 <Change_Time+0x9a>
		HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 80017d2:	2200      	movs	r2, #0
 80017d4:	490c      	ldr	r1, [pc, #48]	; (8001808 <Change_Time+0xb0>)
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <Change_Time+0xb4>)
 80017d8:	f003 fa13 	bl	8004c02 <HAL_RTC_SetTime>
		HAL_RTC_SetDate(&hrtc, &new_date, RTC_FORMAT_BIN);
 80017dc:	2200      	movs	r2, #0
 80017de:	490c      	ldr	r1, [pc, #48]	; (8001810 <Change_Time+0xb8>)
 80017e0:	480a      	ldr	r0, [pc, #40]	; (800180c <Change_Time+0xb4>)
 80017e2:	f003 fb07 	bl	8004df4 <HAL_RTC_SetDate>
		Select_time_date = 0;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <Change_Time+0xa8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
		Enable_change = false;
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <Change_Time+0xa4>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	}
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000029b 	.word	0x2000029b
 8001800:	200002e4 	.word	0x200002e4
 8001804:	2aaaaaab 	.word	0x2aaaaaab
 8001808:	200002a0 	.word	0x200002a0
 800180c:	200002ec 	.word	0x200002ec
 8001810:	200002b4 	.word	0x200002b4

08001814 <Set_Alarm>:
/**
  * @brief Ustawianie godziny i minuty alarmu
  * @retval None
  */
void Set_Alarm(uint8_t remote)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af04      	add	r7, sp, #16
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	if(remote == IR_BACK)//anuluje ustawianie alarmu bez zmiany
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b43      	cmp	r3, #67	; 0x43
 8001822:	d102      	bne.n	800182a <Set_Alarm+0x16>
		Enable_alarm = false;
 8001824:	4b6a      	ldr	r3, [pc, #424]	; (80019d0 <Set_Alarm+0x1bc>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]

	if(remote == IR_PLUS){//zwiększa wybraną wartość
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b40      	cmp	r3, #64	; 0x40
 800182e:	d12b      	bne.n	8001888 <Set_Alarm+0x74>
		if(Select_alarm_time == 0)
 8001830:	4b68      	ldr	r3, [pc, #416]	; (80019d4 <Set_Alarm+0x1c0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d111      	bne.n	800185c <Set_Alarm+0x48>
			new_alarm.AlarmTime.Hours = (new_alarm.AlarmTime.Hours +1) % 24;
 8001838:	4b67      	ldr	r3, [pc, #412]	; (80019d8 <Set_Alarm+0x1c4>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	4b67      	ldr	r3, [pc, #412]	; (80019dc <Set_Alarm+0x1c8>)
 8001840:	fb83 1302 	smull	r1, r3, r3, r2
 8001844:	1099      	asrs	r1, r3, #2
 8001846:	17d3      	asrs	r3, r2, #31
 8001848:	1ac9      	subs	r1, r1, r3
 800184a:	460b      	mov	r3, r1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	440b      	add	r3, r1
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	1ad1      	subs	r1, r2, r3
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	4b60      	ldr	r3, [pc, #384]	; (80019d8 <Set_Alarm+0x1c4>)
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e015      	b.n	8001888 <Set_Alarm+0x74>
		else if(Select_alarm_time == 1)
 800185c:	4b5d      	ldr	r3, [pc, #372]	; (80019d4 <Set_Alarm+0x1c0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d111      	bne.n	8001888 <Set_Alarm+0x74>
			new_alarm.AlarmTime.Minutes = (new_alarm.AlarmTime.Minutes +1) % 60;
 8001864:	4b5c      	ldr	r3, [pc, #368]	; (80019d8 <Set_Alarm+0x1c4>)
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <Set_Alarm+0x1cc>)
 800186c:	fb83 1302 	smull	r1, r3, r3, r2
 8001870:	4413      	add	r3, r2
 8001872:	1159      	asrs	r1, r3, #5
 8001874:	17d3      	asrs	r3, r2, #31
 8001876:	1ac9      	subs	r1, r1, r3
 8001878:	460b      	mov	r3, r1
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a5b      	subs	r3, r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	1ad1      	subs	r1, r2, r3
 8001882:	b2ca      	uxtb	r2, r1
 8001884:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <Set_Alarm+0x1c4>)
 8001886:	705a      	strb	r2, [r3, #1]
	}

	if(remote == IR_MINUS){//zmniejsza wybraną wartość
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b19      	cmp	r3, #25
 800188c:	d122      	bne.n	80018d4 <Set_Alarm+0xc0>
		if(Select_alarm_time == 0){
 800188e:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <Set_Alarm+0x1c0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10d      	bne.n	80018b2 <Set_Alarm+0x9e>
			if(new_alarm.AlarmTime.Hours == 0) new_alarm.AlarmTime.Hours = 24;
 8001896:	4b50      	ldr	r3, [pc, #320]	; (80019d8 <Set_Alarm+0x1c4>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <Set_Alarm+0x90>
 800189e:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <Set_Alarm+0x1c4>)
 80018a0:	2218      	movs	r2, #24
 80018a2:	701a      	strb	r2, [r3, #0]
			new_alarm.AlarmTime.Hours = (new_alarm.AlarmTime.Hours -1);
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <Set_Alarm+0x1c4>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <Set_Alarm+0x1c4>)
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e010      	b.n	80018d4 <Set_Alarm+0xc0>
		}
		else if(Select_alarm_time == 1){
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <Set_Alarm+0x1c0>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10c      	bne.n	80018d4 <Set_Alarm+0xc0>
			if(new_alarm.AlarmTime.Minutes == 0) new_alarm.AlarmTime.Minutes = 60;
 80018ba:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <Set_Alarm+0x1c4>)
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <Set_Alarm+0xb4>
 80018c2:	4b45      	ldr	r3, [pc, #276]	; (80019d8 <Set_Alarm+0x1c4>)
 80018c4:	223c      	movs	r2, #60	; 0x3c
 80018c6:	705a      	strb	r2, [r3, #1]
			new_alarm.AlarmTime.Minutes = (new_alarm.AlarmTime.Minutes -1);
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <Set_Alarm+0x1c4>)
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <Set_Alarm+0x1c4>)
 80018d2:	705a      	strb	r2, [r3, #1]
		}
	}

	if(remote == IR_FORWARD)//przełącza wartość którą zmieniamy
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	2b09      	cmp	r3, #9
 80018d8:	d10a      	bne.n	80018f0 <Set_Alarm+0xdc>
		Select_alarm_time = (Select_alarm_time +1) % 2;
 80018da:	4b3e      	ldr	r3, [pc, #248]	; (80019d4 <Set_Alarm+0x1c0>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	bfb8      	it	lt
 80018e8:	425b      	neglt	r3, r3
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <Set_Alarm+0x1c0>)
 80018ee:	701a      	strb	r2, [r3, #0]

	if(remote == IR_REWIND){//przełącza wartość którą zmieniamy
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d10c      	bne.n	8001910 <Set_Alarm+0xfc>
		if(Select_alarm_time == 0) Select_alarm_time = 2;
 80018f6:	4b37      	ldr	r3, [pc, #220]	; (80019d4 <Set_Alarm+0x1c0>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <Set_Alarm+0xf0>
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <Set_Alarm+0x1c0>)
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
		Select_alarm_time = (Select_alarm_time -1);
 8001904:	4b33      	ldr	r3, [pc, #204]	; (80019d4 <Set_Alarm+0x1c0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	3b01      	subs	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <Set_Alarm+0x1c0>)
 800190e:	701a      	strb	r2, [r3, #0]
	}

	if(remote == IR_CANCEL){//Ustawia alarm
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	2b0d      	cmp	r3, #13
 8001914:	d10a      	bne.n	800192c <Set_Alarm+0x118>
		HAL_RTC_SetAlarm(&hrtc, &new_alarm, RTC_FORMAT_BIN);
 8001916:	2200      	movs	r2, #0
 8001918:	492f      	ldr	r1, [pc, #188]	; (80019d8 <Set_Alarm+0x1c4>)
 800191a:	4832      	ldr	r0, [pc, #200]	; (80019e4 <Set_Alarm+0x1d0>)
 800191c:	f003 fb3e 	bl	8004f9c <HAL_RTC_SetAlarm>
		Select_alarm_time = 0;
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <Set_Alarm+0x1c0>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
		Enable_alarm = false;
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <Set_Alarm+0x1bc>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
	}

	sprintf(strTime,"%02d:%02d:%02d", new_alarm.AlarmTime.Hours, new_alarm.AlarmTime.Minutes, new_alarm.AlarmTime.Seconds);
 800192c:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <Set_Alarm+0x1c4>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <Set_Alarm+0x1c4>)
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	4619      	mov	r1, r3
 8001938:	4b27      	ldr	r3, [pc, #156]	; (80019d8 <Set_Alarm+0x1c4>)
 800193a:	789b      	ldrb	r3, [r3, #2]
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	460b      	mov	r3, r1
 8001940:	4929      	ldr	r1, [pc, #164]	; (80019e8 <Set_Alarm+0x1d4>)
 8001942:	482a      	ldr	r0, [pc, #168]	; (80019ec <Set_Alarm+0x1d8>)
 8001944:	f007 f8d4 	bl	8008af0 <siprintf>
	ST7735_WriteString(15, 35, strTime, Font_16x26, ST7735_WHITE,ST7735_BLACK);
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <Set_Alarm+0x1dc>)
 800194a:	2200      	movs	r2, #0
 800194c:	9202      	str	r2, [sp, #8]
 800194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001952:	9201      	str	r2, [sp, #4]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	9200      	str	r2, [sp, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a24      	ldr	r2, [pc, #144]	; (80019ec <Set_Alarm+0x1d8>)
 800195c:	2123      	movs	r1, #35	; 0x23
 800195e:	200f      	movs	r0, #15
 8001960:	f000 fd3d 	bl	80023de <ST7735_WriteString>

	if(Select_alarm_time == 0){//miga wartością którą zmieniamy
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <Set_Alarm+0x1c0>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d114      	bne.n	8001996 <Set_Alarm+0x182>
		sprintf(strColored,"%02d",new_alarm.AlarmTime.Hours);
 800196c:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <Set_Alarm+0x1c4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4920      	ldr	r1, [pc, #128]	; (80019f4 <Set_Alarm+0x1e0>)
 8001974:	4820      	ldr	r0, [pc, #128]	; (80019f8 <Set_Alarm+0x1e4>)
 8001976:	f007 f8bb 	bl	8008af0 <siprintf>
		ST7735_WriteString(15, 35, strColored, Font_16x26, ST7735_BLACK,ST7735_BLACK);
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <Set_Alarm+0x1dc>)
 800197c:	2200      	movs	r2, #0
 800197e:	9202      	str	r2, [sp, #8]
 8001980:	2200      	movs	r2, #0
 8001982:	9201      	str	r2, [sp, #4]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <Set_Alarm+0x1e4>)
 800198c:	2123      	movs	r1, #35	; 0x23
 800198e:	200f      	movs	r0, #15
 8001990:	f000 fd25 	bl	80023de <ST7735_WriteString>
	}
	else if(Select_alarm_time == 1){
		sprintf(strColored,"%02d",new_alarm.AlarmTime.Minutes);
		ST7735_WriteString(63, 35, strColored, Font_16x26, ST7735_BLACK,ST7735_BLACK);
	}
}
 8001994:	e017      	b.n	80019c6 <Set_Alarm+0x1b2>
	else if(Select_alarm_time == 1){
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <Set_Alarm+0x1c0>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d113      	bne.n	80019c6 <Set_Alarm+0x1b2>
		sprintf(strColored,"%02d",new_alarm.AlarmTime.Minutes);
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <Set_Alarm+0x1c4>)
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4913      	ldr	r1, [pc, #76]	; (80019f4 <Set_Alarm+0x1e0>)
 80019a6:	4814      	ldr	r0, [pc, #80]	; (80019f8 <Set_Alarm+0x1e4>)
 80019a8:	f007 f8a2 	bl	8008af0 <siprintf>
		ST7735_WriteString(63, 35, strColored, Font_16x26, ST7735_BLACK,ST7735_BLACK);
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <Set_Alarm+0x1dc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	9202      	str	r2, [sp, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	9201      	str	r2, [sp, #4]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	9200      	str	r2, [sp, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <Set_Alarm+0x1e4>)
 80019be:	2123      	movs	r1, #35	; 0x23
 80019c0:	203f      	movs	r0, #63	; 0x3f
 80019c2:	f000 fd0c 	bl	80023de <ST7735_WriteString>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000029c 	.word	0x2000029c
 80019d4:	200002e5 	.word	0x200002e5
 80019d8:	200002b8 	.word	0x200002b8
 80019dc:	2aaaaaab 	.word	0x2aaaaaab
 80019e0:	88888889 	.word	0x88888889
 80019e4:	200002ec 	.word	0x200002ec
 80019e8:	0800ae18 	.word	0x0800ae18
 80019ec:	20000254 	.word	0x20000254
 80019f0:	20000008 	.word	0x20000008
 80019f4:	0800ae08 	.word	0x0800ae08
 80019f8:	20000290 	.word	0x20000290

080019fc <Hello>:
/**
  * @brief Wyświetla "Hello" na wyświetlaczu
  * @retval None
  */
void Hello(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af04      	add	r7, sp, #16
	 ST7735_FillScreen(ST7735_BLACK);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 fdaa 	bl	800255c <ST7735_FillScreen>
	 ST7735_WriteString(35, 51, "Hello", Font_16x26, ST7735_WHITE,ST7735_BLACK);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <Hello+0x3c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	9202      	str	r2, [sp, #8]
 8001a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <Hello+0x40>)
 8001a1c:	2133      	movs	r1, #51	; 0x33
 8001a1e:	2023      	movs	r0, #35	; 0x23
 8001a20:	f000 fcdd 	bl	80023de <ST7735_WriteString>
	 HAL_Delay(500);
 8001a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a28:	f001 fa2e 	bl	8002e88 <HAL_Delay>
	 ST7735_FillScreen(ST7735_BLACK);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 fd95 	bl	800255c <ST7735_FillScreen>
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	0800ae28 	.word	0x0800ae28

08001a40 <Write_TimeDate>:
/**
  * @brief Pobiera czas z RTC i wypisuje na wyświetlacz
  * @retval None
  */
void Write_TimeDate(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af04      	add	r7, sp, #16
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001a46:	2200      	movs	r2, #0
 8001a48:	4921      	ldr	r1, [pc, #132]	; (8001ad0 <Write_TimeDate+0x90>)
 8001a4a:	4822      	ldr	r0, [pc, #136]	; (8001ad4 <Write_TimeDate+0x94>)
 8001a4c:	f003 f976 	bl	8004d3c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001a50:	2200      	movs	r2, #0
 8001a52:	4921      	ldr	r1, [pc, #132]	; (8001ad8 <Write_TimeDate+0x98>)
 8001a54:	481f      	ldr	r0, [pc, #124]	; (8001ad4 <Write_TimeDate+0x94>)
 8001a56:	f003 fa54 	bl	8004f02 <HAL_RTC_GetDate>

	sprintf(strTime,"%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);//to one string
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <Write_TimeDate+0x90>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <Write_TimeDate+0x90>)
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <Write_TimeDate+0x90>)
 8001a68:	789b      	ldrb	r3, [r3, #2]
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	491b      	ldr	r1, [pc, #108]	; (8001adc <Write_TimeDate+0x9c>)
 8001a70:	481b      	ldr	r0, [pc, #108]	; (8001ae0 <Write_TimeDate+0xa0>)
 8001a72:	f007 f83d 	bl	8008af0 <siprintf>
	sprintf(strDate,"%02d %02d 20%02d", date.Date, date.Month, date.Year);
 8001a76:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <Write_TimeDate+0x98>)
 8001a78:	789b      	ldrb	r3, [r3, #2]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <Write_TimeDate+0x98>)
 8001a7e:	785b      	ldrb	r3, [r3, #1]
 8001a80:	4619      	mov	r1, r3
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <Write_TimeDate+0x98>)
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4916      	ldr	r1, [pc, #88]	; (8001ae4 <Write_TimeDate+0xa4>)
 8001a8c:	4816      	ldr	r0, [pc, #88]	; (8001ae8 <Write_TimeDate+0xa8>)
 8001a8e:	f007 f82f 	bl	8008af0 <siprintf>

	ST7735_WriteString(15, 35, strTime, Font_16x26, ST7735_WHITE,ST7735_BLACK);
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <Write_TimeDate+0xac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	9202      	str	r2, [sp, #8]
 8001a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a9c:	9201      	str	r2, [sp, #4]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	9200      	str	r2, [sp, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <Write_TimeDate+0xa0>)
 8001aa6:	2123      	movs	r1, #35	; 0x23
 8001aa8:	200f      	movs	r0, #15
 8001aaa:	f000 fc98 	bl	80023de <ST7735_WriteString>
	ST7735_WriteString(25, 67, strDate, Font_11x18, ST7735_WHITE,ST7735_BLACK);
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <Write_TimeDate+0xb0>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	9202      	str	r2, [sp, #8]
 8001ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab8:	9201      	str	r2, [sp, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	9200      	str	r2, [sp, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <Write_TimeDate+0xa8>)
 8001ac2:	2143      	movs	r1, #67	; 0x43
 8001ac4:	2019      	movs	r0, #25
 8001ac6:	f000 fc8a 	bl	80023de <ST7735_WriteString>
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000210 	.word	0x20000210
 8001ad4:	200002ec 	.word	0x200002ec
 8001ad8:	20000224 	.word	0x20000224
 8001adc:	0800ae18 	.word	0x0800ae18
 8001ae0:	20000254 	.word	0x20000254
 8001ae4:	0800ae30 	.word	0x0800ae30
 8001ae8:	20000268 	.word	0x20000268
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000000 	.word	0x20000000

08001af4 <Write_Temp>:
/**
  * @brief Wywołuje pomiar temperatury i wypisuje temperaturę na wyświetlacz
  * @retval None
  */
void Write_Temp(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af04      	add	r7, sp, #16
	  ds18b20_start_measure(NULL);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fa06 	bl	8000f0c <ds18b20_start_measure>

	  float temp = ds18b20_get_temp(NULL);
 8001b00:	2000      	movs	r0, #0
 8001b02:	f7ff fa41 	bl	8000f88 <ds18b20_get_temp>
 8001b06:	ed87 0a01 	vstr	s0, [r7, #4]
	  if (temp >= 80.0f)
 8001b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b0e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001b5c <Write_Temp+0x68>
 8001b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	db04      	blt.n	8001b26 <Write_Temp+0x32>
	    sprintf(strTemp, "wait...");
 8001b1c:	4910      	ldr	r1, [pc, #64]	; (8001b60 <Write_Temp+0x6c>)
 8001b1e:	4811      	ldr	r0, [pc, #68]	; (8001b64 <Write_Temp+0x70>)
 8001b20:	f006 ffe6 	bl	8008af0 <siprintf>
 8001b24:	e008      	b.n	8001b38 <Write_Temp+0x44>
	  else
	    sprintf(strTemp, " %.1f`C", temp);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fd0e 	bl	8000548 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	490d      	ldr	r1, [pc, #52]	; (8001b68 <Write_Temp+0x74>)
 8001b32:	480c      	ldr	r0, [pc, #48]	; (8001b64 <Write_Temp+0x70>)
 8001b34:	f006 ffdc 	bl	8008af0 <siprintf>

	  ST7735_WriteString(20, 51, strTemp, Font_16x26, ST7735_WHITE,ST7735_BLACK);
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <Write_Temp+0x78>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	9202      	str	r2, [sp, #8]
 8001b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b42:	9201      	str	r2, [sp, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	9200      	str	r2, [sp, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a06      	ldr	r2, [pc, #24]	; (8001b64 <Write_Temp+0x70>)
 8001b4c:	2133      	movs	r1, #51	; 0x33
 8001b4e:	2014      	movs	r0, #20
 8001b50:	f000 fc45 	bl	80023de <ST7735_WriteString>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	42a00000 	.word	0x42a00000
 8001b60:	0800ae44 	.word	0x0800ae44
 8001b64:	2000027c 	.word	0x2000027c
 8001b68:	0800ae4c 	.word	0x0800ae4c
 8001b6c:	20000008 	.word	0x20000008

08001b70 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief Obsługa Input capture przy wykryciu zmian na diodzie podczerwieni
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if (htim == &htim3)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d108      	bne.n	8001b92 <HAL_TIM_IC_CaptureCallback+0x22>
  {
    switch (HAL_TIM_GetActiveChannel(&htim3))
 8001b80:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001b82:	f005 f839 	bl	8006bf8 <HAL_TIM_GetActiveChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d104      	bne.n	8001b96 <HAL_TIM_IC_CaptureCallback+0x26>
    {
      case HAL_TIM_ACTIVE_CHANNEL_1:
        ir_tim_interrupt();
 8001b8c:	f7ff fada 	bl	8001144 <ir_tim_interrupt>
        break;
 8001b90:	e002      	b.n	8001b98 <HAL_TIM_IC_CaptureCallback+0x28>
      default:
        break;
    }
  }
 8001b92:	bf00      	nop
 8001b94:	e000      	b.n	8001b98 <HAL_TIM_IC_CaptureCallback+0x28>
        break;
 8001b96:	bf00      	nop
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000378 	.word	0x20000378

08001ba4 <Write_selected>:
/**
  * @brief Wywołuje wyświetlanie tych wartości które wybraliśmy(czas albo temperatura)
  * @retval None
  */
void Write_selected(uint8_t select)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	if(select == 0)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <Write_selected+0x16>
	{
		Write_TimeDate();
 8001bb4:	f7ff ff44 	bl	8001a40 <Write_TimeDate>
	}
	else if(select == 1)
	{
		Write_Temp();
	}
}
 8001bb8:	e004      	b.n	8001bc4 <Write_selected+0x20>
	else if(select == 1)
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <Write_selected+0x20>
		Write_Temp();
 8001bc0:	f7ff ff98 	bl	8001af4 <Write_Temp>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <Write_screen>:
/**
  * @brief Ustala co jest wyświetlane
  * @retval None
  */
void Write_screen(uint8_t remote)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	if(remote == IR_ONOFF){//Włączanie/wyłączanie podświetlenia wyświetlacza
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b45      	cmp	r3, #69	; 0x45
 8001bda:	d106      	bne.n	8001bea <Write_screen+0x1e>
		HAL_GPIO_TogglePin(BL_GPIO_Port, BL_Pin);
 8001bdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be4:	f001 fc48 	bl	8003478 <HAL_GPIO_TogglePin>
 8001be8:	e041      	b.n	8001c6e <Write_screen+0xa2>
	}
	else if(remote == IR_MENU){//zmiana między wyświetlaniem czasu a temperatury
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b47      	cmp	r3, #71	; 0x47
 8001bee:	d10e      	bne.n	8001c0e <Write_screen+0x42>
		Select_write = (Select_write + 1) % 2;
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <Write_screen+0xd0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	bfb8      	it	lt
 8001bfe:	425b      	neglt	r3, r3
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <Write_screen+0xd0>)
 8001c04:	701a      	strb	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 fca8 	bl	800255c <ST7735_FillScreen>
 8001c0c:	e02f      	b.n	8001c6e <Write_screen+0xa2>
	}
	else if((remote == IR_PLAY) & (Select_write == 0)){//rozpoczęcie zmiany czasu
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b15      	cmp	r3, #21
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <Write_screen+0xd0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf0c      	ite	eq
 8001c22:	2301      	moveq	r3, #1
 8001c24:	2300      	movne	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <Write_screen+0x70>
		Enable_change = true;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <Write_screen+0xd4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
		Save_last_time();
 8001c36:	f7ff fb3d 	bl	80012b4 <Save_last_time>
 8001c3a:	e018      	b.n	8001c6e <Write_screen+0xa2>
	}
	else if((remote == IR_CANCEL) & (Select_write == 0)){//rozpoczęcie ustawiania alarmu
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b0d      	cmp	r3, #13
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <Write_screen+0xd0>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	bf0c      	ite	eq
 8001c50:	2301      	moveq	r3, #1
 8001c52:	2300      	movne	r3, #0
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	4013      	ands	r3, r2
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <Write_screen+0xa2>
		Enable_alarm = true;
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <Write_screen+0xd8>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
		Save_last_alarm();
 8001c64:	f7ff fb4e 	bl	8001304 <Save_last_alarm>
		ST7735_FillScreen(ST7735_BLACK);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 fc77 	bl	800255c <ST7735_FillScreen>
	}

	if(!Enable_change & !Enable_alarm)//jeśli nie zmieniamy czasu, ani alarmu to przekazuje co aktualnie jest wybrane do wyświetlenia
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <Write_screen+0xd4>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <Write_screen+0xd8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d004      	beq.n	8001c94 <Write_screen+0xc8>
		Write_selected(Select_write);
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <Write_screen+0xd0>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff88 	bl	8001ba4 <Write_selected>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000029a 	.word	0x2000029a
 8001ca0:	2000029b 	.word	0x2000029b
 8001ca4:	2000029c 	.word	0x2000029c

08001ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cac:	f001 f870 	bl	8002d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb0:	f000 f844 	bl	8001d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb4:	f7ff f98e 	bl	8000fd4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001cb8:	f000 f978 	bl	8001fac <MX_SPI2_Init>
  MX_RTC_Init();
 8001cbc:	f000 f8a4 	bl	8001e08 <MX_RTC_Init>
  MX_TIM3_Init();
 8001cc0:	f000 fdaa 	bl	8002818 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001cc4:	f000 fe7e 	bl	80029c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ir_init();
 8001cc8:	f7ff fa94 	bl	80011f4 <ir_init>
  ST7735_Init();
 8001ccc:	f000 faf6 	bl	80022bc <ST7735_Init>
  Hello();
 8001cd0:	f7ff fe94 	bl	80019fc <Hello>

  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16);//Ustawienie przerwania co 1s
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cda:	4814      	ldr	r0, [pc, #80]	; (8001d2c <main+0x84>)
 8001cdc:	f003 fdaa 	bl	8005834 <HAL_RTCEx_SetWakeUpTimer_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(Alarm_on)
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <main+0x88>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d007      	beq.n	8001cf8 <main+0x50>
		  Active_alarm(ir_read());
 8001ce8:	f7ff fa92 	bl	8001210 <ir_read>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff faa9 	bl	8001248 <Active_alarm>
 8001cf6:	e7f3      	b.n	8001ce0 <main+0x38>
	  else if(Enable_change)
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <main+0x8c>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <main+0x68>
		  Change_Time(ir_read());
 8001d00:	f7ff fa86 	bl	8001210 <ir_read>
 8001d04:	4603      	mov	r3, r0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fd25 	bl	8001758 <Change_Time>
 8001d0e:	e7e7      	b.n	8001ce0 <main+0x38>
	  else if(Enable_alarm)
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <main+0x90>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <main+0x80>
		  Set_Alarm(ir_read());
 8001d18:	f7ff fa7a 	bl	8001210 <ir_read>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fd77 	bl	8001814 <Set_Alarm>
 8001d26:	e7db      	b.n	8001ce0 <main+0x38>
	  else
		  __WFI();
 8001d28:	bf30      	wfi
	  if(Alarm_on)
 8001d2a:	e7d9      	b.n	8001ce0 <main+0x38>
 8001d2c:	200002ec 	.word	0x200002ec
 8001d30:	2000029d 	.word	0x2000029d
 8001d34:	2000029b 	.word	0x2000029b
 8001d38:	2000029c 	.word	0x2000029c

08001d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b096      	sub	sp, #88	; 0x58
 8001d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	2244      	movs	r2, #68	; 0x44
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f006 f96e 	bl	800802c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
 8001d5a:	60da      	str	r2, [r3, #12]
 8001d5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d62:	f001 fbc1 	bl	80034e8 <HAL_PWREx_ControlVoltageScaling>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d6c:	f000 f846 	bl	8001dfc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d70:	f001 fb9c 	bl	80034ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d74:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <SystemClock_Config+0xbc>)
 8001d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <SystemClock_Config+0xbc>)
 8001d7c:	f023 0318 	bic.w	r3, r3, #24
 8001d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001d84:	2306      	movs	r3, #6
 8001d86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d92:	2310      	movs	r3, #16
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d96:	2302      	movs	r3, #2
 8001d98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001da2:	230a      	movs	r3, #10
 8001da4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001da6:	2307      	movs	r3, #7
 8001da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001daa:	2302      	movs	r3, #2
 8001dac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4618      	mov	r0, r3
 8001db8:	f001 fbec 	bl	8003594 <HAL_RCC_OscConfig>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001dc2:	f000 f81b 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc6:	230f      	movs	r3, #15
 8001dc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dda:	463b      	mov	r3, r7
 8001ddc:	2104      	movs	r1, #4
 8001dde:	4618      	mov	r0, r3
 8001de0:	f001 ffb4 	bl	8003d4c <HAL_RCC_ClockConfig>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001dea:	f000 f807 	bl	8001dfc <Error_Handler>
  }
}
 8001dee:	bf00      	nop
 8001df0:	3758      	adds	r7, #88	; 0x58
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <Error_Handler+0x8>
	...

08001e08 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b092      	sub	sp, #72	; 0x48
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	222c      	movs	r2, #44	; 0x2c
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f006 f8ff 	bl	800802c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e30:	4a3c      	ldr	r2, [pc, #240]	; (8001f24 <MX_RTC_Init+0x11c>)
 8001e32:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e3a:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e3c:	227f      	movs	r2, #127	; 0x7f
 8001e3e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e40:	4b37      	ldr	r3, [pc, #220]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e42:	22ff      	movs	r2, #255	; 0xff
 8001e44:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e46:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e52:	4b33      	ldr	r3, [pc, #204]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e58:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e5e:	4830      	ldr	r0, [pc, #192]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e60:	f002 fe54 	bl	8004b0c <HAL_RTC_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001e6a:	f7ff ffc7 	bl	8001dfc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001e88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4823      	ldr	r0, [pc, #140]	; (8001f20 <MX_RTC_Init+0x118>)
 8001e92:	f002 feb6 	bl	8004c02 <HAL_RTC_SetTime>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001e9c:	f7ff ffae 	bl	8001dfc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001ea0:	2307      	movs	r3, #7
 8001ea2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 23;
 8001eb2:	2317      	movs	r3, #23
 8001eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001eb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4817      	ldr	r0, [pc, #92]	; (8001f20 <MX_RTC_Init+0x118>)
 8001ec2:	f002 ff97 	bl	8004df4 <HAL_RTC_SetDate>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001ecc:	f7ff ff96 	bl	8001dfc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	2200      	movs	r2, #0
 8001f04:	4619      	mov	r1, r3
 8001f06:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_RTC_Init+0x118>)
 8001f08:	f003 f976 	bl	80051f8 <HAL_RTC_SetAlarm_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001f12:	f7ff ff73 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	3748      	adds	r7, #72	; 0x48
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200002ec 	.word	0x200002ec
 8001f24:	40002800 	.word	0x40002800

08001f28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0a4      	sub	sp, #144	; 0x90
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	2288      	movs	r2, #136	; 0x88
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f006 f877 	bl	800802c <memset>
  if(rtcHandle->Instance==RTC)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_RTC_MspInit+0x7c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d128      	bne.n	8001f9a <HAL_RTC_MspInit+0x72>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 f91a 	bl	8004194 <HAL_RCCEx_PeriphCLKConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f66:	f7ff ff49 	bl	8001dfc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_RTC_MspInit+0x80>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a0d      	ldr	r2, [pc, #52]	; (8001fa8 <HAL_RTC_MspInit+0x80>)
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	2003      	movs	r0, #3
 8001f80:	f001 f881 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001f84:	2003      	movs	r0, #3
 8001f86:	f001 f89a 	bl	80030be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 2, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	2029      	movs	r0, #41	; 0x29
 8001f90:	f001 f879 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001f94:	2029      	movs	r0, #41	; 0x29
 8001f96:	f001 f892 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f9a:	bf00      	nop
 8001f9c:	3790      	adds	r7, #144	; 0x90
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40002800 	.word	0x40002800
 8001fa8:	40021000 	.word	0x40021000

08001fac <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	; (8002024 <MX_SPI2_Init+0x78>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_SPI2_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_SPI2_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_SPI2_Init+0x74>)
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_SPI2_Init+0x74>)
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_SPI2_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_SPI2_Init+0x74>)
 800200c:	f003 fce0 	bl	80059d0 <HAL_SPI_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002016:	f7ff fef1 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000310 	.word	0x20000310
 8002024:	40003800 	.word	0x40003800

08002028 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a25      	ldr	r2, [pc, #148]	; (80020dc <HAL_SPI_MspInit+0xb4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d144      	bne.n	80020d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002062:	4b1f      	ldr	r3, [pc, #124]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206e:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002086:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <HAL_SPI_MspInit+0xb8>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002092:	2308      	movs	r3, #8
 8002094:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209e:	2303      	movs	r3, #3
 80020a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020a2:	2305      	movs	r3, #5
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <HAL_SPI_MspInit+0xbc>)
 80020ae:	f001 f821 	bl	80030f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c4:	2305      	movs	r3, #5
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	; (80020e8 <HAL_SPI_MspInit+0xc0>)
 80020d0:	f001 f810 	bl	80030f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80020d4:	bf00      	nop
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40003800 	.word	0x40003800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48000800 	.word	0x48000800
 80020e8:	48000400 	.word	0x48000400

080020ec <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f6:	4802      	ldr	r0, [pc, #8]	; (8002100 <ST7735_Select+0x14>)
 80020f8:	f001 f9a6 	bl	8003448 <HAL_GPIO_WritePin>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	48000400 	.word	0x48000400

08002104 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002108:	2201      	movs	r2, #1
 800210a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210e:	4802      	ldr	r0, [pc, #8]	; (8002118 <ST7735_Unselect+0x14>)
 8002110:	f001 f99a 	bl	8003448 <HAL_GPIO_WritePin>
}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	48000400 	.word	0x48000400

0800211c <ST7735_Reset>:

static void ST7735_Reset() {
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002120:	2200      	movs	r2, #0
 8002122:	2104      	movs	r1, #4
 8002124:	4806      	ldr	r0, [pc, #24]	; (8002140 <ST7735_Reset+0x24>)
 8002126:	f001 f98f 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800212a:	2005      	movs	r0, #5
 800212c:	f000 feac 	bl	8002e88 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002130:	2201      	movs	r2, #1
 8002132:	2104      	movs	r1, #4
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <ST7735_Reset+0x24>)
 8002136:	f001 f987 	bl	8003448 <HAL_GPIO_WritePin>
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	48000400 	.word	0x48000400

08002144 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002154:	4806      	ldr	r0, [pc, #24]	; (8002170 <ST7735_WriteCommand+0x2c>)
 8002156:	f001 f977 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800215a:	1df9      	adds	r1, r7, #7
 800215c:	f04f 33ff 	mov.w	r3, #4294967295
 8002160:	2201      	movs	r2, #1
 8002162:	4804      	ldr	r0, [pc, #16]	; (8002174 <ST7735_WriteCommand+0x30>)
 8002164:	f003 fcd7 	bl	8005b16 <HAL_SPI_Transmit>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	48000400 	.word	0x48000400
 8002174:	20000310 	.word	0x20000310

08002178 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002188:	4807      	ldr	r0, [pc, #28]	; (80021a8 <ST7735_WriteData+0x30>)
 800218a:	f001 f95d 	bl	8003448 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b29a      	uxth	r2, r3
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <ST7735_WriteData+0x34>)
 800219a:	f003 fcbc 	bl	8005b16 <HAL_SPI_Transmit>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	48000400 	.word	0x48000400
 80021ac:	20000310 	.word	0x20000310

080021b0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80021c2:	e034      	b.n	800222e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80021ce:	7afb      	ldrb	r3, [r7, #11]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ffb7 	bl	8002144 <ST7735_WriteCommand>

        numArgs = *addr++;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80021e0:	7abb      	ldrb	r3, [r7, #10]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80021ea:	7abb      	ldrb	r3, [r7, #10]
 80021ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f0:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80021f2:	7abb      	ldrb	r3, [r7, #10]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80021f8:	7abb      	ldrb	r3, [r7, #10]
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ffbb 	bl	8002178 <ST7735_WriteData>
            addr += numArgs;
 8002202:	7abb      	ldrb	r3, [r7, #10]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800220a:	89bb      	ldrh	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d00e      	beq.n	800222e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800221a:	89bb      	ldrh	r3, [r7, #12]
 800221c:	2bff      	cmp	r3, #255	; 0xff
 800221e:	d102      	bne.n	8002226 <ST7735_ExecuteCommandList+0x76>
 8002220:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002224:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002226:	89bb      	ldrh	r3, [r7, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fe2d 	bl	8002e88 <HAL_Delay>
    while(numCommands--) {
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	1e5a      	subs	r2, r3, #1
 8002232:	73fa      	strb	r2, [r7, #15]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1c5      	bne.n	80021c4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002242:	b590      	push	{r4, r7, lr}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	4604      	mov	r4, r0
 800224a:	4608      	mov	r0, r1
 800224c:	4611      	mov	r1, r2
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	4603      	mov	r3, r0
 8002256:	71bb      	strb	r3, [r7, #6]
 8002258:	460b      	mov	r3, r1
 800225a:	717b      	strb	r3, [r7, #5]
 800225c:	4613      	mov	r3, r2
 800225e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002260:	202a      	movs	r0, #42	; 0x2a
 8002262:	f7ff ff6f 	bl	8002144 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002266:	2300      	movs	r3, #0
 8002268:	733b      	strb	r3, [r7, #12]
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	3301      	adds	r3, #1
 800226e:	b2db      	uxtb	r3, r3
 8002270:	737b      	strb	r3, [r7, #13]
 8002272:	2300      	movs	r3, #0
 8002274:	73bb      	strb	r3, [r7, #14]
 8002276:	797b      	ldrb	r3, [r7, #5]
 8002278:	3301      	adds	r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 800227e:	f107 030c 	add.w	r3, r7, #12
 8002282:	2104      	movs	r1, #4
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff77 	bl	8002178 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800228a:	202b      	movs	r0, #43	; 0x2b
 800228c:	f7ff ff5a 	bl	8002144 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002290:	79bb      	ldrb	r3, [r7, #6]
 8002292:	3302      	adds	r3, #2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8002298:	793b      	ldrb	r3, [r7, #4]
 800229a:	3302      	adds	r3, #2
 800229c:	b2db      	uxtb	r3, r3
 800229e:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80022a0:	f107 030c 	add.w	r3, r7, #12
 80022a4:	2104      	movs	r1, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff ff66 	bl	8002178 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80022ac:	202c      	movs	r0, #44	; 0x2c
 80022ae:	f7ff ff49 	bl	8002144 <ST7735_WriteCommand>
}
 80022b2:	bf00      	nop
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd90      	pop	{r4, r7, pc}
	...

080022bc <ST7735_Init>:


void ST7735_Init() {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
    ST7735_Select();
 80022c0:	f7ff ff14 	bl	80020ec <ST7735_Select>
    ST7735_Reset();
 80022c4:	f7ff ff2a 	bl	800211c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80022c8:	4806      	ldr	r0, [pc, #24]	; (80022e4 <ST7735_Init+0x28>)
 80022ca:	f7ff ff71 	bl	80021b0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80022ce:	4806      	ldr	r0, [pc, #24]	; (80022e8 <ST7735_Init+0x2c>)
 80022d0:	f7ff ff6e 	bl	80021b0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80022d4:	4805      	ldr	r0, [pc, #20]	; (80022ec <ST7735_Init+0x30>)
 80022d6:	f7ff ff6b 	bl	80021b0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80022da:	f7ff ff13 	bl	8002104 <ST7735_Unselect>
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800cefc 	.word	0x0800cefc
 80022e8:	0800cf38 	.word	0x0800cf38
 80022ec:	0800cf48 	.word	0x0800cf48

080022f0 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80022f0:	b082      	sub	sp, #8
 80022f2:	b590      	push	{r4, r7, lr}
 80022f4:	b089      	sub	sp, #36	; 0x24
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
 80022fa:	4603      	mov	r3, r0
 80022fc:	80fb      	strh	r3, [r7, #6]
 80022fe:	460b      	mov	r3, r1
 8002300:	80bb      	strh	r3, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	b2d8      	uxtb	r0, r3
 800230a:	88bb      	ldrh	r3, [r7, #4]
 800230c:	b2d9      	uxtb	r1, r3
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002316:	4413      	add	r3, r2
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b2dc      	uxtb	r4, r3
 800231e:	88bb      	ldrh	r3, [r7, #4]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002326:	4413      	add	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b2db      	uxtb	r3, r3
 800232e:	4622      	mov	r2, r4
 8002330:	f7ff ff87 	bl	8002242 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e043      	b.n	80023c2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800233a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	3b20      	subs	r3, #32
 8002340:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4619      	mov	r1, r3
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	440b      	add	r3, r1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	881b      	ldrh	r3, [r3, #0]
 8002354:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	e029      	b.n	80023b0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800236c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	b29b      	uxth	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	743b      	strb	r3, [r7, #16]
 8002376:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002378:	b2db      	uxtb	r3, r3
 800237a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2102      	movs	r1, #2
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fef8 	bl	8002178 <ST7735_WriteData>
 8002388:	e00f      	b.n	80023aa <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800238a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800238e:	0a1b      	lsrs	r3, r3, #8
 8002390:	b29b      	uxth	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	733b      	strb	r3, [r7, #12]
 8002396:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800239a:	b2db      	uxtb	r3, r3
 800239c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	2102      	movs	r1, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fee7 	bl	8002178 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	3301      	adds	r3, #1
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023b4:	461a      	mov	r2, r3
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d3cf      	bcc.n	800235c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	3301      	adds	r3, #1
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023c6:	461a      	mov	r2, r3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d3b5      	bcc.n	800233a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80023ce:	bf00      	nop
 80023d0:	bf00      	nop
 80023d2:	3724      	adds	r7, #36	; 0x24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80023da:	b002      	add	sp, #8
 80023dc:	4770      	bx	lr

080023de <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80023de:	b082      	sub	sp, #8
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af04      	add	r7, sp, #16
 80023e6:	603a      	str	r2, [r7, #0]
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
 80023ee:	460b      	mov	r3, r1
 80023f0:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80023f2:	f7ff fe7b 	bl	80020ec <ST7735_Select>

    while(*str) {
 80023f6:	e02d      	b.n	8002454 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80023f8:	88fb      	ldrh	r3, [r7, #6]
 80023fa:	7d3a      	ldrb	r2, [r7, #20]
 80023fc:	4413      	add	r3, r2
 80023fe:	2b9f      	cmp	r3, #159	; 0x9f
 8002400:	dd13      	ble.n	800242a <ST7735_WriteString+0x4c>
            x = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002406:	7d7b      	ldrb	r3, [r7, #21]
 8002408:	b29a      	uxth	r2, r3
 800240a:	88bb      	ldrh	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002410:	88bb      	ldrh	r3, [r7, #4]
 8002412:	7d7a      	ldrb	r2, [r7, #21]
 8002414:	4413      	add	r3, r2
 8002416:	2b7f      	cmp	r3, #127	; 0x7f
 8002418:	dc21      	bgt.n	800245e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b20      	cmp	r3, #32
 8002420:	d103      	bne.n	800242a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	603b      	str	r3, [r7, #0]
                continue;
 8002428:	e014      	b.n	8002454 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	88b9      	ldrh	r1, [r7, #4]
 8002430:	88f8      	ldrh	r0, [r7, #6]
 8002432:	8c3b      	ldrh	r3, [r7, #32]
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	8bbb      	ldrh	r3, [r7, #28]
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f7ff ff56 	bl	80022f0 <ST7735_WriteChar>
        x += font.width;
 8002444:	7d3b      	ldrb	r3, [r7, #20]
 8002446:	b29a      	uxth	r2, r3
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	4413      	add	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
        str++;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1cd      	bne.n	80023f8 <ST7735_WriteString+0x1a>
 800245c:	e000      	b.n	8002460 <ST7735_WriteString+0x82>
                break;
 800245e:	bf00      	nop
    }

    ST7735_Unselect();
 8002460:	f7ff fe50 	bl	8002104 <ST7735_Unselect>
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800246e:	b002      	add	sp, #8
 8002470:	4770      	bx	lr
	...

08002474 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	80fb      	strh	r3, [r7, #6]
 8002486:	4603      	mov	r3, r0
 8002488:	80bb      	strh	r3, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	807b      	strh	r3, [r7, #2]
 800248e:	4613      	mov	r3, r2
 8002490:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	2b9f      	cmp	r3, #159	; 0x9f
 8002496:	d858      	bhi.n	800254a <ST7735_FillRectangle+0xd6>
 8002498:	88bb      	ldrh	r3, [r7, #4]
 800249a:	2b7f      	cmp	r3, #127	; 0x7f
 800249c:	d855      	bhi.n	800254a <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800249e:	88fa      	ldrh	r2, [r7, #6]
 80024a0:	887b      	ldrh	r3, [r7, #2]
 80024a2:	4413      	add	r3, r2
 80024a4:	2ba0      	cmp	r3, #160	; 0xa0
 80024a6:	dd03      	ble.n	80024b0 <ST7735_FillRectangle+0x3c>
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80024ae:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80024b0:	88ba      	ldrh	r2, [r7, #4]
 80024b2:	883b      	ldrh	r3, [r7, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	2b80      	cmp	r3, #128	; 0x80
 80024b8:	dd03      	ble.n	80024c2 <ST7735_FillRectangle+0x4e>
 80024ba:	88bb      	ldrh	r3, [r7, #4]
 80024bc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024c0:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80024c2:	f7ff fe13 	bl	80020ec <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	b2d8      	uxtb	r0, r3
 80024ca:	88bb      	ldrh	r3, [r7, #4]
 80024cc:	b2d9      	uxtb	r1, r3
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b2dc      	uxtb	r4, r3
 80024de:	88bb      	ldrh	r3, [r7, #4]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	883b      	ldrh	r3, [r7, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4622      	mov	r2, r4
 80024f0:	f7ff fea7 	bl	8002242 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80024f4:	8c3b      	ldrh	r3, [r7, #32]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	733b      	strb	r3, [r7, #12]
 80024fe:	8c3b      	ldrh	r3, [r7, #32]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002504:	2201      	movs	r2, #1
 8002506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800250a:	4812      	ldr	r0, [pc, #72]	; (8002554 <ST7735_FillRectangle+0xe0>)
 800250c:	f000 ff9c 	bl	8003448 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002510:	883b      	ldrh	r3, [r7, #0]
 8002512:	80bb      	strh	r3, [r7, #4]
 8002514:	e013      	b.n	800253e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	80fb      	strh	r3, [r7, #6]
 800251a:	e00a      	b.n	8002532 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800251c:	f107 010c 	add.w	r1, r7, #12
 8002520:	f04f 33ff 	mov.w	r3, #4294967295
 8002524:	2202      	movs	r2, #2
 8002526:	480c      	ldr	r0, [pc, #48]	; (8002558 <ST7735_FillRectangle+0xe4>)
 8002528:	f003 faf5 	bl	8005b16 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800252c:	88fb      	ldrh	r3, [r7, #6]
 800252e:	3b01      	subs	r3, #1
 8002530:	80fb      	strh	r3, [r7, #6]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1f1      	bne.n	800251c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002538:	88bb      	ldrh	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	80bb      	strh	r3, [r7, #4]
 800253e:	88bb      	ldrh	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e8      	bne.n	8002516 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002544:	f7ff fdde 	bl	8002104 <ST7735_Unselect>
 8002548:	e000      	b.n	800254c <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800254a:	bf00      	nop
}
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}
 8002552:	bf00      	nop
 8002554:	48000400 	.word	0x48000400
 8002558:	20000310 	.word	0x20000310

0800255c <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af02      	add	r7, sp, #8
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	22a0      	movs	r2, #160	; 0xa0
 800256e:	2100      	movs	r1, #0
 8002570:	2000      	movs	r0, #0
 8002572:	f7ff ff7f 	bl	8002474 <ST7735_FillRectangle>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_MspInit+0x44>)
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_MspInit+0x44>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6613      	str	r3, [r2, #96]	; 0x60
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_MspInit+0x44>)
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_MspInit+0x44>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	4a08      	ldr	r2, [pc, #32]	; (80025c4 <HAL_MspInit+0x44>)
 80025a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a8:	6593      	str	r3, [r2, #88]	; 0x58
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_MspInit+0x44>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <NMI_Handler+0x4>

080025ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <HardFault_Handler+0x4>

080025d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <MemManage_Handler+0x4>

080025da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025de:	e7fe      	b.n	80025de <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002614:	f000 fc18 	bl	8002e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	bd80      	pop	{r7, pc}

0800261c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */
	Write_screen(ir_read());
 8002620:	f7fe fdf6 	bl	8001210 <ir_read>
 8002624:	4603      	mov	r3, r0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff facf 	bl	8001bcc <Write_screen>
  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800262e:	4802      	ldr	r0, [pc, #8]	; (8002638 <RTC_WKUP_IRQHandler+0x1c>)
 8002630:	f003 f994 	bl	800595c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200002ec 	.word	0x200002ec

0800263c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <TIM3_IRQHandler+0x10>)
 8002642:	f003 ffa7 	bl	8006594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000378 	.word	0x20000378

08002650 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	Turn_on_alarm();
 8002654:	f7fe fe22 	bl	800129c <Turn_on_alarm>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002658:	4802      	ldr	r0, [pc, #8]	; (8002664 <RTC_Alarm_IRQHandler+0x14>)
 800265a:	f002 ffc9 	bl	80055f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	200002ec 	.word	0x200002ec

08002668 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
	return 1;
 800266c:	2301      	movs	r3, #1
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <_kill>:

int _kill(int pid, int sig)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002682:	f005 fca1 	bl	8007fc8 <__errno>
 8002686:	4603      	mov	r3, r0
 8002688:	2216      	movs	r2, #22
 800268a:	601a      	str	r2, [r3, #0]
	return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_exit>:

void _exit (int status)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ffe7 	bl	8002678 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026aa:	e7fe      	b.n	80026aa <_exit+0x12>

080026ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e00a      	b.n	80026d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026be:	f3af 8000 	nop.w
 80026c2:	4601      	mov	r1, r0
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	60ba      	str	r2, [r7, #8]
 80026ca:	b2ca      	uxtb	r2, r1
 80026cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbf0      	blt.n	80026be <_read+0x12>
	}

return len;
 80026dc:	687b      	ldr	r3, [r7, #4]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e009      	b.n	800270c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	60ba      	str	r2, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	dbf1      	blt.n	80026f8 <_write+0x12>
	}
	return len;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_close>:

int _close(int file)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	return -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002746:	605a      	str	r2, [r3, #4]
	return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_isatty>:

int _isatty(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
	return 1;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
	return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <_sbrk+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_sbrk+0x60>)
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x64>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <_sbrk+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b8:	f005 fc06 	bl	8007fc8 <__errno>
 80027bc:	4603      	mov	r3, r0
 80027be:	220c      	movs	r2, #12
 80027c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	e009      	b.n	80027dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <_sbrk+0x64>)
 80027d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20018000 	.word	0x20018000
 80027e8:	00000400 	.word	0x00000400
 80027ec:	20000374 	.word	0x20000374
 80027f0:	20000460 	.word	0x20000460

080027f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <SystemInit+0x20>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a05      	ldr	r2, [pc, #20]	; (8002814 <SystemInit+0x20>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b090      	sub	sp, #64	; 0x40
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800282c:	f107 031c 	add.w	r3, r7, #28
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002848:	463b      	mov	r3, r7
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002854:	4b34      	ldr	r3, [pc, #208]	; (8002928 <MX_TIM3_Init+0x110>)
 8002856:	4a35      	ldr	r2, [pc, #212]	; (800292c <MX_TIM3_Init+0x114>)
 8002858:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800285a:	4b33      	ldr	r3, [pc, #204]	; (8002928 <MX_TIM3_Init+0x110>)
 800285c:	224f      	movs	r2, #79	; 0x4f
 800285e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <MX_TIM3_Init+0x110>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <MX_TIM3_Init+0x110>)
 8002868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286e:	4b2e      	ldr	r3, [pc, #184]	; (8002928 <MX_TIM3_Init+0x110>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002874:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <MX_TIM3_Init+0x110>)
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800287a:	482b      	ldr	r0, [pc, #172]	; (8002928 <MX_TIM3_Init+0x110>)
 800287c:	f003 fc1e 	bl	80060bc <HAL_TIM_Base_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002886:	f7ff fab9 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800288a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002890:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002894:	4619      	mov	r1, r3
 8002896:	4824      	ldr	r0, [pc, #144]	; (8002928 <MX_TIM3_Init+0x110>)
 8002898:	f004 f837 	bl	800690a <HAL_TIM_ConfigClockSource>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80028a2:	f7ff faab 	bl	8001dfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80028a6:	4820      	ldr	r0, [pc, #128]	; (8002928 <MX_TIM3_Init+0x110>)
 80028a8:	f003 fcc8 	bl	800623c <HAL_TIM_IC_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80028b2:	f7ff faa3 	bl	8001dfc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80028b6:	2304      	movs	r3, #4
 80028b8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80028ba:	2340      	movs	r3, #64	; 0x40
 80028bc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028be:	2300      	movs	r3, #0
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	4816      	ldr	r0, [pc, #88]	; (8002928 <MX_TIM3_Init+0x110>)
 80028ce:	f004 f8e5 	bl	8006a9c <HAL_TIM_SlaveConfigSynchro>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 80028d8:	f7ff fa90 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	4619      	mov	r1, r3
 80028ea:	480f      	ldr	r0, [pc, #60]	; (8002928 <MX_TIM3_Init+0x110>)
 80028ec:	f004 fca2 	bl	8007234 <HAL_TIMEx_MasterConfigSynchronization>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 80028f6:	f7ff fa81 	bl	8001dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80028fa:	2302      	movs	r3, #2
 80028fc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028fe:	2301      	movs	r3, #1
 8002900:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800290a:	463b      	mov	r3, r7
 800290c:	2200      	movs	r2, #0
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	; (8002928 <MX_TIM3_Init+0x110>)
 8002912:	f003 ff5e 	bl	80067d2 <HAL_TIM_IC_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 800291c:	f7ff fa6e 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	3740      	adds	r7, #64	; 0x40
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000378 	.word	0x20000378
 800292c:	40000400 	.word	0x40000400

08002930 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	; 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_TIM_Base_MspInit+0x8c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d130      	bne.n	80029b4 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_TIM_Base_MspInit+0x90>)
 8002954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002956:	4a1a      	ldr	r2, [pc, #104]	; (80029c0 <HAL_TIM_Base_MspInit+0x90>)
 8002958:	f043 0302 	orr.w	r3, r3, #2
 800295c:	6593      	str	r3, [r2, #88]	; 0x58
 800295e:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_TIM_Base_MspInit+0x90>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_TIM_Base_MspInit+0x90>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <HAL_TIM_Base_MspInit+0x90>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_TIM_Base_MspInit+0x90>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002982:	2340      	movs	r3, #64	; 0x40
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002992:	2302      	movs	r3, #2
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a0:	f000 fba8 	bl	80030f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2105      	movs	r1, #5
 80029a8:	201d      	movs	r0, #29
 80029aa:	f000 fb6c 	bl	8003086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029ae:	201d      	movs	r0, #29
 80029b0:	f000 fb85 	bl	80030be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029b4:	bf00      	nop
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40021000 	.word	0x40021000

080029c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029c8:	4b16      	ldr	r3, [pc, #88]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <MX_USART3_UART_Init+0x64>)
 80029cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029d6:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029de:	2200      	movs	r2, #0
 80029e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029ea:	220c      	movs	r2, #12
 80029ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8002a00:	4b08      	ldr	r3, [pc, #32]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 8002a02:	2210      	movs	r2, #16
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 8002a08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <MX_USART3_UART_Init+0x60>)
 8002a10:	f004 fcb6 	bl	8007380 <HAL_HalfDuplex_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8002a1a:	f7ff f9ef 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200003c4 	.word	0x200003c4
 8002a28:	40004800 	.word	0x40004800

08002a2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b0ac      	sub	sp, #176	; 0xb0
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2288      	movs	r2, #136	; 0x88
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f005 faed 	bl	800802c <memset>
  if(uartHandle->Instance==USART3)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_UART_MspInit+0xb0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d13a      	bne.n	8002ad2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fb93 	bl	8004194 <HAL_RCCEx_PeriphCLKConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a74:	f7ff f9c2 	bl	8001dfc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_UART_MspInit+0xb4>)
 8002a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7c:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_UART_MspInit+0xb4>)
 8002a7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a82:	6593      	str	r3, [r2, #88]	; 0x58
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_UART_MspInit+0xb4>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a90:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_UART_MspInit+0xb4>)
 8002a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a94:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <HAL_UART_MspInit+0xb4>)
 8002a96:	f043 0304 	orr.w	r3, r3, #4
 8002a9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a9c:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_UART_MspInit+0xb4>)
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aae:	2312      	movs	r3, #18
 8002ab0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002aca:	4619      	mov	r1, r3
 8002acc:	4805      	ldr	r0, [pc, #20]	; (8002ae4 <HAL_UART_MspInit+0xb8>)
 8002ace:	f000 fb11 	bl	80030f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	37b0      	adds	r7, #176	; 0xb0
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40004800 	.word	0x40004800
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	48000800 	.word	0x48000800

08002ae8 <set_baudrate>:
#include "tim.h"
#include "usart.h"


static void set_baudrate(uint32_t baudrate)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  huart3.Instance = USART3;
 8002af0:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <set_baudrate+0x64>)
 8002af2:	4a17      	ldr	r2, [pc, #92]	; (8002b50 <set_baudrate+0x68>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = baudrate;
 8002af6:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <set_baudrate+0x64>)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <set_baudrate+0x64>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b02:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <set_baudrate+0x64>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <set_baudrate+0x64>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <set_baudrate+0x64>)
 8002b10:	220c      	movs	r2, #12
 8002b12:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b14:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <set_baudrate+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <set_baudrate+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b20:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <set_baudrate+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <set_baudrate+0x64>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <set_baudrate+0x64>)
 8002b2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38

  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <set_baudrate+0x64>)
 8002b36:	f004 fc23 	bl	8007380 <HAL_HalfDuplex_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <set_baudrate+0x5c>
  {
    Error_Handler();
 8002b40:	f7ff f95c 	bl	8001dfc <Error_Handler>
  }
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200003c4 	.word	0x200003c4
 8002b50:	40004800 	.word	0x40004800

08002b54 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xF0;
 8002b5a:	23f0      	movs	r3, #240	; 0xf0
 8002b5c:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	71bb      	strb	r3, [r7, #6]

  set_baudrate(9600);
 8002b62:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002b66:	f7ff ffbf 	bl	8002ae8 <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8002b6a:	1df9      	adds	r1, r7, #7
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	2201      	movs	r2, #1
 8002b72:	480c      	ldr	r0, [pc, #48]	; (8002ba4 <wire_reset+0x50>)
 8002b74:	f004 fc5a 	bl	800742c <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8002b78:	1db9      	adds	r1, r7, #6
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4808      	ldr	r0, [pc, #32]	; (8002ba4 <wire_reset+0x50>)
 8002b82:	f004 fce7 	bl	8007554 <HAL_UART_Receive>
  set_baudrate(115200);
 8002b86:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002b8a:	f7ff ffad 	bl	8002ae8 <set_baudrate>

  if (data_in != 0xF0)
 8002b8e:	79bb      	ldrb	r3, [r7, #6]
 8002b90:	2bf0      	cmp	r3, #240	; 0xf0
 8002b92:	d001      	beq.n	8002b98 <wire_reset+0x44>
    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <wire_reset+0x46>
  else
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200003c4 	.word	0x200003c4

08002ba8 <read_bit>:

static int read_bit(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xFF;
 8002bae:	23ff      	movs	r3, #255	; 0xff
 8002bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8002bb6:	1df9      	adds	r1, r7, #7
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	4808      	ldr	r0, [pc, #32]	; (8002be0 <read_bit+0x38>)
 8002bc0:	f004 fc34 	bl	800742c <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8002bc4:	1db9      	adds	r1, r7, #6
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4804      	ldr	r0, [pc, #16]	; (8002be0 <read_bit+0x38>)
 8002bce:	f004 fcc1 	bl	8007554 <HAL_UART_Receive>

  return data_in & 0x01;
 8002bd2:	79bb      	ldrb	r3, [r7, #6]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200003c4 	.word	0x200003c4

08002be4 <wire_read>:

uint8_t wire_read(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	e00e      	b.n	8002c12 <wire_read+0x2e>
    value >>= 1;
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	085b      	lsrs	r3, r3, #1
 8002bf8:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8002bfa:	f7ff ffd5 	bl	8002ba8 <read_bit>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <wire_read+0x28>
      value |= 0x80;
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c0a:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b07      	cmp	r3, #7
 8002c16:	dded      	ble.n	8002bf4 <wire_read+0x10>
  }
  return value;
 8002c18:	79fb      	ldrb	r3, [r7, #7]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <write_bit>:

static void write_bit(int value)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if (value) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <write_bit+0x24>
      uint8_t data_out = 0xff;
 8002c32:	23ff      	movs	r3, #255	; 0xff
 8002c34:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8002c36:	f107 010f 	add.w	r1, r7, #15
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4808      	ldr	r0, [pc, #32]	; (8002c64 <write_bit+0x40>)
 8002c42:	f004 fbf3 	bl	800742c <HAL_UART_Transmit>
  } else {
      uint8_t data_out = 0x0;
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}
 8002c46:	e009      	b.n	8002c5c <write_bit+0x38>
      uint8_t data_out = 0x0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8002c4c:	f107 010e 	add.w	r1, r7, #14
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	2201      	movs	r2, #1
 8002c56:	4803      	ldr	r0, [pc, #12]	; (8002c64 <write_bit+0x40>)
 8002c58:	f004 fbe8 	bl	800742c <HAL_UART_Transmit>
}
 8002c5c:	bf00      	nop
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	200003c4 	.word	0x200003c4

08002c68 <wire_write>:

void wire_write(uint8_t byte)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	e00b      	b.n	8002c90 <wire_write+0x28>
    write_bit(byte & 0x01);
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ffd0 	bl	8002c24 <write_bit>
    byte >>= 1;
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b07      	cmp	r3, #7
 8002c94:	ddf0      	ble.n	8002c78 <wire_write+0x10>
  }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <byte_crc>:

static uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	460a      	mov	r2, r1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	e016      	b.n	8002ce4 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8002cb6:	79fa      	ldrb	r2, [r7, #7]
 8002cb8:	79bb      	ldrb	r3, [r7, #6]
 8002cba:	4053      	eors	r3, r2
 8002cbc:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	085b      	lsrs	r3, r3, #1
 8002cc2:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8002cc4:	7afb      	ldrb	r3, [r7, #11]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <byte_crc+0x38>
      crc ^= 0x8c;
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b07      	cmp	r3, #7
 8002ce8:	dde5      	ble.n	8002cb6 <byte_crc+0x16>
  }
  return crc;
 8002cea:	79fb      	ldrb	r3, [r7, #7]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	e00d      	b.n	8002d28 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	781a      	ldrb	r2, [r3, #0]
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ffc1 	bl	8002ca0 <byte_crc>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	dbed      	blt.n	8002d0c <wire_crc+0x14>

    return crc;
 8002d30:	7afb      	ldrb	r3, [r7, #11]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d40:	f7ff fd58 	bl	80027f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d44:	480c      	ldr	r0, [pc, #48]	; (8002d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d46:	490d      	ldr	r1, [pc, #52]	; (8002d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <LoopForever+0xe>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d4c:	e002      	b.n	8002d54 <LoopCopyDataInit>

08002d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d52:	3304      	adds	r3, #4

08002d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d58:	d3f9      	bcc.n	8002d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d5c:	4c0a      	ldr	r4, [pc, #40]	; (8002d88 <LoopForever+0x16>)
  movs r3, #0
 8002d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d60:	e001      	b.n	8002d66 <LoopFillZerobss>

08002d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d64:	3204      	adds	r2, #4

08002d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d68:	d3fb      	bcc.n	8002d62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6a:	f005 f933 	bl	8007fd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d6e:	f7fe ff9b 	bl	8001ca8 <main>

08002d72 <LoopForever>:

LoopForever:
    b LoopForever
 8002d72:	e7fe      	b.n	8002d72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d7c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002d80:	0800d3a4 	.word	0x0800d3a4
  ldr r2, =_sbss
 8002d84:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002d88:	2000045c 	.word	0x2000045c

08002d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d8c:	e7fe      	b.n	8002d8c <ADC1_2_IRQHandler>
	...

08002d90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d9a:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <HAL_Init+0x3c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a0b      	ldr	r2, [pc, #44]	; (8002dcc <HAL_Init+0x3c>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da6:	2003      	movs	r0, #3
 8002da8:	f000 f962 	bl	8003070 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dac:	2000      	movs	r0, #0
 8002dae:	f000 f80f 	bl	8002dd0 <HAL_InitTick>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	e001      	b.n	8002dc2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dbe:	f7ff fbdf 	bl	8002580 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ddc:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_InitTick+0x6c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d023      	beq.n	8002e2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002de4:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_InitTick+0x70>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_InitTick+0x6c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f96d 	bl	80030da <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10f      	bne.n	8002e26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d809      	bhi.n	8002e20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 f937 	bl	8003086 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <HAL_InitTick+0x74>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e007      	b.n	8002e30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e004      	b.n	8002e30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e001      	b.n	8002e30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000018 	.word	0x20000018
 8002e40:	20000010 	.word	0x20000010
 8002e44:	20000014 	.word	0x20000014

08002e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x20>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_IncTick+0x24>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4413      	add	r3, r2
 8002e58:	4a04      	ldr	r2, [pc, #16]	; (8002e6c <HAL_IncTick+0x24>)
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	20000018 	.word	0x20000018
 8002e6c:	20000448 	.word	0x20000448

08002e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <HAL_GetTick+0x14>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	20000448 	.word	0x20000448

08002e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff ffee 	bl	8002e70 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d005      	beq.n	8002eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_Delay+0x44>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4413      	add	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eae:	bf00      	nop
 8002eb0:	f7ff ffde 	bl	8002e70 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d8f7      	bhi.n	8002eb0 <HAL_Delay+0x28>
  {
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000018 	.word	0x20000018

08002ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eec:	4013      	ands	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f02:	4a04      	ldr	r2, [pc, #16]	; (8002f14 <__NVIC_SetPriorityGrouping+0x44>)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	60d3      	str	r3, [r2, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <__NVIC_GetPriorityGrouping+0x18>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 0307 	and.w	r3, r3, #7
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db0b      	blt.n	8002f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	4907      	ldr	r1, [pc, #28]	; (8002f6c <__NVIC_EnableIRQ+0x38>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000e100 	.word	0xe000e100

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	; (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	; (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800303c:	d301      	bcc.n	8003042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	4a0a      	ldr	r2, [pc, #40]	; (800306c <SysTick_Config+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	f7ff ff8e 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <SysTick_Config+0x40>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305a:	4b04      	ldr	r3, [pc, #16]	; (800306c <SysTick_Config+0x40>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff29 	bl	8002ed0 <__NVIC_SetPriorityGrouping>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003098:	f7ff ff3e 	bl	8002f18 <__NVIC_GetPriorityGrouping>
 800309c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff8e 	bl	8002fc4 <NVIC_EncodePriority>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	bf00      	nop
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	4603      	mov	r3, r0
 80030c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff31 	bl	8002f34 <__NVIC_EnableIRQ>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff ffa2 	bl	800302c <SysTick_Config>
 80030e8:	4603      	mov	r3, r0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003102:	e17f      	b.n	8003404 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2101      	movs	r1, #1
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	4013      	ands	r3, r2
 8003112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	f000 8171 	beq.w	80033fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d005      	beq.n	8003134 <HAL_GPIO_Init+0x40>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d130      	bne.n	8003196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	2203      	movs	r2, #3
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800316a:	2201      	movs	r2, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0201 	and.w	r2, r3, #1
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d118      	bne.n	80031d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031a8:	2201      	movs	r2, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	08db      	lsrs	r3, r3, #3
 80031be:	f003 0201 	and.w	r2, r3, #1
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d017      	beq.n	8003210 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d123      	bne.n	8003264 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	08da      	lsrs	r2, r3, #3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3208      	adds	r2, #8
 8003224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	08da      	lsrs	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3208      	adds	r2, #8
 800325e:	6939      	ldr	r1, [r7, #16]
 8003260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0203 	and.w	r2, r3, #3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80ac 	beq.w	80033fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032a6:	4b5f      	ldr	r3, [pc, #380]	; (8003424 <HAL_GPIO_Init+0x330>)
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	4a5e      	ldr	r2, [pc, #376]	; (8003424 <HAL_GPIO_Init+0x330>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6613      	str	r3, [r2, #96]	; 0x60
 80032b2:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <HAL_GPIO_Init+0x330>)
 80032b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032be:	4a5a      	ldr	r2, [pc, #360]	; (8003428 <HAL_GPIO_Init+0x334>)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	089b      	lsrs	r3, r3, #2
 80032c4:	3302      	adds	r3, #2
 80032c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	220f      	movs	r2, #15
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032e8:	d025      	beq.n	8003336 <HAL_GPIO_Init+0x242>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4f      	ldr	r2, [pc, #316]	; (800342c <HAL_GPIO_Init+0x338>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01f      	beq.n	8003332 <HAL_GPIO_Init+0x23e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4e      	ldr	r2, [pc, #312]	; (8003430 <HAL_GPIO_Init+0x33c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d019      	beq.n	800332e <HAL_GPIO_Init+0x23a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4d      	ldr	r2, [pc, #308]	; (8003434 <HAL_GPIO_Init+0x340>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_GPIO_Init+0x236>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a4c      	ldr	r2, [pc, #304]	; (8003438 <HAL_GPIO_Init+0x344>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00d      	beq.n	8003326 <HAL_GPIO_Init+0x232>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4b      	ldr	r2, [pc, #300]	; (800343c <HAL_GPIO_Init+0x348>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <HAL_GPIO_Init+0x22e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4a      	ldr	r2, [pc, #296]	; (8003440 <HAL_GPIO_Init+0x34c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_GPIO_Init+0x22a>
 800331a:	2306      	movs	r3, #6
 800331c:	e00c      	b.n	8003338 <HAL_GPIO_Init+0x244>
 800331e:	2307      	movs	r3, #7
 8003320:	e00a      	b.n	8003338 <HAL_GPIO_Init+0x244>
 8003322:	2305      	movs	r3, #5
 8003324:	e008      	b.n	8003338 <HAL_GPIO_Init+0x244>
 8003326:	2304      	movs	r3, #4
 8003328:	e006      	b.n	8003338 <HAL_GPIO_Init+0x244>
 800332a:	2303      	movs	r3, #3
 800332c:	e004      	b.n	8003338 <HAL_GPIO_Init+0x244>
 800332e:	2302      	movs	r3, #2
 8003330:	e002      	b.n	8003338 <HAL_GPIO_Init+0x244>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <HAL_GPIO_Init+0x244>
 8003336:	2300      	movs	r3, #0
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	f002 0203 	and.w	r2, r2, #3
 800333e:	0092      	lsls	r2, r2, #2
 8003340:	4093      	lsls	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003348:	4937      	ldr	r1, [pc, #220]	; (8003428 <HAL_GPIO_Init+0x334>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003356:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_GPIO_Init+0x350>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800337a:	4a32      	ldr	r2, [pc, #200]	; (8003444 <HAL_GPIO_Init+0x350>)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003380:	4b30      	ldr	r3, [pc, #192]	; (8003444 <HAL_GPIO_Init+0x350>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033a4:	4a27      	ldr	r2, [pc, #156]	; (8003444 <HAL_GPIO_Init+0x350>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_GPIO_Init+0x350>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ce:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <HAL_GPIO_Init+0x350>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_GPIO_Init+0x350>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033f8:	4a12      	ldr	r2, [pc, #72]	; (8003444 <HAL_GPIO_Init+0x350>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3301      	adds	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	fa22 f303 	lsr.w	r3, r2, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	f47f ae78 	bne.w	8003104 <HAL_GPIO_Init+0x10>
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000
 8003428:	40010000 	.word	0x40010000
 800342c:	48000400 	.word	0x48000400
 8003430:	48000800 	.word	0x48000800
 8003434:	48000c00 	.word	0x48000c00
 8003438:	48001000 	.word	0x48001000
 800343c:	48001400 	.word	0x48001400
 8003440:	48001800 	.word	0x48001800
 8003444:	40010400 	.word	0x40010400

08003448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
 8003454:	4613      	mov	r3, r2
 8003456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003458:	787b      	ldrb	r3, [r7, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003464:	e002      	b.n	800346c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	041a      	lsls	r2, r3, #16
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43d9      	mvns	r1, r3
 8003496:	887b      	ldrh	r3, [r7, #2]
 8003498:	400b      	ands	r3, r1
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ba:	6013      	str	r3, [r2, #0]
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40007000 	.word	0x40007000

080034cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40007000 	.word	0x40007000

080034e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f6:	d130      	bne.n	800355a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034f8:	4b23      	ldr	r3, [pc, #140]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003504:	d038      	beq.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003506:	4b20      	ldr	r3, [pc, #128]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800350e:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003514:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2232      	movs	r2, #50	; 0x32
 800351c:	fb02 f303 	mul.w	r3, r2, r3
 8003520:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0c9b      	lsrs	r3, r3, #18
 8003528:	3301      	adds	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800352c:	e002      	b.n	8003534 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3b01      	subs	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003534:	4b14      	ldr	r3, [pc, #80]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d102      	bne.n	8003548 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f2      	bne.n	800352e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003548:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003554:	d110      	bne.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e00f      	b.n	800357a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003566:	d007      	beq.n	8003578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003570:	4a05      	ldr	r2, [pc, #20]	; (8003588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003576:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40007000 	.word	0x40007000
 800358c:	20000010 	.word	0x20000010
 8003590:	431bde83 	.word	0x431bde83

08003594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e3ca      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a6:	4b97      	ldr	r3, [pc, #604]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b0:	4b94      	ldr	r3, [pc, #592]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f003 0303 	and.w	r3, r3, #3
 80035b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80e4 	beq.w	8003790 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_RCC_OscConfig+0x4a>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	f040 808b 	bne.w	80036ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 8087 	bne.w	80036ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035de:	4b89      	ldr	r3, [pc, #548]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x62>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e3a2      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1a      	ldr	r2, [r3, #32]
 80035fa:	4b82      	ldr	r3, [pc, #520]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d004      	beq.n	8003610 <HAL_RCC_OscConfig+0x7c>
 8003606:	4b7f      	ldr	r3, [pc, #508]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360e:	e005      	b.n	800361c <HAL_RCC_OscConfig+0x88>
 8003610:	4b7c      	ldr	r3, [pc, #496]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800361c:	4293      	cmp	r3, r2
 800361e:	d223      	bcs.n	8003668 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fd55 	bl	80040d4 <RCC_SetFlashLatencyFromMSIRange>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e383      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003634:	4b73      	ldr	r3, [pc, #460]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a72      	ldr	r2, [pc, #456]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800363a:	f043 0308 	orr.w	r3, r3, #8
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	496d      	ldr	r1, [pc, #436]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003652:	4b6c      	ldr	r3, [pc, #432]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	4968      	ldr	r1, [pc, #416]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]
 8003666:	e025      	b.n	80036b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800366e:	f043 0308 	orr.w	r3, r3, #8
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b63      	ldr	r3, [pc, #396]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4960      	ldr	r1, [pc, #384]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003686:	4b5f      	ldr	r3, [pc, #380]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	495b      	ldr	r1, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fd15 	bl	80040d4 <RCC_SetFlashLatencyFromMSIRange>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e343      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036b4:	f000 fc4a 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b52      	ldr	r3, [pc, #328]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	4950      	ldr	r1, [pc, #320]	; (8003808 <HAL_RCC_OscConfig+0x274>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	4a4e      	ldr	r2, [pc, #312]	; (800380c <HAL_RCC_OscConfig+0x278>)
 80036d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036d4:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <HAL_RCC_OscConfig+0x27c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fb79 	bl	8002dd0 <HAL_InitTick>
 80036de:	4603      	mov	r3, r0
 80036e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d052      	beq.n	800378e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	e327      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d032      	beq.n	800375a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036f4:	4b43      	ldr	r3, [pc, #268]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a42      	ldr	r2, [pc, #264]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003700:	f7ff fbb6 	bl	8002e70 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003708:	f7ff fbb2 	bl	8002e70 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e310      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800371a:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a36      	ldr	r2, [pc, #216]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800372c:	f043 0308 	orr.w	r3, r3, #8
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b34      	ldr	r3, [pc, #208]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	4931      	ldr	r1, [pc, #196]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003740:	4313      	orrs	r3, r2
 8003742:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003744:	4b2f      	ldr	r3, [pc, #188]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	492c      	ldr	r1, [pc, #176]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003754:	4313      	orrs	r3, r2
 8003756:	604b      	str	r3, [r1, #4]
 8003758:	e01a      	b.n	8003790 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800375a:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a29      	ldr	r2, [pc, #164]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003760:	f023 0301 	bic.w	r3, r3, #1
 8003764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003766:	f7ff fb83 	bl	8002e70 <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800376e:	f7ff fb7f 	bl	8002e70 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e2dd      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x1da>
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800378e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d074      	beq.n	8003886 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d005      	beq.n	80037ae <HAL_RCC_OscConfig+0x21a>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b0c      	cmp	r3, #12
 80037a6:	d10e      	bne.n	80037c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d10b      	bne.n	80037c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d064      	beq.n	8003884 <HAL_RCC_OscConfig+0x2f0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d160      	bne.n	8003884 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e2ba      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x24a>
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a0b      	ldr	r2, [pc, #44]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	e026      	b.n	800382c <HAL_RCC_OscConfig+0x298>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037e6:	d115      	bne.n	8003814 <HAL_RCC_OscConfig+0x280>
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a05      	ldr	r2, [pc, #20]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80037ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a02      	ldr	r2, [pc, #8]	; (8003804 <HAL_RCC_OscConfig+0x270>)
 80037fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037fe:	6013      	str	r3, [r2, #0]
 8003800:	e014      	b.n	800382c <HAL_RCC_OscConfig+0x298>
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000
 8003808:	0800cf74 	.word	0x0800cf74
 800380c:	20000010 	.word	0x20000010
 8003810:	20000014 	.word	0x20000014
 8003814:	4ba0      	ldr	r3, [pc, #640]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a9f      	ldr	r2, [pc, #636]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b9d      	ldr	r3, [pc, #628]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a9c      	ldr	r2, [pc, #624]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7ff fb1c 	bl	8002e70 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7ff fb18 	bl	8002e70 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e276      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384e:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0x2a8>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7ff fb08 	bl	8002e70 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7ff fb04 	bl	8002e70 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e262      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003876:	4b88      	ldr	r3, [pc, #544]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x2d0>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d060      	beq.n	8003954 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_OscConfig+0x310>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d119      	bne.n	80038d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d116      	bne.n	80038d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a4:	4b7c      	ldr	r3, [pc, #496]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_OscConfig+0x328>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e23f      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038bc:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	061b      	lsls	r3, r3, #24
 80038ca:	4973      	ldr	r1, [pc, #460]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d0:	e040      	b.n	8003954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d023      	beq.n	8003922 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038da:	4b6f      	ldr	r3, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a6e      	ldr	r2, [pc, #440]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e6:	f7ff fac3 	bl	8002e70 <HAL_GetTick>
 80038ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ec:	e008      	b.n	8003900 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ee:	f7ff fabf 	bl	8002e70 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d901      	bls.n	8003900 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e21d      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003900:	4b65      	ldr	r3, [pc, #404]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0f0      	beq.n	80038ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390c:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	061b      	lsls	r3, r3, #24
 800391a:	495f      	ldr	r1, [pc, #380]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
 8003920:	e018      	b.n	8003954 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003922:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a5c      	ldr	r2, [pc, #368]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800392c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392e:	f7ff fa9f 	bl	8002e70 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7ff fa9b 	bl	8002e70 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1f9      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d03c      	beq.n	80039da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01c      	beq.n	80039a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003968:	4b4b      	ldr	r3, [pc, #300]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 800396a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800396e:	4a4a      	ldr	r2, [pc, #296]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7ff fa7a 	bl	8002e70 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003980:	f7ff fa76 	bl	8002e70 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e1d4      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003992:	4b41      	ldr	r3, [pc, #260]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ef      	beq.n	8003980 <HAL_RCC_OscConfig+0x3ec>
 80039a0:	e01b      	b.n	80039da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039a8:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b2:	f7ff fa5d 	bl	8002e70 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ba:	f7ff fa59 	bl	8002e70 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e1b7      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039cc:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1ef      	bne.n	80039ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f000 80a6 	beq.w	8003b34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10d      	bne.n	8003a14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	4a26      	ldr	r2, [pc, #152]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 80039fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a02:	6593      	str	r3, [r2, #88]	; 0x58
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a10:	2301      	movs	r3, #1
 8003a12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d118      	bne.n	8003a52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2c:	f7ff fa20 	bl	8002e70 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7ff fa1c 	bl	8002e70 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e17a      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a46:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_RCC_OscConfig+0x508>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d108      	bne.n	8003a6c <HAL_RCC_OscConfig+0x4d8>
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a6a:	e029      	b.n	8003ac0 <HAL_RCC_OscConfig+0x52c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d115      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x50c>
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8a:	4a03      	ldr	r2, [pc, #12]	; (8003a98 <HAL_RCC_OscConfig+0x504>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a94:	e014      	b.n	8003ac0 <HAL_RCC_OscConfig+0x52c>
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	4b9c      	ldr	r3, [pc, #624]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	4a9b      	ldr	r2, [pc, #620]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab0:	4b98      	ldr	r3, [pc, #608]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a97      	ldr	r2, [pc, #604]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d016      	beq.n	8003af6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac8:	f7ff f9d2 	bl	8002e70 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad0:	f7ff f9ce 	bl	8002e70 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e12a      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae6:	4b8b      	ldr	r3, [pc, #556]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ed      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x53c>
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af6:	f7ff f9bb 	bl	8002e70 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7ff f9b7 	bl	8002e70 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e113      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b14:	4b7f      	ldr	r3, [pc, #508]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ed      	bne.n	8003afe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b22:	7ffb      	ldrb	r3, [r7, #31]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d105      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b28:	4b7a      	ldr	r3, [pc, #488]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	4a79      	ldr	r2, [pc, #484]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f000 80fe 	beq.w	8003d3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	f040 80d0 	bne.w	8003ce8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b48:	4b72      	ldr	r3, [pc, #456]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d130      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	3b01      	subs	r3, #1
 8003b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d127      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d11f      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b88:	2a07      	cmp	r2, #7
 8003b8a:	bf14      	ite	ne
 8003b8c:	2201      	movne	r2, #1
 8003b8e:	2200      	moveq	r2, #0
 8003b90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d113      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	085b      	lsrs	r3, r3, #1
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d06e      	beq.n	8003c9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	d069      	beq.n	8003c98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bd0:	4b50      	ldr	r3, [pc, #320]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0ad      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003be0:	4b4c      	ldr	r3, [pc, #304]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bec:	f7ff f940 	bl	8002e70 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7ff f93c 	bl	8002e70 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e09a      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c06:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c12:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	4b40      	ldr	r3, [pc, #256]	; (8003d18 <HAL_RCC_OscConfig+0x784>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c22:	3a01      	subs	r2, #1
 8003c24:	0112      	lsls	r2, r2, #4
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c2c:	0212      	lsls	r2, r2, #8
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c34:	0852      	lsrs	r2, r2, #1
 8003c36:	3a01      	subs	r2, #1
 8003c38:	0552      	lsls	r2, r2, #21
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c40:	0852      	lsrs	r2, r2, #1
 8003c42:	3a01      	subs	r2, #1
 8003c44:	0652      	lsls	r2, r2, #25
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c4c:	0912      	lsrs	r2, r2, #4
 8003c4e:	0452      	lsls	r2, r2, #17
 8003c50:	430a      	orrs	r2, r1
 8003c52:	4930      	ldr	r1, [pc, #192]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c58:	4b2e      	ldr	r3, [pc, #184]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c64:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c70:	f7ff f8fe 	bl	8002e70 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7ff f8fa 	bl	8002e70 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e058      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c8a:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c96:	e050      	b.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e04f      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d148      	bne.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a19      	ldr	r2, [pc, #100]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb4:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cc0:	f7ff f8d6 	bl	8002e70 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7ff f8d2 	bl	8002e70 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e030      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cda:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x734>
 8003ce6:	e028      	b.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b0c      	cmp	r3, #12
 8003cec:	d023      	beq.n	8003d36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a08      	ldr	r2, [pc, #32]	; (8003d14 <HAL_RCC_OscConfig+0x780>)
 8003cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfa:	f7ff f8b9 	bl	8002e70 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d00:	e00c      	b.n	8003d1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d02:	f7ff f8b5 	bl	8002e70 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d905      	bls.n	8003d1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e013      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
 8003d14:	40021000 	.word	0x40021000
 8003d18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_OscConfig+0x7b0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ec      	bne.n	8003d02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d28:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCC_OscConfig+0x7b0>)
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	4905      	ldr	r1, [pc, #20]	; (8003d44 <HAL_RCC_OscConfig+0x7b0>)
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCC_OscConfig+0x7b4>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60cb      	str	r3, [r1, #12]
 8003d34:	e001      	b.n	8003d3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	feeefffc 	.word	0xfeeefffc

08003d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0e7      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d60:	4b75      	ldr	r3, [pc, #468]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d910      	bls.n	8003d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6e:	4b72      	ldr	r3, [pc, #456]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f023 0207 	bic.w	r2, r3, #7
 8003d76:	4970      	ldr	r1, [pc, #448]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d7e:	4b6e      	ldr	r3, [pc, #440]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d001      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0cf      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d908      	bls.n	8003dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dac:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	4960      	ldr	r1, [pc, #384]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04c      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd2:	4b5a      	ldr	r3, [pc, #360]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d121      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e0a6      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dea:	4b54      	ldr	r3, [pc, #336]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e09a      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e02:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e08e      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e12:	4b4a      	ldr	r3, [pc, #296]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e086      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b46      	ldr	r3, [pc, #280]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4943      	ldr	r1, [pc, #268]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e34:	f7ff f81c 	bl	8002e70 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7ff f818 	bl	8002e70 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e06e      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d010      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	4b31      	ldr	r3, [pc, #196]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d208      	bcs.n	8003e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e80:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	492b      	ldr	r1, [pc, #172]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e92:	4b29      	ldr	r3, [pc, #164]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d210      	bcs.n	8003ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 0207 	bic.w	r2, r3, #7
 8003ea8:	4923      	ldr	r1, [pc, #140]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb0:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e036      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ece:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4918      	ldr	r1, [pc, #96]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4910      	ldr	r1, [pc, #64]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f00:	f000 f824 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b0d      	ldr	r3, [pc, #52]	; (8003f3c <HAL_RCC_ClockConfig+0x1f0>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 030f 	and.w	r3, r3, #15
 8003f10:	490b      	ldr	r1, [pc, #44]	; (8003f40 <HAL_RCC_ClockConfig+0x1f4>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1c:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <HAL_RCC_ClockConfig+0x1f8>)
 8003f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_ClockConfig+0x1fc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe ff53 	bl	8002dd0 <HAL_InitTick>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40022000 	.word	0x40022000
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	0800cf74 	.word	0x0800cf74
 8003f44:	20000010 	.word	0x20000010
 8003f48:	20000014 	.word	0x20000014

08003f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b089      	sub	sp, #36	; 0x24
 8003f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f64:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_GetSysClockFreq+0x34>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b0c      	cmp	r3, #12
 8003f78:	d121      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d11e      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f80:	4b34      	ldr	r3, [pc, #208]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f8c:	4b31      	ldr	r3, [pc, #196]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f92:	0a1b      	lsrs	r3, r3, #8
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	e005      	b.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f9c:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fa8:	4a2b      	ldr	r2, [pc, #172]	; (8004058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10d      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d102      	bne.n	8003fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e004      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d134      	bne.n	8004044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b03      	cmp	r3, #3
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8003ff0:	e005      	b.n	8003ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff4:	617b      	str	r3, [r7, #20]
      break;
 8003ff6:	e005      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ff8:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffa:	617b      	str	r3, [r7, #20]
      break;
 8003ffc:	e002      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	617b      	str	r3, [r7, #20]
      break;
 8004002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	3301      	adds	r3, #1
 8004010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	fb03 f202 	mul.w	r2, r3, r2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	fbb2 f3f3 	udiv	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <HAL_RCC_GetSysClockFreq+0x108>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	0e5b      	lsrs	r3, r3, #25
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	3301      	adds	r3, #1
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004044:	69bb      	ldr	r3, [r7, #24]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3724      	adds	r7, #36	; 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	0800cf8c 	.word	0x0800cf8c
 800405c:	00f42400 	.word	0x00f42400
 8004060:	007a1200 	.word	0x007a1200

08004064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_GetHCLKFreq+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
}
 800406c:	4618      	mov	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000010 	.word	0x20000010

0800407c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004080:	f7ff fff0 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 8004084:	4602      	mov	r2, r0
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	0a1b      	lsrs	r3, r3, #8
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	4904      	ldr	r1, [pc, #16]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	0800cf84 	.word	0x0800cf84

080040a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040ac:	f7ff ffda 	bl	8004064 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0adb      	lsrs	r3, r3, #11
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800cf84 	.word	0x0800cf84

080040d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040e0:	4b2a      	ldr	r3, [pc, #168]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040ec:	f7ff f9ee 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 80040f0:	6178      	str	r0, [r7, #20]
 80040f2:	e014      	b.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040f4:	4b25      	ldr	r3, [pc, #148]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f8:	4a24      	ldr	r2, [pc, #144]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004100:	4b22      	ldr	r3, [pc, #136]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800410c:	f7ff f9de 	bl	80034cc <HAL_PWREx_GetVoltageRange>
 8004110:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004112:	4b1e      	ldr	r3, [pc, #120]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004116:	4a1d      	ldr	r2, [pc, #116]	; (800418c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800411c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004124:	d10b      	bne.n	800413e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b80      	cmp	r3, #128	; 0x80
 800412a:	d919      	bls.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2ba0      	cmp	r3, #160	; 0xa0
 8004130:	d902      	bls.n	8004138 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004132:	2302      	movs	r3, #2
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	e013      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004138:	2301      	movs	r3, #1
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	e010      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b80      	cmp	r3, #128	; 0x80
 8004142:	d902      	bls.n	800414a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004144:	2303      	movs	r3, #3
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	e00a      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b80      	cmp	r3, #128	; 0x80
 800414e:	d102      	bne.n	8004156 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004150:	2302      	movs	r3, #2
 8004152:	613b      	str	r3, [r7, #16]
 8004154:	e004      	b.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b70      	cmp	r3, #112	; 0x70
 800415a:	d101      	bne.n	8004160 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800415c:	2301      	movs	r3, #1
 800415e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 0207 	bic.w	r2, r3, #7
 8004168:	4909      	ldr	r1, [pc, #36]	; (8004190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004170:	4b07      	ldr	r3, [pc, #28]	; (8004190 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	429a      	cmp	r2, r3
 800417c:	d001      	beq.n	8004182 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	40022000 	.word	0x40022000

08004194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800419c:	2300      	movs	r3, #0
 800419e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041a0:	2300      	movs	r3, #0
 80041a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d041      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041b8:	d02a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80041ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80041be:	d824      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80041c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041ca:	d81e      	bhi.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d010      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041d6:	e018      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041d8:	4b86      	ldr	r3, [pc, #536]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a85      	ldr	r2, [pc, #532]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e4:	e015      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2100      	movs	r1, #0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fabb 	bl	8004768 <RCCEx_PLLSAI1_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041f6:	e00c      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3320      	adds	r3, #32
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fba6 	bl	8004950 <RCCEx_PLLSAI2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	74fb      	strb	r3, [r7, #19]
      break;
 800420e:	e000      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004218:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004226:	4973      	ldr	r1, [pc, #460]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800422e:	e001      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d041      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004244:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004248:	d02a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800424a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800424e:	d824      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004256:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800425a:	d81e      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004264:	d010      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004266:	e018      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004268:	4b62      	ldr	r3, [pc, #392]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4a61      	ldr	r2, [pc, #388]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004272:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004274:	e015      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fa73 	bl	8004768 <RCCEx_PLLSAI1_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004286:	e00c      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3320      	adds	r3, #32
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fb5e 	bl	8004950 <RCCEx_PLLSAI2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004298:	e003      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	74fb      	strb	r3, [r7, #19]
      break;
 800429e:	e000      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80042a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a2:	7cfb      	ldrb	r3, [r7, #19]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042a8:	4b52      	ldr	r3, [pc, #328]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b6:	494f      	ldr	r1, [pc, #316]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042be:	e001      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a0 	beq.w	8004412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	4a40      	ldr	r2, [pc, #256]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6593      	str	r3, [r2, #88]	; 0x58
 80042f8:	4b3e      	ldr	r3, [pc, #248]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004304:	2301      	movs	r3, #1
 8004306:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004308:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3a      	ldr	r2, [pc, #232]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800430e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004312:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004314:	f7fe fdac 	bl	8002e70 <HAL_GetTick>
 8004318:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800431a:	e009      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431c:	f7fe fda8 	bl	8002e70 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	74fb      	strb	r3, [r7, #19]
        break;
 800432e:	e005      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004330:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0ef      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d15c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004342:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01f      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	429a      	cmp	r2, r3
 800435e:	d019      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004360:	4b24      	ldr	r3, [pc, #144]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800436a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800436c:	4b21      	ldr	r3, [pc, #132]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800438c:	4a19      	ldr	r2, [pc, #100]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d016      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439e:	f7fe fd67 	bl	8002e70 <HAL_GetTick>
 80043a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a4:	e00b      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a6:	f7fe fd63 	bl	8002e70 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d902      	bls.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	74fb      	strb	r3, [r7, #19]
            break;
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0ec      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10c      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043ea:	e009      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043ec:	7cfb      	ldrb	r3, [r7, #19]
 80043ee:	74bb      	strb	r3, [r7, #18]
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	7cfb      	ldrb	r3, [r7, #19]
 80043fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004400:	7c7b      	ldrb	r3, [r7, #17]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d105      	bne.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004406:	4b9e      	ldr	r3, [pc, #632]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440a:	4a9d      	ldr	r2, [pc, #628]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004410:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800441e:	4b98      	ldr	r3, [pc, #608]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004424:	f023 0203 	bic.w	r2, r3, #3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	4994      	ldr	r1, [pc, #592]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004440:	4b8f      	ldr	r3, [pc, #572]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004446:	f023 020c 	bic.w	r2, r3, #12
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444e:	498c      	ldr	r1, [pc, #560]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004462:	4b87      	ldr	r3, [pc, #540]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004468:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	4983      	ldr	r1, [pc, #524]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004472:	4313      	orrs	r3, r2
 8004474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004484:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	497b      	ldr	r1, [pc, #492]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004494:	4313      	orrs	r3, r2
 8004496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00a      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044a6:	4b76      	ldr	r3, [pc, #472]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b4:	4972      	ldr	r1, [pc, #456]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044c8:	4b6d      	ldr	r3, [pc, #436]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	496a      	ldr	r1, [pc, #424]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ea:	4b65      	ldr	r3, [pc, #404]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	4961      	ldr	r1, [pc, #388]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800450c:	4b5c      	ldr	r3, [pc, #368]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451a:	4959      	ldr	r1, [pc, #356]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800452e:	4b54      	ldr	r3, [pc, #336]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004534:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453c:	4950      	ldr	r1, [pc, #320]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004550:	4b4b      	ldr	r3, [pc, #300]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004556:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	4948      	ldr	r1, [pc, #288]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004572:	4b43      	ldr	r3, [pc, #268]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004578:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004580:	493f      	ldr	r1, [pc, #252]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d028      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004594:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a2:	4937      	ldr	r1, [pc, #220]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045b2:	d106      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b4:	4b32      	ldr	r3, [pc, #200]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a31      	ldr	r2, [pc, #196]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045be:	60d3      	str	r3, [r2, #12]
 80045c0:	e011      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ca:	d10c      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	2101      	movs	r1, #1
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f8c8 	bl	8004768 <RCCEx_PLLSAI1_Config>
 80045d8:	4603      	mov	r3, r0
 80045da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045f2:	4b23      	ldr	r3, [pc, #140]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	491f      	ldr	r1, [pc, #124]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004610:	d106      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800461c:	60d3      	str	r3, [r2, #12]
 800461e:	e011      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2101      	movs	r1, #1
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f899 	bl	8004768 <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02b      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465e:	4908      	ldr	r1, [pc, #32]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800466e:	d109      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4a02      	ldr	r2, [pc, #8]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800467a:	60d3      	str	r3, [r2, #12]
 800467c:	e014      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f867 	bl	8004768 <RCCEx_PLLSAI1_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d02f      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046b4:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c2:	4928      	ldr	r1, [pc, #160]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d2:	d10d      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f844 	bl	8004768 <RCCEx_PLLSAI1_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d014      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	74bb      	strb	r3, [r7, #18]
 80046ee:	e011      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f8:	d10c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3320      	adds	r3, #32
 80046fe:	2102      	movs	r1, #2
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f925 	bl	8004950 <RCCEx_PLLSAI2_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472e:	490d      	ldr	r1, [pc, #52]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004752:	4904      	ldr	r1, [pc, #16]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800475a:	7cbb      	ldrb	r3, [r7, #18]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	40021000 	.word	0x40021000

08004768 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004776:	4b75      	ldr	r3, [pc, #468]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d018      	beq.n	80047b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004782:	4b72      	ldr	r3, [pc, #456]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f003 0203 	and.w	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d10d      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
       ||
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800479a:	4b6c      	ldr	r3, [pc, #432]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
       ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d047      	beq.n	800483e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
 80047b2:	e044      	b.n	800483e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d018      	beq.n	80047ee <RCCEx_PLLSAI1_Config+0x86>
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d825      	bhi.n	800480c <RCCEx_PLLSAI1_Config+0xa4>
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d002      	beq.n	80047ca <RCCEx_PLLSAI1_Config+0x62>
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d009      	beq.n	80047dc <RCCEx_PLLSAI1_Config+0x74>
 80047c8:	e020      	b.n	800480c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ca:	4b60      	ldr	r3, [pc, #384]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11d      	bne.n	8004812 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047da:	e01a      	b.n	8004812 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047dc:	4b5b      	ldr	r3, [pc, #364]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d116      	bne.n	8004816 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ec:	e013      	b.n	8004816 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ee:	4b57      	ldr	r3, [pc, #348]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10f      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047fa:	4b54      	ldr	r3, [pc, #336]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800480a:	e006      	b.n	800481a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e004      	b.n	800481c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004812:	bf00      	nop
 8004814:	e002      	b.n	800481c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004816:	bf00      	nop
 8004818:	e000      	b.n	800481c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800481a:	bf00      	nop
    }

    if(status == HAL_OK)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10d      	bne.n	800483e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004822:	4b4a      	ldr	r3, [pc, #296]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6819      	ldr	r1, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	3b01      	subs	r3, #1
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	430b      	orrs	r3, r1
 8004838:	4944      	ldr	r1, [pc, #272]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d17d      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004844:	4b41      	ldr	r3, [pc, #260]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a40      	ldr	r2, [pc, #256]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800484a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800484e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004850:	f7fe fb0e 	bl	8002e70 <HAL_GetTick>
 8004854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004856:	e009      	b.n	800486c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004858:	f7fe fb0a 	bl	8002e70 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d902      	bls.n	800486c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	73fb      	strb	r3, [r7, #15]
        break;
 800486a:	e005      	b.n	8004878 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800486c:	4b37      	ldr	r3, [pc, #220]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ef      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d160      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d111      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004884:	4b31      	ldr	r3, [pc, #196]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800488c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6892      	ldr	r2, [r2, #8]
 8004894:	0211      	lsls	r1, r2, #8
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	0912      	lsrs	r2, r2, #4
 800489c:	0452      	lsls	r2, r2, #17
 800489e:	430a      	orrs	r2, r1
 80048a0:	492a      	ldr	r1, [pc, #168]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	610b      	str	r3, [r1, #16]
 80048a6:	e027      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d112      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ae:	4b27      	ldr	r3, [pc, #156]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6892      	ldr	r2, [r2, #8]
 80048be:	0211      	lsls	r1, r2, #8
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6912      	ldr	r2, [r2, #16]
 80048c4:	0852      	lsrs	r2, r2, #1
 80048c6:	3a01      	subs	r2, #1
 80048c8:	0552      	lsls	r2, r2, #21
 80048ca:	430a      	orrs	r2, r1
 80048cc:	491f      	ldr	r1, [pc, #124]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	610b      	str	r3, [r1, #16]
 80048d2:	e011      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d4:	4b1d      	ldr	r3, [pc, #116]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6952      	ldr	r2, [r2, #20]
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0652      	lsls	r2, r2, #25
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4916      	ldr	r1, [pc, #88]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048f8:	4b14      	ldr	r3, [pc, #80]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a13      	ldr	r2, [pc, #76]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fe fab4 	bl	8002e70 <HAL_GetTick>
 8004908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800490a:	e009      	b.n	8004920 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800490c:	f7fe fab0 	bl	8002e70 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d902      	bls.n	8004920 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	73fb      	strb	r3, [r7, #15]
          break;
 800491e:	e005      	b.n	800492c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004932:	4b06      	ldr	r3, [pc, #24]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	4904      	ldr	r1, [pc, #16]	; (800494c <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800495e:	4b6a      	ldr	r3, [pc, #424]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d018      	beq.n	800499c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800496a:	4b67      	ldr	r3, [pc, #412]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0203 	and.w	r2, r3, #3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d10d      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
       ||
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004982:	4b61      	ldr	r3, [pc, #388]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	091b      	lsrs	r3, r3, #4
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
       ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d047      	beq.n	8004a26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	73fb      	strb	r3, [r7, #15]
 800499a:	e044      	b.n	8004a26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d018      	beq.n	80049d6 <RCCEx_PLLSAI2_Config+0x86>
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d825      	bhi.n	80049f4 <RCCEx_PLLSAI2_Config+0xa4>
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d002      	beq.n	80049b2 <RCCEx_PLLSAI2_Config+0x62>
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d009      	beq.n	80049c4 <RCCEx_PLLSAI2_Config+0x74>
 80049b0:	e020      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049b2:	4b55      	ldr	r3, [pc, #340]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d11d      	bne.n	80049fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c2:	e01a      	b.n	80049fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049c4:	4b50      	ldr	r3, [pc, #320]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d116      	bne.n	80049fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d4:	e013      	b.n	80049fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049d6:	4b4c      	ldr	r3, [pc, #304]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10f      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049e2:	4b49      	ldr	r3, [pc, #292]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d109      	bne.n	8004a02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049f2:	e006      	b.n	8004a02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
      break;
 80049f8:	e004      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10d      	bne.n	8004a26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a0a:	4b3f      	ldr	r3, [pc, #252]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6819      	ldr	r1, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	4939      	ldr	r1, [pc, #228]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d167      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a2c:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a38:	f7fe fa1a 	bl	8002e70 <HAL_GetTick>
 8004a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a3e:	e009      	b.n	8004a54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a40:	f7fe fa16 	bl	8002e70 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d902      	bls.n	8004a54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	73fb      	strb	r3, [r7, #15]
        break;
 8004a52:	e005      	b.n	8004a60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a54:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1ef      	bne.n	8004a40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d14a      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d111      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a6c:	4b26      	ldr	r3, [pc, #152]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	0211      	lsls	r1, r2, #8
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	68d2      	ldr	r2, [r2, #12]
 8004a82:	0912      	lsrs	r2, r2, #4
 8004a84:	0452      	lsls	r2, r2, #17
 8004a86:	430a      	orrs	r2, r1
 8004a88:	491f      	ldr	r1, [pc, #124]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	614b      	str	r3, [r1, #20]
 8004a8e:	e011      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a90:	4b1d      	ldr	r3, [pc, #116]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6892      	ldr	r2, [r2, #8]
 8004aa0:	0211      	lsls	r1, r2, #8
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6912      	ldr	r2, [r2, #16]
 8004aa6:	0852      	lsrs	r2, r2, #1
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	0652      	lsls	r2, r2, #25
 8004aac:	430a      	orrs	r2, r1
 8004aae:	4916      	ldr	r1, [pc, #88]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a13      	ldr	r2, [pc, #76]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fe f9d6 	bl	8002e70 <HAL_GetTick>
 8004ac4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ac6:	e009      	b.n	8004adc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ac8:	f7fe f9d2 	bl	8002e70 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d902      	bls.n	8004adc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	73fb      	strb	r3, [r7, #15]
          break;
 8004ada:	e005      	b.n	8004ae8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004adc:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0ef      	beq.n	8004ac8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	4904      	ldr	r1, [pc, #16]	; (8004b08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000

08004b0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d06c      	beq.n	8004bf8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd f9f8 	bl	8001f28 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	22ca      	movs	r2, #202	; 0xca
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2253      	movs	r2, #83	; 0x53
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fdc3 	bl	80056dc <RTC_EnterInitMode>
 8004b56:	4603      	mov	r3, r0
 8004b58:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d14b      	bne.n	8004bf8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b72:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6899      	ldr	r1, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68d2      	ldr	r2, [r2, #12]
 8004b9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6919      	ldr	r1, [r3, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	041a      	lsls	r2, r3, #16
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fdc7 	bl	8005744 <RTC_ExitInitMode>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0203 	bic.w	r2, r2, #3
 8004bce:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	22ff      	movs	r2, #255	; 0xff
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c02:	b590      	push	{r4, r7, lr}
 8004c04:	b087      	sub	sp, #28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d101      	bne.n	8004c1c <HAL_RTC_SetTime+0x1a>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e08b      	b.n	8004d34 <HAL_RTC_SetTime+0x132>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	22ca      	movs	r2, #202	; 0xca
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2253      	movs	r2, #83	; 0x53
 8004c3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fd4d 	bl	80056dc <RTC_EnterInitMode>
 8004c42:	4603      	mov	r3, r0
 8004c44:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d163      	bne.n	8004d14 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d126      	bne.n	8004ca0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2200      	movs	r2, #0
 8004c64:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fda8 	bl	80057c0 <RTC_ByteToBcd2>
 8004c70:	4603      	mov	r3, r0
 8004c72:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 fda1 	bl	80057c0 <RTC_ByteToBcd2>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c82:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	789b      	ldrb	r3, [r3, #2]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fd99 	bl	80057c0 <RTC_ByteToBcd2>
 8004c8e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c90:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	78db      	ldrb	r3, [r3, #3]
 8004c98:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	e018      	b.n	8004cd2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cc0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cc6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	78db      	ldrb	r3, [r3, #3]
 8004ccc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004cdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ce0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cf0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fd1a 	bl	8005744 <RTC_ExitInitMode>
 8004d10:	4603      	mov	r3, r0
 8004d12:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	22ff      	movs	r2, #255	; 0xff
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d103      	bne.n	8004d2a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004d32:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd90      	pop	{r4, r7, pc}

08004d3c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d6a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	0d9b      	lsrs	r3, r3, #22
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d11a      	bne.n	8004dea <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fd21 	bl	8005800 <RTC_Bcd2ToByte>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 fd18 	bl	8005800 <RTC_Bcd2ToByte>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	789b      	ldrb	r3, [r3, #2]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fd0f 	bl	8005800 <RTC_Bcd2ToByte>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461a      	mov	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_RTC_SetDate+0x1a>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e075      	b.n	8004efa <HAL_RTC_SetDate+0x106>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10e      	bne.n	8004e42 <HAL_RTC_SetDate+0x4e>
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	785b      	ldrb	r3, [r3, #1]
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	785b      	ldrb	r3, [r3, #1]
 8004e34:	f023 0310 	bic.w	r3, r3, #16
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	330a      	adds	r3, #10
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d11c      	bne.n	8004e82 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	78db      	ldrb	r3, [r3, #3]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fcb7 	bl	80057c0 <RTC_ByteToBcd2>
 8004e52:	4603      	mov	r3, r0
 8004e54:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f000 fcb0 	bl	80057c0 <RTC_ByteToBcd2>
 8004e60:	4603      	mov	r3, r0
 8004e62:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e64:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	789b      	ldrb	r3, [r3, #2]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fca8 	bl	80057c0 <RTC_ByteToBcd2>
 8004e70:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004e72:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	e00e      	b.n	8004ea0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	78db      	ldrb	r3, [r3, #3]
 8004e86:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e8e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e94:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	22ca      	movs	r2, #202	; 0xca
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2253      	movs	r2, #83	; 0x53
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fc13 	bl	80056dc <RTC_EnterInitMode>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10c      	bne.n	8004eda <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ece:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 fc37 	bl	8005744 <RTC_ExitInitMode>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	22ff      	movs	r2, #255	; 0xff
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004ef8:	7cfb      	ldrb	r3, [r7, #19]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd90      	pop	{r4, r7, pc}

08004f02 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b086      	sub	sp, #24
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	0b5b      	lsrs	r3, r3, #13
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d11a      	bne.n	8004f92 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	78db      	ldrb	r3, [r3, #3]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fc4d 	bl	8005800 <RTC_Bcd2ToByte>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fc44 	bl	8005800 <RTC_Bcd2ToByte>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	789b      	ldrb	r3, [r3, #2]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fc3b 	bl	8005800 <RTC_Bcd2ToByte>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3718      	adds	r7, #24
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f9c:	b590      	push	{r4, r7, lr}
 8004f9e:	b089      	sub	sp, #36	; 0x24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RTC_SetAlarm+0x1a>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e11b      	b.n	80051ee <HAL_RTC_SetAlarm+0x252>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2202      	movs	r2, #2
 8004fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d137      	bne.n	800503c <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fbeb 	bl	80057c0 <RTC_ByteToBcd2>
 8004fea:	4603      	mov	r3, r0
 8004fec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fbe4 	bl	80057c0 <RTC_ByteToBcd2>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ffc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	789b      	ldrb	r3, [r3, #2]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fbdc 	bl	80057c0 <RTC_ByteToBcd2>
 8005008:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800500a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	78db      	ldrb	r3, [r3, #3]
 8005012:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005014:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fbce 	bl	80057c0 <RTC_ByteToBcd2>
 8005024:	4603      	mov	r3, r0
 8005026:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005028:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005030:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005036:	4313      	orrs	r3, r2
 8005038:	61fb      	str	r3, [r7, #28]
 800503a:	e023      	b.n	8005084 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2200      	movs	r2, #0
 800504e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800505c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005062:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	78db      	ldrb	r3, [r3, #3]
 8005068:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800506a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005072:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005074:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800507a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005080:	4313      	orrs	r3, r2
 8005082:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	4313      	orrs	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	22ca      	movs	r2, #202	; 0xca
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2253      	movs	r2, #83	; 0x53
 800509e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050a8:	d14a      	bne.n	8005140 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b8:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80050ca:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050da:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80050dc:	f7fd fec8 	bl	8002e70 <HAL_GetTick>
 80050e0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80050e2:	e015      	b.n	8005110 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050e4:	f7fd fec4 	bl	8002e70 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f2:	d90d      	bls.n	8005110 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	22ff      	movs	r2, #255	; 0xff
 80050fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2203      	movs	r2, #3
 8005100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e06e      	b.n	80051ee <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0e2      	beq.n	80050e4 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689a      	ldr	r2, [r3, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	e049      	b.n	80051d4 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800514e:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	b2da      	uxtb	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005160:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005170:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8005172:	f7fd fe7d 	bl	8002e70 <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005178:	e015      	b.n	80051a6 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800517a:	f7fd fe79 	bl	8002e70 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005188:	d90d      	bls.n	80051a6 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	22ff      	movs	r2, #255	; 0xff
 8005190:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2203      	movs	r2, #3
 8005196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e023      	b.n	80051ee <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0e2      	beq.n	800517a <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	22ff      	movs	r2, #255	; 0xff
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3724      	adds	r7, #36	; 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd90      	pop	{r4, r7, pc}
	...

080051f8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d101      	bne.n	8005212 <HAL_RTC_SetAlarm_IT+0x1a>
 800520e:	2302      	movs	r3, #2
 8005210:	e127      	b.n	8005462 <HAL_RTC_SetAlarm_IT+0x26a>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d137      	bne.n	8005298 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2200      	movs	r2, #0
 800523a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fabd 	bl	80057c0 <RTC_ByteToBcd2>
 8005246:	4603      	mov	r3, r0
 8005248:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fab6 	bl	80057c0 <RTC_ByteToBcd2>
 8005254:	4603      	mov	r3, r0
 8005256:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005258:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	789b      	ldrb	r3, [r3, #2]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 faae 	bl	80057c0 <RTC_ByteToBcd2>
 8005264:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005266:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	78db      	ldrb	r3, [r3, #3]
 800526e:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005270:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800527a:	4618      	mov	r0, r3
 800527c:	f000 faa0 	bl	80057c0 <RTC_ByteToBcd2>
 8005280:	4603      	mov	r3, r0
 8005282:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005284:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800528c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005292:	4313      	orrs	r3, r2
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	e023      	b.n	80052e0 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052b8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80052be:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	78db      	ldrb	r3, [r3, #3]
 80052c4:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80052c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052ce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80052d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80052d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80052dc:	4313      	orrs	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	22ca      	movs	r2, #202	; 0xca
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2253      	movs	r2, #83	; 0x53
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	d14a      	bne.n	800539c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005314:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005326:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8005328:	f7fd fda2 	bl	8002e70 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800532e:	e015      	b.n	800535c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005330:	f7fd fd9e 	bl	8002e70 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533e:	d90d      	bls.n	800535c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	22ff      	movs	r2, #255	; 0xff
 8005346:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2203      	movs	r2, #3
 800534c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e082      	b.n	8005462 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0e2      	beq.n	8005330 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005388:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005398:	609a      	str	r2, [r3, #8]
 800539a:	e049      	b.n	8005430 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053aa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80053bc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80053be:	f7fd fd57 	bl	8002e70 <HAL_GetTick>
 80053c2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80053c4:	e015      	b.n	80053f2 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053c6:	f7fd fd53 	bl	8002e70 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d4:	d90d      	bls.n	80053f2 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	22ff      	movs	r2, #255	; 0xff
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2203      	movs	r2, #3
 80053e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e037      	b.n	8005462 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d0e2      	beq.n	80053c6 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800542e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <HAL_RTC_SetAlarm_IT+0x274>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a0d      	ldr	r2, [pc, #52]	; (800546c <HAL_RTC_SetAlarm_IT+0x274>)
 8005436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800543a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <HAL_RTC_SetAlarm_IT+0x274>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a0a      	ldr	r2, [pc, #40]	; (800546c <HAL_RTC_SetAlarm_IT+0x274>)
 8005442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005446:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3724      	adds	r7, #36	; 0x24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd90      	pop	{r4, r7, pc}
 800546a:	bf00      	nop
 800546c:	40010400 	.word	0x40010400

08005470 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005484:	d143      	bne.n	800550e <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f44f 7280 	mov.w	r2, #256	; 0x100
 800548c:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80054a0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	0a1b      	lsrs	r3, r3, #8
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0d9b      	lsrs	r3, r3, #22
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	615a      	str	r2, [r3, #20]
 800550c:	e042      	b.n	8005594 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005514:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005524:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005528:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	0a1b      	lsrs	r3, r3, #8
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005552:	b2da      	uxtb	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	0d9b      	lsrs	r3, r3, #22
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	0e1b      	lsrs	r3, r3, #24
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d125      	bne.n	80055e6 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f92e 	bl	8005800 <RTC_Bcd2ToByte>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 f925 	bl	8005800 <RTC_Bcd2ToByte>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	789b      	ldrb	r3, [r3, #2]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 f91c 	bl	8005800 <RTC_Bcd2ToByte>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 f912 	bl	8005800 <RTC_Bcd2ToByte>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80055f8:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <HAL_RTC_AlarmIRQHandler+0x88>)
 80055fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80055fe:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d012      	beq.n	8005634 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800562c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f824 	bl	800567c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d012      	beq.n	8005668 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005660:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9aa 	bl	80059bc <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005670:	bf00      	nop
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	40010400 	.word	0x40010400

0800567c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056a6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80056a8:	f7fd fbe2 	bl	8002e70 <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056ae:	e009      	b.n	80056c4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056b0:	f7fd fbde 	bl	8002e70 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056be:	d901      	bls.n	80056c4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e007      	b.n	80056d4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0ee      	beq.n	80056b0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056e4:	2300      	movs	r3, #0
 80056e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d120      	bne.n	8005738 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005700:	f7fd fbb6 	bl	8002e70 <HAL_GetTick>
 8005704:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005706:	e00d      	b.n	8005724 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005708:	f7fd fbb2 	bl	8002e70 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005716:	d905      	bls.n	8005724 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2203      	movs	r2, #3
 8005720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d102      	bne.n	8005738 <RTC_EnterInitMode+0x5c>
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b03      	cmp	r3, #3
 8005736:	d1e7      	bne.n	8005708 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <RTC_ExitInitMode+0x78>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <RTC_ExitInitMode+0x78>)
 8005756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800575a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800575c:	4b17      	ldr	r3, [pc, #92]	; (80057bc <RTC_ExitInitMode+0x78>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10c      	bne.n	8005782 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f7ff ff91 	bl	8005690 <HAL_RTC_WaitForSynchro>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01e      	beq.n	80057b2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2203      	movs	r2, #3
 8005778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	73fb      	strb	r3, [r7, #15]
 8005780:	e017      	b.n	80057b2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005782:	4b0e      	ldr	r3, [pc, #56]	; (80057bc <RTC_ExitInitMode+0x78>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	4a0d      	ldr	r2, [pc, #52]	; (80057bc <RTC_ExitInitMode+0x78>)
 8005788:	f023 0320 	bic.w	r3, r3, #32
 800578c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ff7e 	bl	8005690 <HAL_RTC_WaitForSynchro>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2203      	movs	r2, #3
 800579e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <RTC_ExitInitMode+0x78>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	4a04      	ldr	r2, [pc, #16]	; (80057bc <RTC_ExitInitMode+0x78>)
 80057ac:	f043 0320 	orr.w	r3, r3, #32
 80057b0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40002800 	.word	0x40002800

080057c0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	4603      	mov	r3, r0
 80057c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80057d2:	e005      	b.n	80057e0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80057da:	7afb      	ldrb	r3, [r7, #11]
 80057dc:	3b0a      	subs	r3, #10
 80057de:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80057e0:	7afb      	ldrb	r3, [r7, #11]
 80057e2:	2b09      	cmp	r3, #9
 80057e4:	d8f6      	bhi.n	80057d4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	7afb      	ldrb	r3, [r7, #11]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b2db      	uxtb	r3, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	091b      	lsrs	r3, r3, #4
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	0092      	lsls	r2, r2, #2
 8005814:	4413      	add	r3, r2
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	f003 030f 	and.w	r3, r3, #15
 8005820:	b2da      	uxtb	r2, r3
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	4413      	add	r3, r2
 8005826:	b2db      	uxtb	r3, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800584a:	2302      	movs	r3, #2
 800584c:	e07f      	b.n	800594e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	22ca      	movs	r2, #202	; 0xca
 8005864:	625a      	str	r2, [r3, #36]	; 0x24
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2253      	movs	r2, #83	; 0x53
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800588e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d120      	bne.n	80058e0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800589e:	f7fd fae7 	bl	8002e70 <HAL_GetTick>
 80058a2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80058a4:	e015      	b.n	80058d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058a6:	f7fd fae3 	bl	8002e70 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058b4:	d90d      	bls.n	80058d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	22ff      	movs	r2, #255	; 0xff
 80058bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2203      	movs	r2, #3
 80058c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e03d      	b.n	800594e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0e2      	beq.n	80058a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 0107 	bic.w	r1, r3, #7
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80058fc:	4b16      	ldr	r3, [pc, #88]	; (8005958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a15      	ldr	r2, [pc, #84]	; (8005958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8005902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005906:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005908:	4b13      	ldr	r3, [pc, #76]	; (8005958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	4a12      	ldr	r2, [pc, #72]	; (8005958 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800590e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005912:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005922:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005932:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	22ff      	movs	r2, #255	; 0xff
 800593a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	40010400 	.word	0x40010400

0800595c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8005966:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800596a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	b2da      	uxtb	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800598a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f80b 	bl	80059a8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40010400 	.word	0x40010400

080059a8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e095      	b.n	8005b0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d108      	bne.n	80059fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059f2:	d009      	beq.n	8005a08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	61da      	str	r2, [r3, #28]
 80059fa:	e005      	b.n	8005a08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7fc fb00 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a48:	d902      	bls.n	8005a50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e002      	b.n	8005a56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a5e:	d007      	beq.n	8005a70 <HAL_SPI_Init+0xa0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	ea42 0103 	orr.w	r1, r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	0c1b      	lsrs	r3, r3, #16
 8005acc:	f003 0204 	and.w	r2, r3, #4
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	f003 0308 	and.w	r3, r3, #8
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005aec:	ea42 0103 	orr.w	r1, r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b088      	sub	sp, #32
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	603b      	str	r3, [r7, #0]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_SPI_Transmit+0x22>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e158      	b.n	8005dea <HAL_SPI_Transmit+0x2d4>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b40:	f7fd f996 	bl	8002e70 <HAL_GetTick>
 8005b44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b46:	88fb      	ldrh	r3, [r7, #6]
 8005b48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d002      	beq.n	8005b5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
 8005b58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b5a:	e13d      	b.n	8005dd8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x52>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b6c:	e134      	b.n	8005dd8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2203      	movs	r2, #3
 8005b72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb8:	d10f      	bne.n	8005bda <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be4:	2b40      	cmp	r3, #64	; 0x40
 8005be6:	d007      	beq.n	8005bf8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c00:	d94b      	bls.n	8005c9a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_SPI_Transmit+0xfa>
 8005c0a:	8afb      	ldrh	r3, [r7, #22]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d13e      	bne.n	8005c8e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	881a      	ldrh	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	1c9a      	adds	r2, r3, #2
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c34:	e02b      	b.n	8005c8e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d112      	bne.n	8005c6a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	881a      	ldrh	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	3b01      	subs	r3, #1
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c68:	e011      	b.n	8005c8e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c6a:	f7fd f901 	bl	8002e70 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d803      	bhi.n	8005c82 <HAL_SPI_Transmit+0x16c>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d102      	bne.n	8005c88 <HAL_SPI_Transmit+0x172>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c8c:	e0a4      	b.n	8005dd8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ce      	bne.n	8005c36 <HAL_SPI_Transmit+0x120>
 8005c98:	e07c      	b.n	8005d94 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_Transmit+0x192>
 8005ca2:	8afb      	ldrh	r3, [r7, #22]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d170      	bne.n	8005d8a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d912      	bls.n	8005cd8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	881a      	ldrh	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	1c9a      	adds	r2, r3, #2
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b02      	subs	r3, #2
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cd6:	e058      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	7812      	ldrb	r2, [r2, #0]
 8005ce4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005cfe:	e044      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d12b      	bne.n	8005d66 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d912      	bls.n	8005d3e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	881a      	ldrh	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	1c9a      	adds	r2, r3, #2
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b02      	subs	r3, #2
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d3c:	e025      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	7812      	ldrb	r2, [r2, #0]
 8005d4a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d64:	e011      	b.n	8005d8a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d66:	f7fd f883 	bl	8002e70 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d803      	bhi.n	8005d7e <HAL_SPI_Transmit+0x268>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d102      	bne.n	8005d84 <HAL_SPI_Transmit+0x26e>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d88:	e026      	b.n	8005dd8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1b5      	bne.n	8005d00 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f949 	bl	8006030 <SPI_EndRxTxTransaction>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	77fb      	strb	r3, [r7, #31]
 8005dd4:	e000      	b.n	8005dd8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005dd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005de8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e04:	f7fd f834 	bl	8002e70 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	4413      	add	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e14:	f7fd f82c 	bl	8002e70 <HAL_GetTick>
 8005e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e1a:	4b39      	ldr	r3, [pc, #228]	; (8005f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	015b      	lsls	r3, r3, #5
 8005e20:	0d1b      	lsrs	r3, r3, #20
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e2a:	e054      	b.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d050      	beq.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e34:	f7fd f81c 	bl	8002e70 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d902      	bls.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13d      	bne.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e62:	d111      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e6c:	d004      	beq.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e76:	d107      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e90:	d10f      	bne.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e017      	b.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d19b      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000010 	.word	0x20000010

08005f04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f16:	f7fc ffab 	bl	8002e70 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1e:	1a9b      	subs	r3, r3, r2
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	4413      	add	r3, r2
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f26:	f7fc ffa3 	bl	8002e70 <HAL_GetTick>
 8005f2a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f34:	4b3d      	ldr	r3, [pc, #244]	; (800602c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00da      	lsls	r2, r3, #3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	0d1b      	lsrs	r3, r3, #20
 8005f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f46:	fb02 f303 	mul.w	r3, r2, r3
 8005f4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f4c:	e060      	b.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f54:	d107      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f6c:	d050      	beq.n	8006010 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f6e:	f7fc ff7f 	bl	8002e70 <HAL_GetTick>
 8005f72:	4602      	mov	r2, r0
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d902      	bls.n	8005f84 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d13d      	bne.n	8006000 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f92:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f9c:	d111      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa6:	d004      	beq.n	8005fb2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fb0:	d107      	bne.n	8005fc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fca:	d10f      	bne.n	8005fec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e010      	b.n	8006022 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	3b01      	subs	r3, #1
 800600e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	429a      	cmp	r2, r3
 800601e:	d196      	bne.n	8005f4e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3728      	adds	r7, #40	; 0x28
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000010 	.word	0x20000010

08006030 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2200      	movs	r2, #0
 8006044:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f7ff ff5b 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e027      	b.n	80060b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2200      	movs	r2, #0
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff fec0 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607e:	f043 0220 	orr.w	r2, r3, #32
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e014      	b.n	80060b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2200      	movs	r2, #0
 8006092:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff ff34 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e000      	b.n	80060b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e049      	b.n	8006162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fc24 	bl	8002930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3304      	adds	r3, #4
 80060f8:	4619      	mov	r1, r3
 80060fa:	4610      	mov	r0, r2
 80060fc:	f000 fd88 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	d001      	beq.n	8006184 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e047      	b.n	8006214 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a23      	ldr	r2, [pc, #140]	; (8006220 <HAL_TIM_Base_Start+0xb4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d01d      	beq.n	80061d2 <HAL_TIM_Base_Start+0x66>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619e:	d018      	beq.n	80061d2 <HAL_TIM_Base_Start+0x66>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <HAL_TIM_Base_Start+0xb8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d013      	beq.n	80061d2 <HAL_TIM_Base_Start+0x66>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a1e      	ldr	r2, [pc, #120]	; (8006228 <HAL_TIM_Base_Start+0xbc>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00e      	beq.n	80061d2 <HAL_TIM_Base_Start+0x66>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a1c      	ldr	r2, [pc, #112]	; (800622c <HAL_TIM_Base_Start+0xc0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d009      	beq.n	80061d2 <HAL_TIM_Base_Start+0x66>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a1b      	ldr	r2, [pc, #108]	; (8006230 <HAL_TIM_Base_Start+0xc4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <HAL_TIM_Base_Start+0x66>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a19      	ldr	r2, [pc, #100]	; (8006234 <HAL_TIM_Base_Start+0xc8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d115      	bne.n	80061fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	4b17      	ldr	r3, [pc, #92]	; (8006238 <HAL_TIM_Base_Start+0xcc>)
 80061da:	4013      	ands	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2b06      	cmp	r3, #6
 80061e2:	d015      	beq.n	8006210 <HAL_TIM_Base_Start+0xa4>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ea:	d011      	beq.n	8006210 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fc:	e008      	b.n	8006210 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 0201 	orr.w	r2, r2, #1
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	e000      	b.n	8006212 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006210:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	00010007 	.word	0x00010007

0800623c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e049      	b.n	80062e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d106      	bne.n	8006268 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f841 	bl	80062ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3304      	adds	r3, #4
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f000 fcc8 	bl	8006c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_TIM_IC_Start_IT+0x1e>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800631a:	b2db      	uxtb	r3, r3
 800631c:	e023      	b.n	8006366 <HAL_TIM_IC_Start_IT+0x66>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b04      	cmp	r3, #4
 8006322:	d104      	bne.n	800632e <HAL_TIM_IC_Start_IT+0x2e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800632a:	b2db      	uxtb	r3, r3
 800632c:	e01b      	b.n	8006366 <HAL_TIM_IC_Start_IT+0x66>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b08      	cmp	r3, #8
 8006332:	d104      	bne.n	800633e <HAL_TIM_IC_Start_IT+0x3e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800633a:	b2db      	uxtb	r3, r3
 800633c:	e013      	b.n	8006366 <HAL_TIM_IC_Start_IT+0x66>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b0c      	cmp	r3, #12
 8006342:	d104      	bne.n	800634e <HAL_TIM_IC_Start_IT+0x4e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e00b      	b.n	8006366 <HAL_TIM_IC_Start_IT+0x66>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b10      	cmp	r3, #16
 8006352:	d104      	bne.n	800635e <HAL_TIM_IC_Start_IT+0x5e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800635a:	b2db      	uxtb	r3, r3
 800635c:	e003      	b.n	8006366 <HAL_TIM_IC_Start_IT+0x66>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006364:	b2db      	uxtb	r3, r3
 8006366:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d104      	bne.n	8006378 <HAL_TIM_IC_Start_IT+0x78>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e013      	b.n	80063a0 <HAL_TIM_IC_Start_IT+0xa0>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	2b04      	cmp	r3, #4
 800637c:	d104      	bne.n	8006388 <HAL_TIM_IC_Start_IT+0x88>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e00b      	b.n	80063a0 <HAL_TIM_IC_Start_IT+0xa0>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b08      	cmp	r3, #8
 800638c:	d104      	bne.n	8006398 <HAL_TIM_IC_Start_IT+0x98>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e003      	b.n	80063a0 <HAL_TIM_IC_Start_IT+0xa0>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d102      	bne.n	80063ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80063a8:	7b7b      	ldrb	r3, [r7, #13]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d001      	beq.n	80063b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e0dd      	b.n	800656e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_IC_Start_IT+0xc2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063c0:	e023      	b.n	800640a <HAL_TIM_IC_Start_IT+0x10a>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_IC_Start_IT+0xd2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063d0:	e01b      	b.n	800640a <HAL_TIM_IC_Start_IT+0x10a>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_IC_Start_IT+0xe2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e0:	e013      	b.n	800640a <HAL_TIM_IC_Start_IT+0x10a>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b0c      	cmp	r3, #12
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_IC_Start_IT+0xf2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063f0:	e00b      	b.n	800640a <HAL_TIM_IC_Start_IT+0x10a>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_IC_Start_IT+0x102>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006400:	e003      	b.n	800640a <HAL_TIM_IC_Start_IT+0x10a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <HAL_TIM_IC_Start_IT+0x11a>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006418:	e013      	b.n	8006442 <HAL_TIM_IC_Start_IT+0x142>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d104      	bne.n	800642a <HAL_TIM_IC_Start_IT+0x12a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006428:	e00b      	b.n	8006442 <HAL_TIM_IC_Start_IT+0x142>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b08      	cmp	r3, #8
 800642e:	d104      	bne.n	800643a <HAL_TIM_IC_Start_IT+0x13a>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006438:	e003      	b.n	8006442 <HAL_TIM_IC_Start_IT+0x142>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2202      	movs	r2, #2
 800643e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b0c      	cmp	r3, #12
 8006446:	d841      	bhi.n	80064cc <HAL_TIM_IC_Start_IT+0x1cc>
 8006448:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <HAL_TIM_IC_Start_IT+0x150>)
 800644a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800644e:	bf00      	nop
 8006450:	08006485 	.word	0x08006485
 8006454:	080064cd 	.word	0x080064cd
 8006458:	080064cd 	.word	0x080064cd
 800645c:	080064cd 	.word	0x080064cd
 8006460:	08006497 	.word	0x08006497
 8006464:	080064cd 	.word	0x080064cd
 8006468:	080064cd 	.word	0x080064cd
 800646c:	080064cd 	.word	0x080064cd
 8006470:	080064a9 	.word	0x080064a9
 8006474:	080064cd 	.word	0x080064cd
 8006478:	080064cd 	.word	0x080064cd
 800647c:	080064cd 	.word	0x080064cd
 8006480:	080064bb 	.word	0x080064bb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68da      	ldr	r2, [r3, #12]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0202 	orr.w	r2, r2, #2
 8006492:	60da      	str	r2, [r3, #12]
      break;
 8006494:	e01d      	b.n	80064d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0204 	orr.w	r2, r2, #4
 80064a4:	60da      	str	r2, [r3, #12]
      break;
 80064a6:	e014      	b.n	80064d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0208 	orr.w	r2, r2, #8
 80064b6:	60da      	str	r2, [r3, #12]
      break;
 80064b8:	e00b      	b.n	80064d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f042 0210 	orr.w	r2, r2, #16
 80064c8:	60da      	str	r2, [r3, #12]
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d149      	bne.n	800656c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2201      	movs	r2, #1
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fe81 	bl	80071e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a23      	ldr	r2, [pc, #140]	; (8006578 <HAL_TIM_IC_Start_IT+0x278>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d01d      	beq.n	800652c <HAL_TIM_IC_Start_IT+0x22c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f8:	d018      	beq.n	800652c <HAL_TIM_IC_Start_IT+0x22c>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1f      	ldr	r2, [pc, #124]	; (800657c <HAL_TIM_IC_Start_IT+0x27c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d013      	beq.n	800652c <HAL_TIM_IC_Start_IT+0x22c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <HAL_TIM_IC_Start_IT+0x280>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00e      	beq.n	800652c <HAL_TIM_IC_Start_IT+0x22c>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1c      	ldr	r2, [pc, #112]	; (8006584 <HAL_TIM_IC_Start_IT+0x284>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d009      	beq.n	800652c <HAL_TIM_IC_Start_IT+0x22c>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a1a      	ldr	r2, [pc, #104]	; (8006588 <HAL_TIM_IC_Start_IT+0x288>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <HAL_TIM_IC_Start_IT+0x22c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a19      	ldr	r2, [pc, #100]	; (800658c <HAL_TIM_IC_Start_IT+0x28c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d115      	bne.n	8006558 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	4b17      	ldr	r3, [pc, #92]	; (8006590 <HAL_TIM_IC_Start_IT+0x290>)
 8006534:	4013      	ands	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b06      	cmp	r3, #6
 800653c:	d015      	beq.n	800656a <HAL_TIM_IC_Start_IT+0x26a>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006544:	d011      	beq.n	800656a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006556:	e008      	b.n	800656a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f042 0201 	orr.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	e000      	b.n	800656c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	40013400 	.word	0x40013400
 800658c:	40014000 	.word	0x40014000
 8006590:	00010007 	.word	0x00010007

08006594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d122      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0302 	and.w	r3, r3, #2
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d11b      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0202 	mvn.w	r2, #2
 80065c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7fb faca 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
 80065dc:	e005      	b.n	80065ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 faec 	bl	8006bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 faf3 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d122      	bne.n	8006644 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b04      	cmp	r3, #4
 800660a:	d11b      	bne.n	8006644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f06f 0204 	mvn.w	r2, #4
 8006614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fb faa0 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
 8006630:	e005      	b.n	800663e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fac2 	bl	8006bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fac9 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b08      	cmp	r3, #8
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b08      	cmp	r3, #8
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0208 	mvn.w	r2, #8
 8006668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2204      	movs	r2, #4
 800666e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb fa76 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fa98 	bl	8006bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fa9f 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0310 	and.w	r3, r3, #16
 80066a2:	2b10      	cmp	r3, #16
 80066a4:	d122      	bne.n	80066ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b10      	cmp	r3, #16
 80066b2:	d11b      	bne.n	80066ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0210 	mvn.w	r2, #16
 80066bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2208      	movs	r2, #8
 80066c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fb fa4c 	bl	8001b70 <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa6e 	bl	8006bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fa75 	bl	8006bd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d10e      	bne.n	8006718 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d107      	bne.n	8006718 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0201 	mvn.w	r2, #1
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa48 	bl	8006ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d10e      	bne.n	8006744 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006730:	2b80      	cmp	r3, #128	; 0x80
 8006732:	d107      	bne.n	8006744 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800673c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fe0a 	bl	8007358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006752:	d10e      	bne.n	8006772 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	d107      	bne.n	8006772 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800676a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fdfd 	bl	800736c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b40      	cmp	r3, #64	; 0x40
 800677e:	d10e      	bne.n	800679e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d107      	bne.n	800679e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fa23 	bl	8006be4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f003 0320 	and.w	r3, r3, #32
 80067a8:	2b20      	cmp	r3, #32
 80067aa:	d10e      	bne.n	80067ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d107      	bne.n	80067ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f06f 0220 	mvn.w	r2, #32
 80067c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fdbd 	bl	8007344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b086      	sub	sp, #24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80067ec:	2302      	movs	r3, #2
 80067ee:	e088      	b.n	8006902 <HAL_TIM_IC_ConfigChannel+0x130>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d11b      	bne.n	8006836 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6819      	ldr	r1, [r3, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f000 fb2d 	bl	8006e6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699a      	ldr	r2, [r3, #24]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 020c 	bic.w	r2, r2, #12
 8006820:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6999      	ldr	r1, [r3, #24]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	619a      	str	r2, [r3, #24]
 8006834:	e060      	b.n	80068f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b04      	cmp	r3, #4
 800683a:	d11c      	bne.n	8006876 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6818      	ldr	r0, [r3, #0]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	6819      	ldr	r1, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f000 fbab 	bl	8006fa6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800685e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6999      	ldr	r1, [r3, #24]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	021a      	lsls	r2, r3, #8
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	619a      	str	r2, [r3, #24]
 8006874:	e040      	b.n	80068f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b08      	cmp	r3, #8
 800687a:	d11b      	bne.n	80068b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6818      	ldr	r0, [r3, #0]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6819      	ldr	r1, [r3, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f000 fbf8 	bl	8007080 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	69da      	ldr	r2, [r3, #28]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 020c 	bic.w	r2, r2, #12
 800689e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69d9      	ldr	r1, [r3, #28]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	61da      	str	r2, [r3, #28]
 80068b2:	e021      	b.n	80068f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b0c      	cmp	r3, #12
 80068b8:	d11c      	bne.n	80068f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6819      	ldr	r1, [r3, #0]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f000 fc15 	bl	80070f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69d9      	ldr	r1, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	021a      	lsls	r2, r3, #8
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	61da      	str	r2, [r3, #28]
 80068f2:	e001      	b.n	80068f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006900:	7dfb      	ldrb	r3, [r7, #23]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d101      	bne.n	8006926 <HAL_TIM_ConfigClockSource+0x1c>
 8006922:	2302      	movs	r3, #2
 8006924:	e0b6      	b.n	8006a94 <HAL_TIM_ConfigClockSource+0x18a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006944:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006948:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006950:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006962:	d03e      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0xd8>
 8006964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006968:	f200 8087 	bhi.w	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800696c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006970:	f000 8086 	beq.w	8006a80 <HAL_TIM_ConfigClockSource+0x176>
 8006974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006978:	d87f      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800697a:	2b70      	cmp	r3, #112	; 0x70
 800697c:	d01a      	beq.n	80069b4 <HAL_TIM_ConfigClockSource+0xaa>
 800697e:	2b70      	cmp	r3, #112	; 0x70
 8006980:	d87b      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 8006982:	2b60      	cmp	r3, #96	; 0x60
 8006984:	d050      	beq.n	8006a28 <HAL_TIM_ConfigClockSource+0x11e>
 8006986:	2b60      	cmp	r3, #96	; 0x60
 8006988:	d877      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800698a:	2b50      	cmp	r3, #80	; 0x50
 800698c:	d03c      	beq.n	8006a08 <HAL_TIM_ConfigClockSource+0xfe>
 800698e:	2b50      	cmp	r3, #80	; 0x50
 8006990:	d873      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 8006992:	2b40      	cmp	r3, #64	; 0x40
 8006994:	d058      	beq.n	8006a48 <HAL_TIM_ConfigClockSource+0x13e>
 8006996:	2b40      	cmp	r3, #64	; 0x40
 8006998:	d86f      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 800699a:	2b30      	cmp	r3, #48	; 0x30
 800699c:	d064      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	d86b      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d060      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d867      	bhi.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d05c      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d05a      	beq.n	8006a68 <HAL_TIM_ConfigClockSource+0x15e>
 80069b2:	e062      	b.n	8006a7a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	6899      	ldr	r1, [r3, #8]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f000 fbf0 	bl	80071a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069d6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	609a      	str	r2, [r3, #8]
      break;
 80069e0:	e04f      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6899      	ldr	r1, [r3, #8]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f000 fbd9 	bl	80071a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a04:	609a      	str	r2, [r3, #8]
      break;
 8006a06:	e03c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6859      	ldr	r1, [r3, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	461a      	mov	r2, r3
 8006a16:	f000 fa97 	bl	8006f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2150      	movs	r1, #80	; 0x50
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fba6 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 8006a26:	e02c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	6859      	ldr	r1, [r3, #4]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	461a      	mov	r2, r3
 8006a36:	f000 faf3 	bl	8007020 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2160      	movs	r1, #96	; 0x60
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fb96 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 8006a46:	e01c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	6859      	ldr	r1, [r3, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	461a      	mov	r2, r3
 8006a56:	f000 fa77 	bl	8006f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2140      	movs	r1, #64	; 0x40
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fb86 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 8006a66:	e00c      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4619      	mov	r1, r3
 8006a72:	4610      	mov	r0, r2
 8006a74:	f000 fb7d 	bl	8007172 <TIM_ITRx_SetConfig>
      break;
 8006a78:	e003      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7e:	e000      	b.n	8006a82 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e031      	b.n	8006b18 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f93c 	bl	8006d44 <TIM_SlaveTimer_SetConfig>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d009      	beq.n	8006ae6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e018      	b.n	8006b18 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006af4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b04:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b0c      	cmp	r3, #12
 8006b32:	d831      	bhi.n	8006b98 <HAL_TIM_ReadCapturedValue+0x78>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b71 	.word	0x08006b71
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006b99 	.word	0x08006b99
 8006b48:	08006b99 	.word	0x08006b99
 8006b4c:	08006b7b 	.word	0x08006b7b
 8006b50:	08006b99 	.word	0x08006b99
 8006b54:	08006b99 	.word	0x08006b99
 8006b58:	08006b99 	.word	0x08006b99
 8006b5c:	08006b85 	.word	0x08006b85
 8006b60:	08006b99 	.word	0x08006b99
 8006b64:	08006b99 	.word	0x08006b99
 8006b68:	08006b99 	.word	0x08006b99
 8006b6c:	08006b8f 	.word	0x08006b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b76:	60fb      	str	r3, [r7, #12]

      break;
 8006b78:	e00f      	b.n	8006b9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	60fb      	str	r3, [r7, #12]

      break;
 8006b82:	e00a      	b.n	8006b9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	60fb      	str	r3, [r7, #12]

      break;
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b94:	60fb      	str	r3, [r7, #12]

      break;
 8006b96:	e000      	b.n	8006b9a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006b98:	bf00      	nop
  }

  return tmpreg;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(const TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	7f1b      	ldrb	r3, [r3, #28]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a40      	ldr	r2, [pc, #256]	; (8006d24 <TIM_Base_SetConfig+0x114>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2e:	d00f      	beq.n	8006c50 <TIM_Base_SetConfig+0x40>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a3d      	ldr	r2, [pc, #244]	; (8006d28 <TIM_Base_SetConfig+0x118>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00b      	beq.n	8006c50 <TIM_Base_SetConfig+0x40>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a3c      	ldr	r2, [pc, #240]	; (8006d2c <TIM_Base_SetConfig+0x11c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d007      	beq.n	8006c50 <TIM_Base_SetConfig+0x40>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <TIM_Base_SetConfig+0x120>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_Base_SetConfig+0x40>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a3a      	ldr	r2, [pc, #232]	; (8006d34 <TIM_Base_SetConfig+0x124>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d108      	bne.n	8006c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2f      	ldr	r2, [pc, #188]	; (8006d24 <TIM_Base_SetConfig+0x114>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01f      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c70:	d01b      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a2c      	ldr	r2, [pc, #176]	; (8006d28 <TIM_Base_SetConfig+0x118>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d017      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a2b      	ldr	r2, [pc, #172]	; (8006d2c <TIM_Base_SetConfig+0x11c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d013      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a2a      	ldr	r2, [pc, #168]	; (8006d30 <TIM_Base_SetConfig+0x120>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00f      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a29      	ldr	r2, [pc, #164]	; (8006d34 <TIM_Base_SetConfig+0x124>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d00b      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <TIM_Base_SetConfig+0x128>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d007      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a27      	ldr	r2, [pc, #156]	; (8006d3c <TIM_Base_SetConfig+0x12c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d003      	beq.n	8006caa <TIM_Base_SetConfig+0x9a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <TIM_Base_SetConfig+0x130>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d108      	bne.n	8006cbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <TIM_Base_SetConfig+0x114>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d00f      	beq.n	8006d08 <TIM_Base_SetConfig+0xf8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a12      	ldr	r2, [pc, #72]	; (8006d34 <TIM_Base_SetConfig+0x124>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d00b      	beq.n	8006d08 <TIM_Base_SetConfig+0xf8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a11      	ldr	r2, [pc, #68]	; (8006d38 <TIM_Base_SetConfig+0x128>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d007      	beq.n	8006d08 <TIM_Base_SetConfig+0xf8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <TIM_Base_SetConfig+0x12c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d003      	beq.n	8006d08 <TIM_Base_SetConfig+0xf8>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a0f      	ldr	r2, [pc, #60]	; (8006d40 <TIM_Base_SetConfig+0x130>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d103      	bne.n	8006d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	615a      	str	r2, [r3, #20]
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40000400 	.word	0x40000400
 8006d2c:	40000800 	.word	0x40000800
 8006d30:	40000c00 	.word	0x40000c00
 8006d34:	40013400 	.word	0x40013400
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40014400 	.word	0x40014400
 8006d40:	40014800 	.word	0x40014800

08006d44 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d60:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b70      	cmp	r3, #112	; 0x70
 8006d90:	d01a      	beq.n	8006dc8 <TIM_SlaveTimer_SetConfig+0x84>
 8006d92:	2b70      	cmp	r3, #112	; 0x70
 8006d94:	d860      	bhi.n	8006e58 <TIM_SlaveTimer_SetConfig+0x114>
 8006d96:	2b60      	cmp	r3, #96	; 0x60
 8006d98:	d054      	beq.n	8006e44 <TIM_SlaveTimer_SetConfig+0x100>
 8006d9a:	2b60      	cmp	r3, #96	; 0x60
 8006d9c:	d85c      	bhi.n	8006e58 <TIM_SlaveTimer_SetConfig+0x114>
 8006d9e:	2b50      	cmp	r3, #80	; 0x50
 8006da0:	d046      	beq.n	8006e30 <TIM_SlaveTimer_SetConfig+0xec>
 8006da2:	2b50      	cmp	r3, #80	; 0x50
 8006da4:	d858      	bhi.n	8006e58 <TIM_SlaveTimer_SetConfig+0x114>
 8006da6:	2b40      	cmp	r3, #64	; 0x40
 8006da8:	d019      	beq.n	8006dde <TIM_SlaveTimer_SetConfig+0x9a>
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d854      	bhi.n	8006e58 <TIM_SlaveTimer_SetConfig+0x114>
 8006dae:	2b30      	cmp	r3, #48	; 0x30
 8006db0:	d055      	beq.n	8006e5e <TIM_SlaveTimer_SetConfig+0x11a>
 8006db2:	2b30      	cmp	r3, #48	; 0x30
 8006db4:	d850      	bhi.n	8006e58 <TIM_SlaveTimer_SetConfig+0x114>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d051      	beq.n	8006e5e <TIM_SlaveTimer_SetConfig+0x11a>
 8006dba:	2b20      	cmp	r3, #32
 8006dbc:	d84c      	bhi.n	8006e58 <TIM_SlaveTimer_SetConfig+0x114>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04d      	beq.n	8006e5e <TIM_SlaveTimer_SetConfig+0x11a>
 8006dc2:	2b10      	cmp	r3, #16
 8006dc4:	d04b      	beq.n	8006e5e <TIM_SlaveTimer_SetConfig+0x11a>
 8006dc6:	e047      	b.n	8006e58 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	68d9      	ldr	r1, [r3, #12]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	f000 f9e6 	bl	80071a8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006ddc:	e040      	b.n	8006e60 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b05      	cmp	r3, #5
 8006de4:	d101      	bne.n	8006dea <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e03b      	b.n	8006e62 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6a1a      	ldr	r2, [r3, #32]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e10:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	621a      	str	r2, [r3, #32]
      break;
 8006e2e:	e017      	b.n	8006e60 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	6899      	ldr	r1, [r3, #8]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f000 f883 	bl	8006f48 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006e42:	e00d      	b.n	8006e60 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6899      	ldr	r1, [r3, #8]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	461a      	mov	r2, r3
 8006e52:	f000 f8e5 	bl	8007020 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006e56:	e003      	b.n	8006e60 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5c:	e000      	b.n	8006e60 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006e5e:	bf00      	nop
  }

  return status;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3718      	adds	r7, #24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	f023 0201 	bic.w	r2, r3, #1
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	4a26      	ldr	r2, [pc, #152]	; (8006f30 <TIM_TI1_SetConfig+0xc4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d017      	beq.n	8006eca <TIM_TI1_SetConfig+0x5e>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea0:	d013      	beq.n	8006eca <TIM_TI1_SetConfig+0x5e>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4a23      	ldr	r2, [pc, #140]	; (8006f34 <TIM_TI1_SetConfig+0xc8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00f      	beq.n	8006eca <TIM_TI1_SetConfig+0x5e>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <TIM_TI1_SetConfig+0xcc>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d00b      	beq.n	8006eca <TIM_TI1_SetConfig+0x5e>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <TIM_TI1_SetConfig+0xd0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d007      	beq.n	8006eca <TIM_TI1_SetConfig+0x5e>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4a20      	ldr	r2, [pc, #128]	; (8006f40 <TIM_TI1_SetConfig+0xd4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_TI1_SetConfig+0x5e>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <TIM_TI1_SetConfig+0xd8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d101      	bne.n	8006ece <TIM_TI1_SetConfig+0x62>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <TIM_TI1_SetConfig+0x64>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d008      	beq.n	8006ee6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e003      	b.n	8006eee <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	011b      	lsls	r3, r3, #4
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f023 030a 	bic.w	r3, r3, #10
 8006f08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f003 030a 	and.w	r3, r3, #10
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	40012c00 	.word	0x40012c00
 8006f34:	40000400 	.word	0x40000400
 8006f38:	40000800 	.word	0x40000800
 8006f3c:	40000c00 	.word	0x40000c00
 8006f40:	40013400 	.word	0x40013400
 8006f44:	40014000 	.word	0x40014000

08006f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	f023 030a 	bic.w	r3, r3, #10
 8006f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	621a      	str	r2, [r3, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	f023 0210 	bic.w	r2, r3, #16
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	031b      	lsls	r3, r3, #12
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	011b      	lsls	r3, r3, #4
 8006ffe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	4313      	orrs	r3, r2
 8007006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	621a      	str	r2, [r3, #32]
}
 8007014:	bf00      	nop
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	f023 0210 	bic.w	r2, r3, #16
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800704a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	031b      	lsls	r3, r3, #12
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	4313      	orrs	r3, r2
 8007054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800705c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	621a      	str	r2, [r3, #32]
}
 8007074:	bf00      	nop
 8007076:	371c      	adds	r7, #28
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f023 0303 	bic.w	r3, r3, #3
 80070ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80070d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	021b      	lsls	r3, r3, #8
 80070d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	621a      	str	r2, [r3, #32]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b087      	sub	sp, #28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007136:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	031b      	lsls	r3, r3, #12
 800713c:	b29b      	uxth	r3, r3
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800714a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	031b      	lsls	r3, r3, #12
 8007150:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	f043 0307 	orr.w	r3, r3, #7
 8007194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	609a      	str	r2, [r3, #8]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	021a      	lsls	r2, r3, #8
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	609a      	str	r2, [r3, #8]
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2201      	movs	r2, #1
 80071fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a1a      	ldr	r2, [r3, #32]
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	43db      	mvns	r3, r3
 800720a:	401a      	ands	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1a      	ldr	r2, [r3, #32]
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f003 031f 	and.w	r3, r3, #31
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	fa01 f303 	lsl.w	r3, r1, r3
 8007220:	431a      	orrs	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	621a      	str	r2, [r3, #32]
}
 8007226:	bf00      	nop
 8007228:	371c      	adds	r7, #28
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
	...

08007234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007248:	2302      	movs	r3, #2
 800724a:	e068      	b.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a2e      	ldr	r2, [pc, #184]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a2d      	ldr	r2, [pc, #180]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d108      	bne.n	8007292 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007286:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007298:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1e      	ldr	r2, [pc, #120]	; (800732c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01d      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072be:	d018      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d013      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00e      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a18      	ldr	r2, [pc, #96]	; (800733c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d009      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a13      	ldr	r2, [pc, #76]	; (8007330 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d004      	beq.n	80072f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a14      	ldr	r2, [pc, #80]	; (8007340 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d10c      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40012c00 	.word	0x40012c00
 8007330:	40013400 	.word	0x40013400
 8007334:	40000400 	.word	0x40000400
 8007338:	40000800 	.word	0x40000800
 800733c:	40000c00 	.word	0x40000c00
 8007340:	40014000 	.word	0x40014000

08007344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e048      	b.n	8007424 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb fb42 	bl	8002a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2224      	movs	r2, #36	; 0x24
 80073ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f99a 	bl	80076f8 <UART_SetConfig>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d101      	bne.n	80073ce <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e02a      	b.n	8007424 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 fc46 	bl	8007c68 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80073fa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0208 	orr.w	r2, r2, #8
 800740a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fcc5 	bl	8007dac <UART_CheckIdleState>
 8007422:	4603      	mov	r3, r0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af02      	add	r7, sp, #8
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	603b      	str	r3, [r7, #0]
 8007438:	4613      	mov	r3, r2
 800743a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007440:	2b20      	cmp	r3, #32
 8007442:	f040 8082 	bne.w	800754a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_UART_Transmit+0x26>
 800744c:	88fb      	ldrh	r3, [r7, #6]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e07a      	b.n	800754c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_UART_Transmit+0x38>
 8007460:	2302      	movs	r3, #2
 8007462:	e073      	b.n	800754c <HAL_UART_Transmit+0x120>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2221      	movs	r2, #33	; 0x21
 8007478:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800747a:	f7fb fcf9 	bl	8002e70 <HAL_GetTick>
 800747e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007498:	d108      	bne.n	80074ac <HAL_UART_Transmit+0x80>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	61bb      	str	r3, [r7, #24]
 80074aa:	e003      	b.n	80074b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80074bc:	e02d      	b.n	800751a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2200      	movs	r2, #0
 80074c6:	2180      	movs	r1, #128	; 0x80
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fcb8 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e039      	b.n	800754c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10b      	bne.n	80074f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	881a      	ldrh	r2, [r3, #0]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074ea:	b292      	uxth	r2, r2
 80074ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	3302      	adds	r3, #2
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	e008      	b.n	8007508 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	781a      	ldrb	r2, [r3, #0]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	b292      	uxth	r2, r2
 8007500:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	3301      	adds	r3, #1
 8007506:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800750e:	b29b      	uxth	r3, r3
 8007510:	3b01      	subs	r3, #1
 8007512:	b29a      	uxth	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007520:	b29b      	uxth	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1cb      	bne.n	80074be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2200      	movs	r2, #0
 800752e:	2140      	movs	r1, #64	; 0x40
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fc84 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d001      	beq.n	8007540 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e005      	b.n	800754c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	e000      	b.n	800754c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800754a:	2302      	movs	r3, #2
  }
}
 800754c:	4618      	mov	r0, r3
 800754e:	3720      	adds	r7, #32
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08a      	sub	sp, #40	; 0x28
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007568:	2b20      	cmp	r3, #32
 800756a:	f040 80bf 	bne.w	80076ec <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_UART_Receive+0x26>
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e0b7      	b.n	80076ee <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007584:	2b01      	cmp	r3, #1
 8007586:	d101      	bne.n	800758c <HAL_UART_Receive+0x38>
 8007588:	2302      	movs	r3, #2
 800758a:	e0b0      	b.n	80076ee <HAL_UART_Receive+0x19a>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2222      	movs	r2, #34	; 0x22
 80075a0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075a8:	f7fb fc62 	bl	8002e70 <HAL_GetTick>
 80075ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075c6:	d10e      	bne.n	80075e6 <HAL_UART_Receive+0x92>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d105      	bne.n	80075dc <HAL_UART_Receive+0x88>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075da:	e02d      	b.n	8007638 <HAL_UART_Receive+0xe4>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	22ff      	movs	r2, #255	; 0xff
 80075e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075e4:	e028      	b.n	8007638 <HAL_UART_Receive+0xe4>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10d      	bne.n	800760a <HAL_UART_Receive+0xb6>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <HAL_UART_Receive+0xac>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	22ff      	movs	r2, #255	; 0xff
 80075fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075fe:	e01b      	b.n	8007638 <HAL_UART_Receive+0xe4>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	227f      	movs	r2, #127	; 0x7f
 8007604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007608:	e016      	b.n	8007638 <HAL_UART_Receive+0xe4>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007612:	d10d      	bne.n	8007630 <HAL_UART_Receive+0xdc>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <HAL_UART_Receive+0xd2>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	227f      	movs	r2, #127	; 0x7f
 8007620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007624:	e008      	b.n	8007638 <HAL_UART_Receive+0xe4>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	223f      	movs	r2, #63	; 0x3f
 800762a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800762e:	e003      	b.n	8007638 <HAL_UART_Receive+0xe4>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800763e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007648:	d108      	bne.n	800765c <HAL_UART_Receive+0x108>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d104      	bne.n	800765c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	e003      	b.n	8007664 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007660:	2300      	movs	r3, #0
 8007662:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800766c:	e033      	b.n	80076d6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2200      	movs	r2, #0
 8007676:	2120      	movs	r1, #32
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fbe0 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e032      	b.n	80076ee <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10c      	bne.n	80076a8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007694:	b29a      	uxth	r2, r3
 8007696:	8a7b      	ldrh	r3, [r7, #18]
 8007698:	4013      	ands	r3, r2
 800769a:	b29a      	uxth	r2, r3
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	3302      	adds	r3, #2
 80076a4:	61bb      	str	r3, [r7, #24]
 80076a6:	e00d      	b.n	80076c4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	8a7b      	ldrh	r3, [r7, #18]
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	4013      	ands	r3, r2
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	3301      	adds	r3, #1
 80076c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1c5      	bne.n	800766e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2220      	movs	r2, #32
 80076e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	e000      	b.n	80076ee <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80076ec:	2302      	movs	r3, #2
  }
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076fc:	b08a      	sub	sp, #40	; 0x28
 80076fe:	af00      	add	r7, sp, #0
 8007700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	431a      	orrs	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	431a      	orrs	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	4313      	orrs	r3, r2
 800771e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4ba4      	ldr	r3, [pc, #656]	; (80079b8 <UART_SetConfig+0x2c0>)
 8007728:	4013      	ands	r3, r2
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007730:	430b      	orrs	r3, r1
 8007732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a99      	ldr	r2, [pc, #612]	; (80079bc <UART_SetConfig+0x2c4>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007760:	4313      	orrs	r3, r2
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007774:	430a      	orrs	r2, r1
 8007776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a90      	ldr	r2, [pc, #576]	; (80079c0 <UART_SetConfig+0x2c8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d126      	bne.n	80077d0 <UART_SetConfig+0xd8>
 8007782:	4b90      	ldr	r3, [pc, #576]	; (80079c4 <UART_SetConfig+0x2cc>)
 8007784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007788:	f003 0303 	and.w	r3, r3, #3
 800778c:	2b03      	cmp	r3, #3
 800778e:	d81b      	bhi.n	80077c8 <UART_SetConfig+0xd0>
 8007790:	a201      	add	r2, pc, #4	; (adr r2, 8007798 <UART_SetConfig+0xa0>)
 8007792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007796:	bf00      	nop
 8007798:	080077a9 	.word	0x080077a9
 800779c:	080077b9 	.word	0x080077b9
 80077a0:	080077b1 	.word	0x080077b1
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ae:	e116      	b.n	80079de <UART_SetConfig+0x2e6>
 80077b0:	2302      	movs	r3, #2
 80077b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b6:	e112      	b.n	80079de <UART_SetConfig+0x2e6>
 80077b8:	2304      	movs	r3, #4
 80077ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077be:	e10e      	b.n	80079de <UART_SetConfig+0x2e6>
 80077c0:	2308      	movs	r3, #8
 80077c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c6:	e10a      	b.n	80079de <UART_SetConfig+0x2e6>
 80077c8:	2310      	movs	r3, #16
 80077ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ce:	e106      	b.n	80079de <UART_SetConfig+0x2e6>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a7c      	ldr	r2, [pc, #496]	; (80079c8 <UART_SetConfig+0x2d0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d138      	bne.n	800784c <UART_SetConfig+0x154>
 80077da:	4b7a      	ldr	r3, [pc, #488]	; (80079c4 <UART_SetConfig+0x2cc>)
 80077dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e0:	f003 030c 	and.w	r3, r3, #12
 80077e4:	2b0c      	cmp	r3, #12
 80077e6:	d82d      	bhi.n	8007844 <UART_SetConfig+0x14c>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <UART_SetConfig+0xf8>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007825 	.word	0x08007825
 80077f4:	08007845 	.word	0x08007845
 80077f8:	08007845 	.word	0x08007845
 80077fc:	08007845 	.word	0x08007845
 8007800:	08007835 	.word	0x08007835
 8007804:	08007845 	.word	0x08007845
 8007808:	08007845 	.word	0x08007845
 800780c:	08007845 	.word	0x08007845
 8007810:	0800782d 	.word	0x0800782d
 8007814:	08007845 	.word	0x08007845
 8007818:	08007845 	.word	0x08007845
 800781c:	08007845 	.word	0x08007845
 8007820:	0800783d 	.word	0x0800783d
 8007824:	2300      	movs	r3, #0
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782a:	e0d8      	b.n	80079de <UART_SetConfig+0x2e6>
 800782c:	2302      	movs	r3, #2
 800782e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007832:	e0d4      	b.n	80079de <UART_SetConfig+0x2e6>
 8007834:	2304      	movs	r3, #4
 8007836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800783a:	e0d0      	b.n	80079de <UART_SetConfig+0x2e6>
 800783c:	2308      	movs	r3, #8
 800783e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007842:	e0cc      	b.n	80079de <UART_SetConfig+0x2e6>
 8007844:	2310      	movs	r3, #16
 8007846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784a:	e0c8      	b.n	80079de <UART_SetConfig+0x2e6>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a5e      	ldr	r2, [pc, #376]	; (80079cc <UART_SetConfig+0x2d4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d125      	bne.n	80078a2 <UART_SetConfig+0x1aa>
 8007856:	4b5b      	ldr	r3, [pc, #364]	; (80079c4 <UART_SetConfig+0x2cc>)
 8007858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007860:	2b30      	cmp	r3, #48	; 0x30
 8007862:	d016      	beq.n	8007892 <UART_SetConfig+0x19a>
 8007864:	2b30      	cmp	r3, #48	; 0x30
 8007866:	d818      	bhi.n	800789a <UART_SetConfig+0x1a2>
 8007868:	2b20      	cmp	r3, #32
 800786a:	d00a      	beq.n	8007882 <UART_SetConfig+0x18a>
 800786c:	2b20      	cmp	r3, #32
 800786e:	d814      	bhi.n	800789a <UART_SetConfig+0x1a2>
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <UART_SetConfig+0x182>
 8007874:	2b10      	cmp	r3, #16
 8007876:	d008      	beq.n	800788a <UART_SetConfig+0x192>
 8007878:	e00f      	b.n	800789a <UART_SetConfig+0x1a2>
 800787a:	2300      	movs	r3, #0
 800787c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007880:	e0ad      	b.n	80079de <UART_SetConfig+0x2e6>
 8007882:	2302      	movs	r3, #2
 8007884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007888:	e0a9      	b.n	80079de <UART_SetConfig+0x2e6>
 800788a:	2304      	movs	r3, #4
 800788c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007890:	e0a5      	b.n	80079de <UART_SetConfig+0x2e6>
 8007892:	2308      	movs	r3, #8
 8007894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007898:	e0a1      	b.n	80079de <UART_SetConfig+0x2e6>
 800789a:	2310      	movs	r3, #16
 800789c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a0:	e09d      	b.n	80079de <UART_SetConfig+0x2e6>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a4a      	ldr	r2, [pc, #296]	; (80079d0 <UART_SetConfig+0x2d8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d125      	bne.n	80078f8 <UART_SetConfig+0x200>
 80078ac:	4b45      	ldr	r3, [pc, #276]	; (80079c4 <UART_SetConfig+0x2cc>)
 80078ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078b6:	2bc0      	cmp	r3, #192	; 0xc0
 80078b8:	d016      	beq.n	80078e8 <UART_SetConfig+0x1f0>
 80078ba:	2bc0      	cmp	r3, #192	; 0xc0
 80078bc:	d818      	bhi.n	80078f0 <UART_SetConfig+0x1f8>
 80078be:	2b80      	cmp	r3, #128	; 0x80
 80078c0:	d00a      	beq.n	80078d8 <UART_SetConfig+0x1e0>
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d814      	bhi.n	80078f0 <UART_SetConfig+0x1f8>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <UART_SetConfig+0x1d8>
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d008      	beq.n	80078e0 <UART_SetConfig+0x1e8>
 80078ce:	e00f      	b.n	80078f0 <UART_SetConfig+0x1f8>
 80078d0:	2300      	movs	r3, #0
 80078d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d6:	e082      	b.n	80079de <UART_SetConfig+0x2e6>
 80078d8:	2302      	movs	r3, #2
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078de:	e07e      	b.n	80079de <UART_SetConfig+0x2e6>
 80078e0:	2304      	movs	r3, #4
 80078e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078e6:	e07a      	b.n	80079de <UART_SetConfig+0x2e6>
 80078e8:	2308      	movs	r3, #8
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ee:	e076      	b.n	80079de <UART_SetConfig+0x2e6>
 80078f0:	2310      	movs	r3, #16
 80078f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f6:	e072      	b.n	80079de <UART_SetConfig+0x2e6>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a35      	ldr	r2, [pc, #212]	; (80079d4 <UART_SetConfig+0x2dc>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d12a      	bne.n	8007958 <UART_SetConfig+0x260>
 8007902:	4b30      	ldr	r3, [pc, #192]	; (80079c4 <UART_SetConfig+0x2cc>)
 8007904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800790c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007910:	d01a      	beq.n	8007948 <UART_SetConfig+0x250>
 8007912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007916:	d81b      	bhi.n	8007950 <UART_SetConfig+0x258>
 8007918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800791c:	d00c      	beq.n	8007938 <UART_SetConfig+0x240>
 800791e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007922:	d815      	bhi.n	8007950 <UART_SetConfig+0x258>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <UART_SetConfig+0x238>
 8007928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800792c:	d008      	beq.n	8007940 <UART_SetConfig+0x248>
 800792e:	e00f      	b.n	8007950 <UART_SetConfig+0x258>
 8007930:	2300      	movs	r3, #0
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007936:	e052      	b.n	80079de <UART_SetConfig+0x2e6>
 8007938:	2302      	movs	r3, #2
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800793e:	e04e      	b.n	80079de <UART_SetConfig+0x2e6>
 8007940:	2304      	movs	r3, #4
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007946:	e04a      	b.n	80079de <UART_SetConfig+0x2e6>
 8007948:	2308      	movs	r3, #8
 800794a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800794e:	e046      	b.n	80079de <UART_SetConfig+0x2e6>
 8007950:	2310      	movs	r3, #16
 8007952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007956:	e042      	b.n	80079de <UART_SetConfig+0x2e6>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a17      	ldr	r2, [pc, #92]	; (80079bc <UART_SetConfig+0x2c4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d13a      	bne.n	80079d8 <UART_SetConfig+0x2e0>
 8007962:	4b18      	ldr	r3, [pc, #96]	; (80079c4 <UART_SetConfig+0x2cc>)
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800796c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007970:	d01a      	beq.n	80079a8 <UART_SetConfig+0x2b0>
 8007972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007976:	d81b      	bhi.n	80079b0 <UART_SetConfig+0x2b8>
 8007978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800797c:	d00c      	beq.n	8007998 <UART_SetConfig+0x2a0>
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d815      	bhi.n	80079b0 <UART_SetConfig+0x2b8>
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <UART_SetConfig+0x298>
 8007988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798c:	d008      	beq.n	80079a0 <UART_SetConfig+0x2a8>
 800798e:	e00f      	b.n	80079b0 <UART_SetConfig+0x2b8>
 8007990:	2300      	movs	r3, #0
 8007992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007996:	e022      	b.n	80079de <UART_SetConfig+0x2e6>
 8007998:	2302      	movs	r3, #2
 800799a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800799e:	e01e      	b.n	80079de <UART_SetConfig+0x2e6>
 80079a0:	2304      	movs	r3, #4
 80079a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079a6:	e01a      	b.n	80079de <UART_SetConfig+0x2e6>
 80079a8:	2308      	movs	r3, #8
 80079aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ae:	e016      	b.n	80079de <UART_SetConfig+0x2e6>
 80079b0:	2310      	movs	r3, #16
 80079b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079b6:	e012      	b.n	80079de <UART_SetConfig+0x2e6>
 80079b8:	efff69f3 	.word	0xefff69f3
 80079bc:	40008000 	.word	0x40008000
 80079c0:	40013800 	.word	0x40013800
 80079c4:	40021000 	.word	0x40021000
 80079c8:	40004400 	.word	0x40004400
 80079cc:	40004800 	.word	0x40004800
 80079d0:	40004c00 	.word	0x40004c00
 80079d4:	40005000 	.word	0x40005000
 80079d8:	2310      	movs	r3, #16
 80079da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a9f      	ldr	r2, [pc, #636]	; (8007c60 <UART_SetConfig+0x568>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d17a      	bne.n	8007ade <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d824      	bhi.n	8007a3a <UART_SetConfig+0x342>
 80079f0:	a201      	add	r2, pc, #4	; (adr r2, 80079f8 <UART_SetConfig+0x300>)
 80079f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f6:	bf00      	nop
 80079f8:	08007a1d 	.word	0x08007a1d
 80079fc:	08007a3b 	.word	0x08007a3b
 8007a00:	08007a25 	.word	0x08007a25
 8007a04:	08007a3b 	.word	0x08007a3b
 8007a08:	08007a2b 	.word	0x08007a2b
 8007a0c:	08007a3b 	.word	0x08007a3b
 8007a10:	08007a3b 	.word	0x08007a3b
 8007a14:	08007a3b 	.word	0x08007a3b
 8007a18:	08007a33 	.word	0x08007a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a1c:	f7fc fb2e 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8007a20:	61f8      	str	r0, [r7, #28]
        break;
 8007a22:	e010      	b.n	8007a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a24:	4b8f      	ldr	r3, [pc, #572]	; (8007c64 <UART_SetConfig+0x56c>)
 8007a26:	61fb      	str	r3, [r7, #28]
        break;
 8007a28:	e00d      	b.n	8007a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a2a:	f7fc fa8f 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8007a2e:	61f8      	str	r0, [r7, #28]
        break;
 8007a30:	e009      	b.n	8007a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a36:	61fb      	str	r3, [r7, #28]
        break;
 8007a38:	e005      	b.n	8007a46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 80fb 	beq.w	8007c44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d305      	bcc.n	8007a6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d903      	bls.n	8007a72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a70:	e0e8      	b.n	8007c44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	2200      	movs	r2, #0
 8007a76:	461c      	mov	r4, r3
 8007a78:	4615      	mov	r5, r2
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	022b      	lsls	r3, r5, #8
 8007a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a88:	0222      	lsls	r2, r4, #8
 8007a8a:	68f9      	ldr	r1, [r7, #12]
 8007a8c:	6849      	ldr	r1, [r1, #4]
 8007a8e:	0849      	lsrs	r1, r1, #1
 8007a90:	2000      	movs	r0, #0
 8007a92:	4688      	mov	r8, r1
 8007a94:	4681      	mov	r9, r0
 8007a96:	eb12 0a08 	adds.w	sl, r2, r8
 8007a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	603b      	str	r3, [r7, #0]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aac:	4650      	mov	r0, sl
 8007aae:	4659      	mov	r1, fp
 8007ab0:	f7f9 f87a 	bl	8000ba8 <__aeabi_uldivmod>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4613      	mov	r3, r2
 8007aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac2:	d308      	bcc.n	8007ad6 <UART_SetConfig+0x3de>
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007aca:	d204      	bcs.n	8007ad6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	e0b6      	b.n	8007c44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007adc:	e0b2      	b.n	8007c44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ae6:	d15e      	bne.n	8007ba6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d828      	bhi.n	8007b42 <UART_SetConfig+0x44a>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <UART_SetConfig+0x400>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b1d 	.word	0x08007b1d
 8007afc:	08007b25 	.word	0x08007b25
 8007b00:	08007b2d 	.word	0x08007b2d
 8007b04:	08007b43 	.word	0x08007b43
 8007b08:	08007b33 	.word	0x08007b33
 8007b0c:	08007b43 	.word	0x08007b43
 8007b10:	08007b43 	.word	0x08007b43
 8007b14:	08007b43 	.word	0x08007b43
 8007b18:	08007b3b 	.word	0x08007b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b1c:	f7fc faae 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8007b20:	61f8      	str	r0, [r7, #28]
        break;
 8007b22:	e014      	b.n	8007b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b24:	f7fc fac0 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8007b28:	61f8      	str	r0, [r7, #28]
        break;
 8007b2a:	e010      	b.n	8007b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b2c:	4b4d      	ldr	r3, [pc, #308]	; (8007c64 <UART_SetConfig+0x56c>)
 8007b2e:	61fb      	str	r3, [r7, #28]
        break;
 8007b30:	e00d      	b.n	8007b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b32:	f7fc fa0b 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8007b36:	61f8      	str	r0, [r7, #28]
        break;
 8007b38:	e009      	b.n	8007b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3e:	61fb      	str	r3, [r7, #28]
        break;
 8007b40:	e005      	b.n	8007b4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d077      	beq.n	8007c44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	005a      	lsls	r2, r3, #1
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	085b      	lsrs	r3, r3, #1
 8007b5e:	441a      	add	r2, r3
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b0f      	cmp	r3, #15
 8007b6e:	d916      	bls.n	8007b9e <UART_SetConfig+0x4a6>
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b76:	d212      	bcs.n	8007b9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f023 030f 	bic.w	r3, r3, #15
 8007b80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	8afb      	ldrh	r3, [r7, #22]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	8afa      	ldrh	r2, [r7, #22]
 8007b9a:	60da      	str	r2, [r3, #12]
 8007b9c:	e052      	b.n	8007c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ba4:	e04e      	b.n	8007c44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d827      	bhi.n	8007bfe <UART_SetConfig+0x506>
 8007bae:	a201      	add	r2, pc, #4	; (adr r2, 8007bb4 <UART_SetConfig+0x4bc>)
 8007bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb4:	08007bd9 	.word	0x08007bd9
 8007bb8:	08007be1 	.word	0x08007be1
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	08007bff 	.word	0x08007bff
 8007bc4:	08007bef 	.word	0x08007bef
 8007bc8:	08007bff 	.word	0x08007bff
 8007bcc:	08007bff 	.word	0x08007bff
 8007bd0:	08007bff 	.word	0x08007bff
 8007bd4:	08007bf7 	.word	0x08007bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd8:	f7fc fa50 	bl	800407c <HAL_RCC_GetPCLK1Freq>
 8007bdc:	61f8      	str	r0, [r7, #28]
        break;
 8007bde:	e014      	b.n	8007c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007be0:	f7fc fa62 	bl	80040a8 <HAL_RCC_GetPCLK2Freq>
 8007be4:	61f8      	str	r0, [r7, #28]
        break;
 8007be6:	e010      	b.n	8007c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007be8:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <UART_SetConfig+0x56c>)
 8007bea:	61fb      	str	r3, [r7, #28]
        break;
 8007bec:	e00d      	b.n	8007c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bee:	f7fc f9ad 	bl	8003f4c <HAL_RCC_GetSysClockFreq>
 8007bf2:	61f8      	str	r0, [r7, #28]
        break;
 8007bf4:	e009      	b.n	8007c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bfa:	61fb      	str	r3, [r7, #28]
        break;
 8007bfc:	e005      	b.n	8007c0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007c08:	bf00      	nop
    }

    if (pclk != 0U)
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d019      	beq.n	8007c44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	085a      	lsrs	r2, r3, #1
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	441a      	add	r2, r3
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d909      	bls.n	8007c3e <UART_SetConfig+0x546>
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c30:	d205      	bcs.n	8007c3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60da      	str	r2, [r3, #12]
 8007c3c:	e002      	b.n	8007c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3728      	adds	r7, #40	; 0x28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c5e:	bf00      	nop
 8007c60:	40008000 	.word	0x40008000
 8007c64:	00f42400 	.word	0x00f42400

08007c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00a      	beq.n	8007c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00a      	beq.n	8007cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	f003 0308 	and.w	r3, r3, #8
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01a      	beq.n	8007d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d66:	d10a      	bne.n	8007d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	605a      	str	r2, [r3, #4]
  }
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dbc:	f7fb f858 	bl	8002e70 <HAL_GetTick>
 8007dc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d10e      	bne.n	8007dee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f82d 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e023      	b.n	8007e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d10e      	bne.n	8007e1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f817 	bl	8007e3e <UART_WaitOnFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e16:	2303      	movs	r3, #3
 8007e18:	e00d      	b.n	8007e36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2220      	movs	r2, #32
 8007e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b09c      	sub	sp, #112	; 0x70
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	603b      	str	r3, [r7, #0]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e4e:	e0a5      	b.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e56:	f000 80a1 	beq.w	8007f9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5a:	f7fb f809 	bl	8002e70 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d302      	bcc.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d13e      	bne.n	8007eee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e84:	667b      	str	r3, [r7, #100]	; 0x64
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e6      	bne.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb4:	f023 0301 	bic.w	r3, r3, #1
 8007eb8:	663b      	str	r3, [r7, #96]	; 0x60
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3308      	adds	r3, #8
 8007ec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ec2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e5      	bne.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2220      	movs	r2, #32
 8007eda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e067      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d04f      	beq.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f0a:	d147      	bne.n	8007f9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f34:	637b      	str	r3, [r7, #52]	; 0x34
 8007f36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f3c:	e841 2300 	strex	r3, r2, [r1]
 8007f40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1e6      	bne.n	8007f16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3308      	adds	r3, #8
 8007f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	e853 3f00 	ldrex	r3, [r3]
 8007f56:	613b      	str	r3, [r7, #16]
   return(result);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f023 0301 	bic.w	r3, r3, #1
 8007f5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3308      	adds	r3, #8
 8007f66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f68:	623a      	str	r2, [r7, #32]
 8007f6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6c:	69f9      	ldr	r1, [r7, #28]
 8007f6e:	6a3a      	ldr	r2, [r7, #32]
 8007f70:	e841 2300 	strex	r3, r2, [r1]
 8007f74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e5      	bne.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2220      	movs	r2, #32
 8007f80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2220      	movs	r2, #32
 8007f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e010      	b.n	8007fbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69da      	ldr	r2, [r3, #28]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	f43f af4a 	beq.w	8007e50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3770      	adds	r7, #112	; 0x70
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <__errno>:
 8007fc8:	4b01      	ldr	r3, [pc, #4]	; (8007fd0 <__errno+0x8>)
 8007fca:	6818      	ldr	r0, [r3, #0]
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	2000001c 	.word	0x2000001c

08007fd4 <__libc_init_array>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	4d0d      	ldr	r5, [pc, #52]	; (800800c <__libc_init_array+0x38>)
 8007fd8:	4c0d      	ldr	r4, [pc, #52]	; (8008010 <__libc_init_array+0x3c>)
 8007fda:	1b64      	subs	r4, r4, r5
 8007fdc:	10a4      	asrs	r4, r4, #2
 8007fde:	2600      	movs	r6, #0
 8007fe0:	42a6      	cmp	r6, r4
 8007fe2:	d109      	bne.n	8007ff8 <__libc_init_array+0x24>
 8007fe4:	4d0b      	ldr	r5, [pc, #44]	; (8008014 <__libc_init_array+0x40>)
 8007fe6:	4c0c      	ldr	r4, [pc, #48]	; (8008018 <__libc_init_array+0x44>)
 8007fe8:	f002 ff02 	bl	800adf0 <_init>
 8007fec:	1b64      	subs	r4, r4, r5
 8007fee:	10a4      	asrs	r4, r4, #2
 8007ff0:	2600      	movs	r6, #0
 8007ff2:	42a6      	cmp	r6, r4
 8007ff4:	d105      	bne.n	8008002 <__libc_init_array+0x2e>
 8007ff6:	bd70      	pop	{r4, r5, r6, pc}
 8007ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ffc:	4798      	blx	r3
 8007ffe:	3601      	adds	r6, #1
 8008000:	e7ee      	b.n	8007fe0 <__libc_init_array+0xc>
 8008002:	f855 3b04 	ldr.w	r3, [r5], #4
 8008006:	4798      	blx	r3
 8008008:	3601      	adds	r6, #1
 800800a:	e7f2      	b.n	8007ff2 <__libc_init_array+0x1e>
 800800c:	0800d39c 	.word	0x0800d39c
 8008010:	0800d39c 	.word	0x0800d39c
 8008014:	0800d39c 	.word	0x0800d39c
 8008018:	0800d3a0 	.word	0x0800d3a0

0800801c <malloc>:
 800801c:	4b02      	ldr	r3, [pc, #8]	; (8008028 <malloc+0xc>)
 800801e:	4601      	mov	r1, r0
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	f000 b877 	b.w	8008114 <_malloc_r>
 8008026:	bf00      	nop
 8008028:	2000001c 	.word	0x2000001c

0800802c <memset>:
 800802c:	4402      	add	r2, r0
 800802e:	4603      	mov	r3, r0
 8008030:	4293      	cmp	r3, r2
 8008032:	d100      	bne.n	8008036 <memset+0xa>
 8008034:	4770      	bx	lr
 8008036:	f803 1b01 	strb.w	r1, [r3], #1
 800803a:	e7f9      	b.n	8008030 <memset+0x4>

0800803c <_free_r>:
 800803c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800803e:	2900      	cmp	r1, #0
 8008040:	d044      	beq.n	80080cc <_free_r+0x90>
 8008042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008046:	9001      	str	r0, [sp, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f1a1 0404 	sub.w	r4, r1, #4
 800804e:	bfb8      	it	lt
 8008050:	18e4      	addlt	r4, r4, r3
 8008052:	f001 fbf9 	bl	8009848 <__malloc_lock>
 8008056:	4a1e      	ldr	r2, [pc, #120]	; (80080d0 <_free_r+0x94>)
 8008058:	9801      	ldr	r0, [sp, #4]
 800805a:	6813      	ldr	r3, [r2, #0]
 800805c:	b933      	cbnz	r3, 800806c <_free_r+0x30>
 800805e:	6063      	str	r3, [r4, #4]
 8008060:	6014      	str	r4, [r2, #0]
 8008062:	b003      	add	sp, #12
 8008064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008068:	f001 bbf4 	b.w	8009854 <__malloc_unlock>
 800806c:	42a3      	cmp	r3, r4
 800806e:	d908      	bls.n	8008082 <_free_r+0x46>
 8008070:	6825      	ldr	r5, [r4, #0]
 8008072:	1961      	adds	r1, r4, r5
 8008074:	428b      	cmp	r3, r1
 8008076:	bf01      	itttt	eq
 8008078:	6819      	ldreq	r1, [r3, #0]
 800807a:	685b      	ldreq	r3, [r3, #4]
 800807c:	1949      	addeq	r1, r1, r5
 800807e:	6021      	streq	r1, [r4, #0]
 8008080:	e7ed      	b.n	800805e <_free_r+0x22>
 8008082:	461a      	mov	r2, r3
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	b10b      	cbz	r3, 800808c <_free_r+0x50>
 8008088:	42a3      	cmp	r3, r4
 800808a:	d9fa      	bls.n	8008082 <_free_r+0x46>
 800808c:	6811      	ldr	r1, [r2, #0]
 800808e:	1855      	adds	r5, r2, r1
 8008090:	42a5      	cmp	r5, r4
 8008092:	d10b      	bne.n	80080ac <_free_r+0x70>
 8008094:	6824      	ldr	r4, [r4, #0]
 8008096:	4421      	add	r1, r4
 8008098:	1854      	adds	r4, r2, r1
 800809a:	42a3      	cmp	r3, r4
 800809c:	6011      	str	r1, [r2, #0]
 800809e:	d1e0      	bne.n	8008062 <_free_r+0x26>
 80080a0:	681c      	ldr	r4, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	6053      	str	r3, [r2, #4]
 80080a6:	4421      	add	r1, r4
 80080a8:	6011      	str	r1, [r2, #0]
 80080aa:	e7da      	b.n	8008062 <_free_r+0x26>
 80080ac:	d902      	bls.n	80080b4 <_free_r+0x78>
 80080ae:	230c      	movs	r3, #12
 80080b0:	6003      	str	r3, [r0, #0]
 80080b2:	e7d6      	b.n	8008062 <_free_r+0x26>
 80080b4:	6825      	ldr	r5, [r4, #0]
 80080b6:	1961      	adds	r1, r4, r5
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bf04      	itt	eq
 80080bc:	6819      	ldreq	r1, [r3, #0]
 80080be:	685b      	ldreq	r3, [r3, #4]
 80080c0:	6063      	str	r3, [r4, #4]
 80080c2:	bf04      	itt	eq
 80080c4:	1949      	addeq	r1, r1, r5
 80080c6:	6021      	streq	r1, [r4, #0]
 80080c8:	6054      	str	r4, [r2, #4]
 80080ca:	e7ca      	b.n	8008062 <_free_r+0x26>
 80080cc:	b003      	add	sp, #12
 80080ce:	bd30      	pop	{r4, r5, pc}
 80080d0:	2000044c 	.word	0x2000044c

080080d4 <sbrk_aligned>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4e0e      	ldr	r6, [pc, #56]	; (8008110 <sbrk_aligned+0x3c>)
 80080d8:	460c      	mov	r4, r1
 80080da:	6831      	ldr	r1, [r6, #0]
 80080dc:	4605      	mov	r5, r0
 80080de:	b911      	cbnz	r1, 80080e6 <sbrk_aligned+0x12>
 80080e0:	f000 fcf6 	bl	8008ad0 <_sbrk_r>
 80080e4:	6030      	str	r0, [r6, #0]
 80080e6:	4621      	mov	r1, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	f000 fcf1 	bl	8008ad0 <_sbrk_r>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	d00a      	beq.n	8008108 <sbrk_aligned+0x34>
 80080f2:	1cc4      	adds	r4, r0, #3
 80080f4:	f024 0403 	bic.w	r4, r4, #3
 80080f8:	42a0      	cmp	r0, r4
 80080fa:	d007      	beq.n	800810c <sbrk_aligned+0x38>
 80080fc:	1a21      	subs	r1, r4, r0
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fce6 	bl	8008ad0 <_sbrk_r>
 8008104:	3001      	adds	r0, #1
 8008106:	d101      	bne.n	800810c <sbrk_aligned+0x38>
 8008108:	f04f 34ff 	mov.w	r4, #4294967295
 800810c:	4620      	mov	r0, r4
 800810e:	bd70      	pop	{r4, r5, r6, pc}
 8008110:	20000450 	.word	0x20000450

08008114 <_malloc_r>:
 8008114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	1ccd      	adds	r5, r1, #3
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	2d00      	cmp	r5, #0
 8008128:	4607      	mov	r7, r0
 800812a:	db01      	blt.n	8008130 <_malloc_r+0x1c>
 800812c:	42a9      	cmp	r1, r5
 800812e:	d905      	bls.n	800813c <_malloc_r+0x28>
 8008130:	230c      	movs	r3, #12
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	2600      	movs	r6, #0
 8008136:	4630      	mov	r0, r6
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	4e2e      	ldr	r6, [pc, #184]	; (80081f8 <_malloc_r+0xe4>)
 800813e:	f001 fb83 	bl	8009848 <__malloc_lock>
 8008142:	6833      	ldr	r3, [r6, #0]
 8008144:	461c      	mov	r4, r3
 8008146:	bb34      	cbnz	r4, 8008196 <_malloc_r+0x82>
 8008148:	4629      	mov	r1, r5
 800814a:	4638      	mov	r0, r7
 800814c:	f7ff ffc2 	bl	80080d4 <sbrk_aligned>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	4604      	mov	r4, r0
 8008154:	d14d      	bne.n	80081f2 <_malloc_r+0xde>
 8008156:	6834      	ldr	r4, [r6, #0]
 8008158:	4626      	mov	r6, r4
 800815a:	2e00      	cmp	r6, #0
 800815c:	d140      	bne.n	80081e0 <_malloc_r+0xcc>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	4631      	mov	r1, r6
 8008162:	4638      	mov	r0, r7
 8008164:	eb04 0803 	add.w	r8, r4, r3
 8008168:	f000 fcb2 	bl	8008ad0 <_sbrk_r>
 800816c:	4580      	cmp	r8, r0
 800816e:	d13a      	bne.n	80081e6 <_malloc_r+0xd2>
 8008170:	6821      	ldr	r1, [r4, #0]
 8008172:	3503      	adds	r5, #3
 8008174:	1a6d      	subs	r5, r5, r1
 8008176:	f025 0503 	bic.w	r5, r5, #3
 800817a:	3508      	adds	r5, #8
 800817c:	2d0c      	cmp	r5, #12
 800817e:	bf38      	it	cc
 8008180:	250c      	movcc	r5, #12
 8008182:	4629      	mov	r1, r5
 8008184:	4638      	mov	r0, r7
 8008186:	f7ff ffa5 	bl	80080d4 <sbrk_aligned>
 800818a:	3001      	adds	r0, #1
 800818c:	d02b      	beq.n	80081e6 <_malloc_r+0xd2>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	442b      	add	r3, r5
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	e00e      	b.n	80081b4 <_malloc_r+0xa0>
 8008196:	6822      	ldr	r2, [r4, #0]
 8008198:	1b52      	subs	r2, r2, r5
 800819a:	d41e      	bmi.n	80081da <_malloc_r+0xc6>
 800819c:	2a0b      	cmp	r2, #11
 800819e:	d916      	bls.n	80081ce <_malloc_r+0xba>
 80081a0:	1961      	adds	r1, r4, r5
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	6025      	str	r5, [r4, #0]
 80081a6:	bf18      	it	ne
 80081a8:	6059      	strne	r1, [r3, #4]
 80081aa:	6863      	ldr	r3, [r4, #4]
 80081ac:	bf08      	it	eq
 80081ae:	6031      	streq	r1, [r6, #0]
 80081b0:	5162      	str	r2, [r4, r5]
 80081b2:	604b      	str	r3, [r1, #4]
 80081b4:	4638      	mov	r0, r7
 80081b6:	f104 060b 	add.w	r6, r4, #11
 80081ba:	f001 fb4b 	bl	8009854 <__malloc_unlock>
 80081be:	f026 0607 	bic.w	r6, r6, #7
 80081c2:	1d23      	adds	r3, r4, #4
 80081c4:	1af2      	subs	r2, r6, r3
 80081c6:	d0b6      	beq.n	8008136 <_malloc_r+0x22>
 80081c8:	1b9b      	subs	r3, r3, r6
 80081ca:	50a3      	str	r3, [r4, r2]
 80081cc:	e7b3      	b.n	8008136 <_malloc_r+0x22>
 80081ce:	6862      	ldr	r2, [r4, #4]
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	bf0c      	ite	eq
 80081d4:	6032      	streq	r2, [r6, #0]
 80081d6:	605a      	strne	r2, [r3, #4]
 80081d8:	e7ec      	b.n	80081b4 <_malloc_r+0xa0>
 80081da:	4623      	mov	r3, r4
 80081dc:	6864      	ldr	r4, [r4, #4]
 80081de:	e7b2      	b.n	8008146 <_malloc_r+0x32>
 80081e0:	4634      	mov	r4, r6
 80081e2:	6876      	ldr	r6, [r6, #4]
 80081e4:	e7b9      	b.n	800815a <_malloc_r+0x46>
 80081e6:	230c      	movs	r3, #12
 80081e8:	603b      	str	r3, [r7, #0]
 80081ea:	4638      	mov	r0, r7
 80081ec:	f001 fb32 	bl	8009854 <__malloc_unlock>
 80081f0:	e7a1      	b.n	8008136 <_malloc_r+0x22>
 80081f2:	6025      	str	r5, [r4, #0]
 80081f4:	e7de      	b.n	80081b4 <_malloc_r+0xa0>
 80081f6:	bf00      	nop
 80081f8:	2000044c 	.word	0x2000044c

080081fc <__cvt>:
 80081fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	ec55 4b10 	vmov	r4, r5, d0
 8008204:	2d00      	cmp	r5, #0
 8008206:	460e      	mov	r6, r1
 8008208:	4619      	mov	r1, r3
 800820a:	462b      	mov	r3, r5
 800820c:	bfbb      	ittet	lt
 800820e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008212:	461d      	movlt	r5, r3
 8008214:	2300      	movge	r3, #0
 8008216:	232d      	movlt	r3, #45	; 0x2d
 8008218:	700b      	strb	r3, [r1, #0]
 800821a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800821c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008220:	4691      	mov	r9, r2
 8008222:	f023 0820 	bic.w	r8, r3, #32
 8008226:	bfbc      	itt	lt
 8008228:	4622      	movlt	r2, r4
 800822a:	4614      	movlt	r4, r2
 800822c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008230:	d005      	beq.n	800823e <__cvt+0x42>
 8008232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008236:	d100      	bne.n	800823a <__cvt+0x3e>
 8008238:	3601      	adds	r6, #1
 800823a:	2102      	movs	r1, #2
 800823c:	e000      	b.n	8008240 <__cvt+0x44>
 800823e:	2103      	movs	r1, #3
 8008240:	ab03      	add	r3, sp, #12
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	ab02      	add	r3, sp, #8
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	ec45 4b10 	vmov	d0, r4, r5
 800824c:	4653      	mov	r3, sl
 800824e:	4632      	mov	r2, r6
 8008250:	f000 fcfa 	bl	8008c48 <_dtoa_r>
 8008254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008258:	4607      	mov	r7, r0
 800825a:	d102      	bne.n	8008262 <__cvt+0x66>
 800825c:	f019 0f01 	tst.w	r9, #1
 8008260:	d022      	beq.n	80082a8 <__cvt+0xac>
 8008262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008266:	eb07 0906 	add.w	r9, r7, r6
 800826a:	d110      	bne.n	800828e <__cvt+0x92>
 800826c:	783b      	ldrb	r3, [r7, #0]
 800826e:	2b30      	cmp	r3, #48	; 0x30
 8008270:	d10a      	bne.n	8008288 <__cvt+0x8c>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	4620      	mov	r0, r4
 8008278:	4629      	mov	r1, r5
 800827a:	f7f8 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800827e:	b918      	cbnz	r0, 8008288 <__cvt+0x8c>
 8008280:	f1c6 0601 	rsb	r6, r6, #1
 8008284:	f8ca 6000 	str.w	r6, [sl]
 8008288:	f8da 3000 	ldr.w	r3, [sl]
 800828c:	4499      	add	r9, r3
 800828e:	2200      	movs	r2, #0
 8008290:	2300      	movs	r3, #0
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f7f8 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800829a:	b108      	cbz	r0, 80082a0 <__cvt+0xa4>
 800829c:	f8cd 900c 	str.w	r9, [sp, #12]
 80082a0:	2230      	movs	r2, #48	; 0x30
 80082a2:	9b03      	ldr	r3, [sp, #12]
 80082a4:	454b      	cmp	r3, r9
 80082a6:	d307      	bcc.n	80082b8 <__cvt+0xbc>
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80082ac:	1bdb      	subs	r3, r3, r7
 80082ae:	4638      	mov	r0, r7
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	b004      	add	sp, #16
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	1c59      	adds	r1, r3, #1
 80082ba:	9103      	str	r1, [sp, #12]
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e7f0      	b.n	80082a2 <__cvt+0xa6>

080082c0 <__exponent>:
 80082c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082c2:	4603      	mov	r3, r0
 80082c4:	2900      	cmp	r1, #0
 80082c6:	bfb8      	it	lt
 80082c8:	4249      	neglt	r1, r1
 80082ca:	f803 2b02 	strb.w	r2, [r3], #2
 80082ce:	bfb4      	ite	lt
 80082d0:	222d      	movlt	r2, #45	; 0x2d
 80082d2:	222b      	movge	r2, #43	; 0x2b
 80082d4:	2909      	cmp	r1, #9
 80082d6:	7042      	strb	r2, [r0, #1]
 80082d8:	dd2a      	ble.n	8008330 <__exponent+0x70>
 80082da:	f10d 0407 	add.w	r4, sp, #7
 80082de:	46a4      	mov	ip, r4
 80082e0:	270a      	movs	r7, #10
 80082e2:	46a6      	mov	lr, r4
 80082e4:	460a      	mov	r2, r1
 80082e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80082ea:	fb07 1516 	mls	r5, r7, r6, r1
 80082ee:	3530      	adds	r5, #48	; 0x30
 80082f0:	2a63      	cmp	r2, #99	; 0x63
 80082f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80082f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80082fa:	4631      	mov	r1, r6
 80082fc:	dcf1      	bgt.n	80082e2 <__exponent+0x22>
 80082fe:	3130      	adds	r1, #48	; 0x30
 8008300:	f1ae 0502 	sub.w	r5, lr, #2
 8008304:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008308:	1c44      	adds	r4, r0, #1
 800830a:	4629      	mov	r1, r5
 800830c:	4561      	cmp	r1, ip
 800830e:	d30a      	bcc.n	8008326 <__exponent+0x66>
 8008310:	f10d 0209 	add.w	r2, sp, #9
 8008314:	eba2 020e 	sub.w	r2, r2, lr
 8008318:	4565      	cmp	r5, ip
 800831a:	bf88      	it	hi
 800831c:	2200      	movhi	r2, #0
 800831e:	4413      	add	r3, r2
 8008320:	1a18      	subs	r0, r3, r0
 8008322:	b003      	add	sp, #12
 8008324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800832a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800832e:	e7ed      	b.n	800830c <__exponent+0x4c>
 8008330:	2330      	movs	r3, #48	; 0x30
 8008332:	3130      	adds	r1, #48	; 0x30
 8008334:	7083      	strb	r3, [r0, #2]
 8008336:	70c1      	strb	r1, [r0, #3]
 8008338:	1d03      	adds	r3, r0, #4
 800833a:	e7f1      	b.n	8008320 <__exponent+0x60>

0800833c <_printf_float>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	ed2d 8b02 	vpush	{d8}
 8008344:	b08d      	sub	sp, #52	; 0x34
 8008346:	460c      	mov	r4, r1
 8008348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800834c:	4616      	mov	r6, r2
 800834e:	461f      	mov	r7, r3
 8008350:	4605      	mov	r5, r0
 8008352:	f001 fa67 	bl	8009824 <_localeconv_r>
 8008356:	f8d0 a000 	ldr.w	sl, [r0]
 800835a:	4650      	mov	r0, sl
 800835c:	f7f7 ff38 	bl	80001d0 <strlen>
 8008360:	2300      	movs	r3, #0
 8008362:	930a      	str	r3, [sp, #40]	; 0x28
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	9305      	str	r3, [sp, #20]
 8008368:	f8d8 3000 	ldr.w	r3, [r8]
 800836c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008370:	3307      	adds	r3, #7
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	f103 0208 	add.w	r2, r3, #8
 800837a:	f8c8 2000 	str.w	r2, [r8]
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008386:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800838a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	f8cd 8018 	str.w	r8, [sp, #24]
 8008394:	ee08 0a10 	vmov	s16, r0
 8008398:	4b9f      	ldr	r3, [pc, #636]	; (8008618 <_printf_float+0x2dc>)
 800839a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	f7f8 fbc3 	bl	8000b2c <__aeabi_dcmpun>
 80083a6:	bb88      	cbnz	r0, 800840c <_printf_float+0xd0>
 80083a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083ac:	4b9a      	ldr	r3, [pc, #616]	; (8008618 <_printf_float+0x2dc>)
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	f7f8 fb9d 	bl	8000af0 <__aeabi_dcmple>
 80083b6:	bb48      	cbnz	r0, 800840c <_printf_float+0xd0>
 80083b8:	2200      	movs	r2, #0
 80083ba:	2300      	movs	r3, #0
 80083bc:	4640      	mov	r0, r8
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f8 fb8c 	bl	8000adc <__aeabi_dcmplt>
 80083c4:	b110      	cbz	r0, 80083cc <_printf_float+0x90>
 80083c6:	232d      	movs	r3, #45	; 0x2d
 80083c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083cc:	4b93      	ldr	r3, [pc, #588]	; (800861c <_printf_float+0x2e0>)
 80083ce:	4894      	ldr	r0, [pc, #592]	; (8008620 <_printf_float+0x2e4>)
 80083d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80083d4:	bf94      	ite	ls
 80083d6:	4698      	movls	r8, r3
 80083d8:	4680      	movhi	r8, r0
 80083da:	2303      	movs	r3, #3
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	9b05      	ldr	r3, [sp, #20]
 80083e0:	f023 0204 	bic.w	r2, r3, #4
 80083e4:	6022      	str	r2, [r4, #0]
 80083e6:	f04f 0900 	mov.w	r9, #0
 80083ea:	9700      	str	r7, [sp, #0]
 80083ec:	4633      	mov	r3, r6
 80083ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f9d8 	bl	80087a8 <_printf_common>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f040 8090 	bne.w	800851e <_printf_float+0x1e2>
 80083fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008402:	b00d      	add	sp, #52	; 0x34
 8008404:	ecbd 8b02 	vpop	{d8}
 8008408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	4640      	mov	r0, r8
 8008412:	4649      	mov	r1, r9
 8008414:	f7f8 fb8a 	bl	8000b2c <__aeabi_dcmpun>
 8008418:	b140      	cbz	r0, 800842c <_printf_float+0xf0>
 800841a:	464b      	mov	r3, r9
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfbc      	itt	lt
 8008420:	232d      	movlt	r3, #45	; 0x2d
 8008422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008426:	487f      	ldr	r0, [pc, #508]	; (8008624 <_printf_float+0x2e8>)
 8008428:	4b7f      	ldr	r3, [pc, #508]	; (8008628 <_printf_float+0x2ec>)
 800842a:	e7d1      	b.n	80083d0 <_printf_float+0x94>
 800842c:	6863      	ldr	r3, [r4, #4]
 800842e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008432:	9206      	str	r2, [sp, #24]
 8008434:	1c5a      	adds	r2, r3, #1
 8008436:	d13f      	bne.n	80084b8 <_printf_float+0x17c>
 8008438:	2306      	movs	r3, #6
 800843a:	6063      	str	r3, [r4, #4]
 800843c:	9b05      	ldr	r3, [sp, #20]
 800843e:	6861      	ldr	r1, [r4, #4]
 8008440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008444:	2300      	movs	r3, #0
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	ab0a      	add	r3, sp, #40	; 0x28
 800844a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800844e:	ab09      	add	r3, sp, #36	; 0x24
 8008450:	ec49 8b10 	vmov	d0, r8, r9
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	6022      	str	r2, [r4, #0]
 8008458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800845c:	4628      	mov	r0, r5
 800845e:	f7ff fecd 	bl	80081fc <__cvt>
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008466:	2b47      	cmp	r3, #71	; 0x47
 8008468:	4680      	mov	r8, r0
 800846a:	d108      	bne.n	800847e <_printf_float+0x142>
 800846c:	1cc8      	adds	r0, r1, #3
 800846e:	db02      	blt.n	8008476 <_printf_float+0x13a>
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	4299      	cmp	r1, r3
 8008474:	dd41      	ble.n	80084fa <_printf_float+0x1be>
 8008476:	f1ab 0b02 	sub.w	fp, fp, #2
 800847a:	fa5f fb8b 	uxtb.w	fp, fp
 800847e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008482:	d820      	bhi.n	80084c6 <_printf_float+0x18a>
 8008484:	3901      	subs	r1, #1
 8008486:	465a      	mov	r2, fp
 8008488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800848c:	9109      	str	r1, [sp, #36]	; 0x24
 800848e:	f7ff ff17 	bl	80082c0 <__exponent>
 8008492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008494:	1813      	adds	r3, r2, r0
 8008496:	2a01      	cmp	r2, #1
 8008498:	4681      	mov	r9, r0
 800849a:	6123      	str	r3, [r4, #16]
 800849c:	dc02      	bgt.n	80084a4 <_printf_float+0x168>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	07d2      	lsls	r2, r2, #31
 80084a2:	d501      	bpl.n	80084a8 <_printf_float+0x16c>
 80084a4:	3301      	adds	r3, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d09c      	beq.n	80083ea <_printf_float+0xae>
 80084b0:	232d      	movs	r3, #45	; 0x2d
 80084b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084b6:	e798      	b.n	80083ea <_printf_float+0xae>
 80084b8:	9a06      	ldr	r2, [sp, #24]
 80084ba:	2a47      	cmp	r2, #71	; 0x47
 80084bc:	d1be      	bne.n	800843c <_printf_float+0x100>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1bc      	bne.n	800843c <_printf_float+0x100>
 80084c2:	2301      	movs	r3, #1
 80084c4:	e7b9      	b.n	800843a <_printf_float+0xfe>
 80084c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80084ca:	d118      	bne.n	80084fe <_printf_float+0x1c2>
 80084cc:	2900      	cmp	r1, #0
 80084ce:	6863      	ldr	r3, [r4, #4]
 80084d0:	dd0b      	ble.n	80084ea <_printf_float+0x1ae>
 80084d2:	6121      	str	r1, [r4, #16]
 80084d4:	b913      	cbnz	r3, 80084dc <_printf_float+0x1a0>
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	07d0      	lsls	r0, r2, #31
 80084da:	d502      	bpl.n	80084e2 <_printf_float+0x1a6>
 80084dc:	3301      	adds	r3, #1
 80084de:	440b      	add	r3, r1
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80084e4:	f04f 0900 	mov.w	r9, #0
 80084e8:	e7de      	b.n	80084a8 <_printf_float+0x16c>
 80084ea:	b913      	cbnz	r3, 80084f2 <_printf_float+0x1b6>
 80084ec:	6822      	ldr	r2, [r4, #0]
 80084ee:	07d2      	lsls	r2, r2, #31
 80084f0:	d501      	bpl.n	80084f6 <_printf_float+0x1ba>
 80084f2:	3302      	adds	r3, #2
 80084f4:	e7f4      	b.n	80084e0 <_printf_float+0x1a4>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e7f2      	b.n	80084e0 <_printf_float+0x1a4>
 80084fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80084fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008500:	4299      	cmp	r1, r3
 8008502:	db05      	blt.n	8008510 <_printf_float+0x1d4>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	6121      	str	r1, [r4, #16]
 8008508:	07d8      	lsls	r0, r3, #31
 800850a:	d5ea      	bpl.n	80084e2 <_printf_float+0x1a6>
 800850c:	1c4b      	adds	r3, r1, #1
 800850e:	e7e7      	b.n	80084e0 <_printf_float+0x1a4>
 8008510:	2900      	cmp	r1, #0
 8008512:	bfd4      	ite	le
 8008514:	f1c1 0202 	rsble	r2, r1, #2
 8008518:	2201      	movgt	r2, #1
 800851a:	4413      	add	r3, r2
 800851c:	e7e0      	b.n	80084e0 <_printf_float+0x1a4>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	055a      	lsls	r2, r3, #21
 8008522:	d407      	bmi.n	8008534 <_printf_float+0x1f8>
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	4642      	mov	r2, r8
 8008528:	4631      	mov	r1, r6
 800852a:	4628      	mov	r0, r5
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	d12c      	bne.n	800858c <_printf_float+0x250>
 8008532:	e764      	b.n	80083fe <_printf_float+0xc2>
 8008534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008538:	f240 80e0 	bls.w	80086fc <_printf_float+0x3c0>
 800853c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	f7f8 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008548:	2800      	cmp	r0, #0
 800854a:	d034      	beq.n	80085b6 <_printf_float+0x27a>
 800854c:	4a37      	ldr	r2, [pc, #220]	; (800862c <_printf_float+0x2f0>)
 800854e:	2301      	movs	r3, #1
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f af51 	beq.w	80083fe <_printf_float+0xc2>
 800855c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008560:	429a      	cmp	r2, r3
 8008562:	db02      	blt.n	800856a <_printf_float+0x22e>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	07d8      	lsls	r0, r3, #31
 8008568:	d510      	bpl.n	800858c <_printf_float+0x250>
 800856a:	ee18 3a10 	vmov	r3, s16
 800856e:	4652      	mov	r2, sl
 8008570:	4631      	mov	r1, r6
 8008572:	4628      	mov	r0, r5
 8008574:	47b8      	blx	r7
 8008576:	3001      	adds	r0, #1
 8008578:	f43f af41 	beq.w	80083fe <_printf_float+0xc2>
 800857c:	f04f 0800 	mov.w	r8, #0
 8008580:	f104 091a 	add.w	r9, r4, #26
 8008584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008586:	3b01      	subs	r3, #1
 8008588:	4543      	cmp	r3, r8
 800858a:	dc09      	bgt.n	80085a0 <_printf_float+0x264>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	079b      	lsls	r3, r3, #30
 8008590:	f100 8105 	bmi.w	800879e <_printf_float+0x462>
 8008594:	68e0      	ldr	r0, [r4, #12]
 8008596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008598:	4298      	cmp	r0, r3
 800859a:	bfb8      	it	lt
 800859c:	4618      	movlt	r0, r3
 800859e:	e730      	b.n	8008402 <_printf_float+0xc6>
 80085a0:	2301      	movs	r3, #1
 80085a2:	464a      	mov	r2, r9
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	f43f af27 	beq.w	80083fe <_printf_float+0xc2>
 80085b0:	f108 0801 	add.w	r8, r8, #1
 80085b4:	e7e6      	b.n	8008584 <_printf_float+0x248>
 80085b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc39      	bgt.n	8008630 <_printf_float+0x2f4>
 80085bc:	4a1b      	ldr	r2, [pc, #108]	; (800862c <_printf_float+0x2f0>)
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af19 	beq.w	80083fe <_printf_float+0xc2>
 80085cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d0:	4313      	orrs	r3, r2
 80085d2:	d102      	bne.n	80085da <_printf_float+0x29e>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07d9      	lsls	r1, r3, #31
 80085d8:	d5d8      	bpl.n	800858c <_printf_float+0x250>
 80085da:	ee18 3a10 	vmov	r3, s16
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f af09 	beq.w	80083fe <_printf_float+0xc2>
 80085ec:	f04f 0900 	mov.w	r9, #0
 80085f0:	f104 0a1a 	add.w	sl, r4, #26
 80085f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f6:	425b      	negs	r3, r3
 80085f8:	454b      	cmp	r3, r9
 80085fa:	dc01      	bgt.n	8008600 <_printf_float+0x2c4>
 80085fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fe:	e792      	b.n	8008526 <_printf_float+0x1ea>
 8008600:	2301      	movs	r3, #1
 8008602:	4652      	mov	r2, sl
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	47b8      	blx	r7
 800860a:	3001      	adds	r0, #1
 800860c:	f43f aef7 	beq.w	80083fe <_printf_float+0xc2>
 8008610:	f109 0901 	add.w	r9, r9, #1
 8008614:	e7ee      	b.n	80085f4 <_printf_float+0x2b8>
 8008616:	bf00      	nop
 8008618:	7fefffff 	.word	0x7fefffff
 800861c:	0800cfc0 	.word	0x0800cfc0
 8008620:	0800cfc4 	.word	0x0800cfc4
 8008624:	0800cfcc 	.word	0x0800cfcc
 8008628:	0800cfc8 	.word	0x0800cfc8
 800862c:	0800cfd0 	.word	0x0800cfd0
 8008630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008634:	429a      	cmp	r2, r3
 8008636:	bfa8      	it	ge
 8008638:	461a      	movge	r2, r3
 800863a:	2a00      	cmp	r2, #0
 800863c:	4691      	mov	r9, r2
 800863e:	dc37      	bgt.n	80086b0 <_printf_float+0x374>
 8008640:	f04f 0b00 	mov.w	fp, #0
 8008644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008648:	f104 021a 	add.w	r2, r4, #26
 800864c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800864e:	9305      	str	r3, [sp, #20]
 8008650:	eba3 0309 	sub.w	r3, r3, r9
 8008654:	455b      	cmp	r3, fp
 8008656:	dc33      	bgt.n	80086c0 <_printf_float+0x384>
 8008658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800865c:	429a      	cmp	r2, r3
 800865e:	db3b      	blt.n	80086d8 <_printf_float+0x39c>
 8008660:	6823      	ldr	r3, [r4, #0]
 8008662:	07da      	lsls	r2, r3, #31
 8008664:	d438      	bmi.n	80086d8 <_printf_float+0x39c>
 8008666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008668:	9a05      	ldr	r2, [sp, #20]
 800866a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800866c:	1a9a      	subs	r2, r3, r2
 800866e:	eba3 0901 	sub.w	r9, r3, r1
 8008672:	4591      	cmp	r9, r2
 8008674:	bfa8      	it	ge
 8008676:	4691      	movge	r9, r2
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	dc35      	bgt.n	80086ea <_printf_float+0x3ae>
 800867e:	f04f 0800 	mov.w	r8, #0
 8008682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008686:	f104 0a1a 	add.w	sl, r4, #26
 800868a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800868e:	1a9b      	subs	r3, r3, r2
 8008690:	eba3 0309 	sub.w	r3, r3, r9
 8008694:	4543      	cmp	r3, r8
 8008696:	f77f af79 	ble.w	800858c <_printf_float+0x250>
 800869a:	2301      	movs	r3, #1
 800869c:	4652      	mov	r2, sl
 800869e:	4631      	mov	r1, r6
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b8      	blx	r7
 80086a4:	3001      	adds	r0, #1
 80086a6:	f43f aeaa 	beq.w	80083fe <_printf_float+0xc2>
 80086aa:	f108 0801 	add.w	r8, r8, #1
 80086ae:	e7ec      	b.n	800868a <_printf_float+0x34e>
 80086b0:	4613      	mov	r3, r2
 80086b2:	4631      	mov	r1, r6
 80086b4:	4642      	mov	r2, r8
 80086b6:	4628      	mov	r0, r5
 80086b8:	47b8      	blx	r7
 80086ba:	3001      	adds	r0, #1
 80086bc:	d1c0      	bne.n	8008640 <_printf_float+0x304>
 80086be:	e69e      	b.n	80083fe <_printf_float+0xc2>
 80086c0:	2301      	movs	r3, #1
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	9205      	str	r2, [sp, #20]
 80086c8:	47b8      	blx	r7
 80086ca:	3001      	adds	r0, #1
 80086cc:	f43f ae97 	beq.w	80083fe <_printf_float+0xc2>
 80086d0:	9a05      	ldr	r2, [sp, #20]
 80086d2:	f10b 0b01 	add.w	fp, fp, #1
 80086d6:	e7b9      	b.n	800864c <_printf_float+0x310>
 80086d8:	ee18 3a10 	vmov	r3, s16
 80086dc:	4652      	mov	r2, sl
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	d1be      	bne.n	8008666 <_printf_float+0x32a>
 80086e8:	e689      	b.n	80083fe <_printf_float+0xc2>
 80086ea:	9a05      	ldr	r2, [sp, #20]
 80086ec:	464b      	mov	r3, r9
 80086ee:	4442      	add	r2, r8
 80086f0:	4631      	mov	r1, r6
 80086f2:	4628      	mov	r0, r5
 80086f4:	47b8      	blx	r7
 80086f6:	3001      	adds	r0, #1
 80086f8:	d1c1      	bne.n	800867e <_printf_float+0x342>
 80086fa:	e680      	b.n	80083fe <_printf_float+0xc2>
 80086fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086fe:	2a01      	cmp	r2, #1
 8008700:	dc01      	bgt.n	8008706 <_printf_float+0x3ca>
 8008702:	07db      	lsls	r3, r3, #31
 8008704:	d538      	bpl.n	8008778 <_printf_float+0x43c>
 8008706:	2301      	movs	r3, #1
 8008708:	4642      	mov	r2, r8
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f ae74 	beq.w	80083fe <_printf_float+0xc2>
 8008716:	ee18 3a10 	vmov	r3, s16
 800871a:	4652      	mov	r2, sl
 800871c:	4631      	mov	r1, r6
 800871e:	4628      	mov	r0, r5
 8008720:	47b8      	blx	r7
 8008722:	3001      	adds	r0, #1
 8008724:	f43f ae6b 	beq.w	80083fe <_printf_float+0xc2>
 8008728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800872c:	2200      	movs	r2, #0
 800872e:	2300      	movs	r3, #0
 8008730:	f7f8 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008734:	b9d8      	cbnz	r0, 800876e <_printf_float+0x432>
 8008736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008738:	f108 0201 	add.w	r2, r8, #1
 800873c:	3b01      	subs	r3, #1
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	d10e      	bne.n	8008766 <_printf_float+0x42a>
 8008748:	e659      	b.n	80083fe <_printf_float+0xc2>
 800874a:	2301      	movs	r3, #1
 800874c:	4652      	mov	r2, sl
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	f43f ae52 	beq.w	80083fe <_printf_float+0xc2>
 800875a:	f108 0801 	add.w	r8, r8, #1
 800875e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008760:	3b01      	subs	r3, #1
 8008762:	4543      	cmp	r3, r8
 8008764:	dcf1      	bgt.n	800874a <_printf_float+0x40e>
 8008766:	464b      	mov	r3, r9
 8008768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800876c:	e6dc      	b.n	8008528 <_printf_float+0x1ec>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	f104 0a1a 	add.w	sl, r4, #26
 8008776:	e7f2      	b.n	800875e <_printf_float+0x422>
 8008778:	2301      	movs	r3, #1
 800877a:	4642      	mov	r2, r8
 800877c:	e7df      	b.n	800873e <_printf_float+0x402>
 800877e:	2301      	movs	r3, #1
 8008780:	464a      	mov	r2, r9
 8008782:	4631      	mov	r1, r6
 8008784:	4628      	mov	r0, r5
 8008786:	47b8      	blx	r7
 8008788:	3001      	adds	r0, #1
 800878a:	f43f ae38 	beq.w	80083fe <_printf_float+0xc2>
 800878e:	f108 0801 	add.w	r8, r8, #1
 8008792:	68e3      	ldr	r3, [r4, #12]
 8008794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008796:	1a5b      	subs	r3, r3, r1
 8008798:	4543      	cmp	r3, r8
 800879a:	dcf0      	bgt.n	800877e <_printf_float+0x442>
 800879c:	e6fa      	b.n	8008594 <_printf_float+0x258>
 800879e:	f04f 0800 	mov.w	r8, #0
 80087a2:	f104 0919 	add.w	r9, r4, #25
 80087a6:	e7f4      	b.n	8008792 <_printf_float+0x456>

080087a8 <_printf_common>:
 80087a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ac:	4616      	mov	r6, r2
 80087ae:	4699      	mov	r9, r3
 80087b0:	688a      	ldr	r2, [r1, #8]
 80087b2:	690b      	ldr	r3, [r1, #16]
 80087b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087b8:	4293      	cmp	r3, r2
 80087ba:	bfb8      	it	lt
 80087bc:	4613      	movlt	r3, r2
 80087be:	6033      	str	r3, [r6, #0]
 80087c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087c4:	4607      	mov	r7, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b10a      	cbz	r2, 80087ce <_printf_common+0x26>
 80087ca:	3301      	adds	r3, #1
 80087cc:	6033      	str	r3, [r6, #0]
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	0699      	lsls	r1, r3, #26
 80087d2:	bf42      	ittt	mi
 80087d4:	6833      	ldrmi	r3, [r6, #0]
 80087d6:	3302      	addmi	r3, #2
 80087d8:	6033      	strmi	r3, [r6, #0]
 80087da:	6825      	ldr	r5, [r4, #0]
 80087dc:	f015 0506 	ands.w	r5, r5, #6
 80087e0:	d106      	bne.n	80087f0 <_printf_common+0x48>
 80087e2:	f104 0a19 	add.w	sl, r4, #25
 80087e6:	68e3      	ldr	r3, [r4, #12]
 80087e8:	6832      	ldr	r2, [r6, #0]
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ab      	cmp	r3, r5
 80087ee:	dc26      	bgt.n	800883e <_printf_common+0x96>
 80087f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087f4:	1e13      	subs	r3, r2, #0
 80087f6:	6822      	ldr	r2, [r4, #0]
 80087f8:	bf18      	it	ne
 80087fa:	2301      	movne	r3, #1
 80087fc:	0692      	lsls	r2, r2, #26
 80087fe:	d42b      	bmi.n	8008858 <_printf_common+0xb0>
 8008800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008804:	4649      	mov	r1, r9
 8008806:	4638      	mov	r0, r7
 8008808:	47c0      	blx	r8
 800880a:	3001      	adds	r0, #1
 800880c:	d01e      	beq.n	800884c <_printf_common+0xa4>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	68e5      	ldr	r5, [r4, #12]
 8008812:	6832      	ldr	r2, [r6, #0]
 8008814:	f003 0306 	and.w	r3, r3, #6
 8008818:	2b04      	cmp	r3, #4
 800881a:	bf08      	it	eq
 800881c:	1aad      	subeq	r5, r5, r2
 800881e:	68a3      	ldr	r3, [r4, #8]
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	bf0c      	ite	eq
 8008824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008828:	2500      	movne	r5, #0
 800882a:	4293      	cmp	r3, r2
 800882c:	bfc4      	itt	gt
 800882e:	1a9b      	subgt	r3, r3, r2
 8008830:	18ed      	addgt	r5, r5, r3
 8008832:	2600      	movs	r6, #0
 8008834:	341a      	adds	r4, #26
 8008836:	42b5      	cmp	r5, r6
 8008838:	d11a      	bne.n	8008870 <_printf_common+0xc8>
 800883a:	2000      	movs	r0, #0
 800883c:	e008      	b.n	8008850 <_printf_common+0xa8>
 800883e:	2301      	movs	r3, #1
 8008840:	4652      	mov	r2, sl
 8008842:	4649      	mov	r1, r9
 8008844:	4638      	mov	r0, r7
 8008846:	47c0      	blx	r8
 8008848:	3001      	adds	r0, #1
 800884a:	d103      	bne.n	8008854 <_printf_common+0xac>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008854:	3501      	adds	r5, #1
 8008856:	e7c6      	b.n	80087e6 <_printf_common+0x3e>
 8008858:	18e1      	adds	r1, r4, r3
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	2030      	movs	r0, #48	; 0x30
 800885e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008862:	4422      	add	r2, r4
 8008864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800886c:	3302      	adds	r3, #2
 800886e:	e7c7      	b.n	8008800 <_printf_common+0x58>
 8008870:	2301      	movs	r3, #1
 8008872:	4622      	mov	r2, r4
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d0e6      	beq.n	800884c <_printf_common+0xa4>
 800887e:	3601      	adds	r6, #1
 8008880:	e7d9      	b.n	8008836 <_printf_common+0x8e>
	...

08008884 <_printf_i>:
 8008884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008888:	7e0f      	ldrb	r7, [r1, #24]
 800888a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800888c:	2f78      	cmp	r7, #120	; 0x78
 800888e:	4691      	mov	r9, r2
 8008890:	4680      	mov	r8, r0
 8008892:	460c      	mov	r4, r1
 8008894:	469a      	mov	sl, r3
 8008896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800889a:	d807      	bhi.n	80088ac <_printf_i+0x28>
 800889c:	2f62      	cmp	r7, #98	; 0x62
 800889e:	d80a      	bhi.n	80088b6 <_printf_i+0x32>
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	f000 80d8 	beq.w	8008a56 <_printf_i+0x1d2>
 80088a6:	2f58      	cmp	r7, #88	; 0x58
 80088a8:	f000 80a3 	beq.w	80089f2 <_printf_i+0x16e>
 80088ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088b4:	e03a      	b.n	800892c <_printf_i+0xa8>
 80088b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ba:	2b15      	cmp	r3, #21
 80088bc:	d8f6      	bhi.n	80088ac <_printf_i+0x28>
 80088be:	a101      	add	r1, pc, #4	; (adr r1, 80088c4 <_printf_i+0x40>)
 80088c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088c4:	0800891d 	.word	0x0800891d
 80088c8:	08008931 	.word	0x08008931
 80088cc:	080088ad 	.word	0x080088ad
 80088d0:	080088ad 	.word	0x080088ad
 80088d4:	080088ad 	.word	0x080088ad
 80088d8:	080088ad 	.word	0x080088ad
 80088dc:	08008931 	.word	0x08008931
 80088e0:	080088ad 	.word	0x080088ad
 80088e4:	080088ad 	.word	0x080088ad
 80088e8:	080088ad 	.word	0x080088ad
 80088ec:	080088ad 	.word	0x080088ad
 80088f0:	08008a3d 	.word	0x08008a3d
 80088f4:	08008961 	.word	0x08008961
 80088f8:	08008a1f 	.word	0x08008a1f
 80088fc:	080088ad 	.word	0x080088ad
 8008900:	080088ad 	.word	0x080088ad
 8008904:	08008a5f 	.word	0x08008a5f
 8008908:	080088ad 	.word	0x080088ad
 800890c:	08008961 	.word	0x08008961
 8008910:	080088ad 	.word	0x080088ad
 8008914:	080088ad 	.word	0x080088ad
 8008918:	08008a27 	.word	0x08008a27
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	1d1a      	adds	r2, r3, #4
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	602a      	str	r2, [r5, #0]
 8008924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800892c:	2301      	movs	r3, #1
 800892e:	e0a3      	b.n	8008a78 <_printf_i+0x1f4>
 8008930:	6820      	ldr	r0, [r4, #0]
 8008932:	6829      	ldr	r1, [r5, #0]
 8008934:	0606      	lsls	r6, r0, #24
 8008936:	f101 0304 	add.w	r3, r1, #4
 800893a:	d50a      	bpl.n	8008952 <_printf_i+0xce>
 800893c:	680e      	ldr	r6, [r1, #0]
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	2e00      	cmp	r6, #0
 8008942:	da03      	bge.n	800894c <_printf_i+0xc8>
 8008944:	232d      	movs	r3, #45	; 0x2d
 8008946:	4276      	negs	r6, r6
 8008948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800894c:	485e      	ldr	r0, [pc, #376]	; (8008ac8 <_printf_i+0x244>)
 800894e:	230a      	movs	r3, #10
 8008950:	e019      	b.n	8008986 <_printf_i+0x102>
 8008952:	680e      	ldr	r6, [r1, #0]
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	f010 0f40 	tst.w	r0, #64	; 0x40
 800895a:	bf18      	it	ne
 800895c:	b236      	sxthne	r6, r6
 800895e:	e7ef      	b.n	8008940 <_printf_i+0xbc>
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	6820      	ldr	r0, [r4, #0]
 8008964:	1d19      	adds	r1, r3, #4
 8008966:	6029      	str	r1, [r5, #0]
 8008968:	0601      	lsls	r1, r0, #24
 800896a:	d501      	bpl.n	8008970 <_printf_i+0xec>
 800896c:	681e      	ldr	r6, [r3, #0]
 800896e:	e002      	b.n	8008976 <_printf_i+0xf2>
 8008970:	0646      	lsls	r6, r0, #25
 8008972:	d5fb      	bpl.n	800896c <_printf_i+0xe8>
 8008974:	881e      	ldrh	r6, [r3, #0]
 8008976:	4854      	ldr	r0, [pc, #336]	; (8008ac8 <_printf_i+0x244>)
 8008978:	2f6f      	cmp	r7, #111	; 0x6f
 800897a:	bf0c      	ite	eq
 800897c:	2308      	moveq	r3, #8
 800897e:	230a      	movne	r3, #10
 8008980:	2100      	movs	r1, #0
 8008982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008986:	6865      	ldr	r5, [r4, #4]
 8008988:	60a5      	str	r5, [r4, #8]
 800898a:	2d00      	cmp	r5, #0
 800898c:	bfa2      	ittt	ge
 800898e:	6821      	ldrge	r1, [r4, #0]
 8008990:	f021 0104 	bicge.w	r1, r1, #4
 8008994:	6021      	strge	r1, [r4, #0]
 8008996:	b90e      	cbnz	r6, 800899c <_printf_i+0x118>
 8008998:	2d00      	cmp	r5, #0
 800899a:	d04d      	beq.n	8008a38 <_printf_i+0x1b4>
 800899c:	4615      	mov	r5, r2
 800899e:	fbb6 f1f3 	udiv	r1, r6, r3
 80089a2:	fb03 6711 	mls	r7, r3, r1, r6
 80089a6:	5dc7      	ldrb	r7, [r0, r7]
 80089a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089ac:	4637      	mov	r7, r6
 80089ae:	42bb      	cmp	r3, r7
 80089b0:	460e      	mov	r6, r1
 80089b2:	d9f4      	bls.n	800899e <_printf_i+0x11a>
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d10b      	bne.n	80089d0 <_printf_i+0x14c>
 80089b8:	6823      	ldr	r3, [r4, #0]
 80089ba:	07de      	lsls	r6, r3, #31
 80089bc:	d508      	bpl.n	80089d0 <_printf_i+0x14c>
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	6861      	ldr	r1, [r4, #4]
 80089c2:	4299      	cmp	r1, r3
 80089c4:	bfde      	ittt	le
 80089c6:	2330      	movle	r3, #48	; 0x30
 80089c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089d0:	1b52      	subs	r2, r2, r5
 80089d2:	6122      	str	r2, [r4, #16]
 80089d4:	f8cd a000 	str.w	sl, [sp]
 80089d8:	464b      	mov	r3, r9
 80089da:	aa03      	add	r2, sp, #12
 80089dc:	4621      	mov	r1, r4
 80089de:	4640      	mov	r0, r8
 80089e0:	f7ff fee2 	bl	80087a8 <_printf_common>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d14c      	bne.n	8008a82 <_printf_i+0x1fe>
 80089e8:	f04f 30ff 	mov.w	r0, #4294967295
 80089ec:	b004      	add	sp, #16
 80089ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089f2:	4835      	ldr	r0, [pc, #212]	; (8008ac8 <_printf_i+0x244>)
 80089f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089f8:	6829      	ldr	r1, [r5, #0]
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a00:	6029      	str	r1, [r5, #0]
 8008a02:	061d      	lsls	r5, r3, #24
 8008a04:	d514      	bpl.n	8008a30 <_printf_i+0x1ac>
 8008a06:	07df      	lsls	r7, r3, #31
 8008a08:	bf44      	itt	mi
 8008a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a0e:	6023      	strmi	r3, [r4, #0]
 8008a10:	b91e      	cbnz	r6, 8008a1a <_printf_i+0x196>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f023 0320 	bic.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	2310      	movs	r3, #16
 8008a1c:	e7b0      	b.n	8008980 <_printf_i+0xfc>
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f043 0320 	orr.w	r3, r3, #32
 8008a24:	6023      	str	r3, [r4, #0]
 8008a26:	2378      	movs	r3, #120	; 0x78
 8008a28:	4828      	ldr	r0, [pc, #160]	; (8008acc <_printf_i+0x248>)
 8008a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a2e:	e7e3      	b.n	80089f8 <_printf_i+0x174>
 8008a30:	0659      	lsls	r1, r3, #25
 8008a32:	bf48      	it	mi
 8008a34:	b2b6      	uxthmi	r6, r6
 8008a36:	e7e6      	b.n	8008a06 <_printf_i+0x182>
 8008a38:	4615      	mov	r5, r2
 8008a3a:	e7bb      	b.n	80089b4 <_printf_i+0x130>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	6826      	ldr	r6, [r4, #0]
 8008a40:	6961      	ldr	r1, [r4, #20]
 8008a42:	1d18      	adds	r0, r3, #4
 8008a44:	6028      	str	r0, [r5, #0]
 8008a46:	0635      	lsls	r5, r6, #24
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	d501      	bpl.n	8008a50 <_printf_i+0x1cc>
 8008a4c:	6019      	str	r1, [r3, #0]
 8008a4e:	e002      	b.n	8008a56 <_printf_i+0x1d2>
 8008a50:	0670      	lsls	r0, r6, #25
 8008a52:	d5fb      	bpl.n	8008a4c <_printf_i+0x1c8>
 8008a54:	8019      	strh	r1, [r3, #0]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	e7ba      	b.n	80089d4 <_printf_i+0x150>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	1d1a      	adds	r2, r3, #4
 8008a62:	602a      	str	r2, [r5, #0]
 8008a64:	681d      	ldr	r5, [r3, #0]
 8008a66:	6862      	ldr	r2, [r4, #4]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	f7f7 fbb8 	bl	80001e0 <memchr>
 8008a70:	b108      	cbz	r0, 8008a76 <_printf_i+0x1f2>
 8008a72:	1b40      	subs	r0, r0, r5
 8008a74:	6060      	str	r0, [r4, #4]
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a80:	e7a8      	b.n	80089d4 <_printf_i+0x150>
 8008a82:	6923      	ldr	r3, [r4, #16]
 8008a84:	462a      	mov	r2, r5
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d0ab      	beq.n	80089e8 <_printf_i+0x164>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	079b      	lsls	r3, r3, #30
 8008a94:	d413      	bmi.n	8008abe <_printf_i+0x23a>
 8008a96:	68e0      	ldr	r0, [r4, #12]
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	4298      	cmp	r0, r3
 8008a9c:	bfb8      	it	lt
 8008a9e:	4618      	movlt	r0, r3
 8008aa0:	e7a4      	b.n	80089ec <_printf_i+0x168>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	47d0      	blx	sl
 8008aac:	3001      	adds	r0, #1
 8008aae:	d09b      	beq.n	80089e8 <_printf_i+0x164>
 8008ab0:	3501      	adds	r5, #1
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	9903      	ldr	r1, [sp, #12]
 8008ab6:	1a5b      	subs	r3, r3, r1
 8008ab8:	42ab      	cmp	r3, r5
 8008aba:	dcf2      	bgt.n	8008aa2 <_printf_i+0x21e>
 8008abc:	e7eb      	b.n	8008a96 <_printf_i+0x212>
 8008abe:	2500      	movs	r5, #0
 8008ac0:	f104 0619 	add.w	r6, r4, #25
 8008ac4:	e7f5      	b.n	8008ab2 <_printf_i+0x22e>
 8008ac6:	bf00      	nop
 8008ac8:	0800cfd2 	.word	0x0800cfd2
 8008acc:	0800cfe3 	.word	0x0800cfe3

08008ad0 <_sbrk_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4d06      	ldr	r5, [pc, #24]	; (8008aec <_sbrk_r+0x1c>)
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	4608      	mov	r0, r1
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	f7f9 fe54 	bl	8002788 <_sbrk>
 8008ae0:	1c43      	adds	r3, r0, #1
 8008ae2:	d102      	bne.n	8008aea <_sbrk_r+0x1a>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	b103      	cbz	r3, 8008aea <_sbrk_r+0x1a>
 8008ae8:	6023      	str	r3, [r4, #0]
 8008aea:	bd38      	pop	{r3, r4, r5, pc}
 8008aec:	20000454 	.word	0x20000454

08008af0 <siprintf>:
 8008af0:	b40e      	push	{r1, r2, r3}
 8008af2:	b500      	push	{lr}
 8008af4:	b09c      	sub	sp, #112	; 0x70
 8008af6:	ab1d      	add	r3, sp, #116	; 0x74
 8008af8:	9002      	str	r0, [sp, #8]
 8008afa:	9006      	str	r0, [sp, #24]
 8008afc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b00:	4809      	ldr	r0, [pc, #36]	; (8008b28 <siprintf+0x38>)
 8008b02:	9107      	str	r1, [sp, #28]
 8008b04:	9104      	str	r1, [sp, #16]
 8008b06:	4909      	ldr	r1, [pc, #36]	; (8008b2c <siprintf+0x3c>)
 8008b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b0c:	9105      	str	r1, [sp, #20]
 8008b0e:	6800      	ldr	r0, [r0, #0]
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	a902      	add	r1, sp, #8
 8008b14:	f001 fa9a 	bl	800a04c <_svfiprintf_r>
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	b01c      	add	sp, #112	; 0x70
 8008b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b24:	b003      	add	sp, #12
 8008b26:	4770      	bx	lr
 8008b28:	2000001c 	.word	0x2000001c
 8008b2c:	ffff0208 	.word	0xffff0208

08008b30 <quorem>:
 8008b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	6903      	ldr	r3, [r0, #16]
 8008b36:	690c      	ldr	r4, [r1, #16]
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	4607      	mov	r7, r0
 8008b3c:	f2c0 8081 	blt.w	8008c42 <quorem+0x112>
 8008b40:	3c01      	subs	r4, #1
 8008b42:	f101 0814 	add.w	r8, r1, #20
 8008b46:	f100 0514 	add.w	r5, r0, #20
 8008b4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b4e:	9301      	str	r3, [sp, #4]
 8008b50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b64:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b68:	d331      	bcc.n	8008bce <quorem+0x9e>
 8008b6a:	f04f 0e00 	mov.w	lr, #0
 8008b6e:	4640      	mov	r0, r8
 8008b70:	46ac      	mov	ip, r5
 8008b72:	46f2      	mov	sl, lr
 8008b74:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b78:	b293      	uxth	r3, r2
 8008b7a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ebaa 0303 	sub.w	r3, sl, r3
 8008b88:	f8dc a000 	ldr.w	sl, [ip]
 8008b8c:	0c12      	lsrs	r2, r2, #16
 8008b8e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b92:	fb06 e202 	mla	r2, r6, r2, lr
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	9b00      	ldr	r3, [sp, #0]
 8008b9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b9e:	b292      	uxth	r2, r2
 8008ba0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ba4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ba8:	f8bd 3000 	ldrh.w	r3, [sp]
 8008bac:	4581      	cmp	r9, r0
 8008bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb2:	f84c 3b04 	str.w	r3, [ip], #4
 8008bb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bba:	d2db      	bcs.n	8008b74 <quorem+0x44>
 8008bbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008bc0:	b92b      	cbnz	r3, 8008bce <quorem+0x9e>
 8008bc2:	9b01      	ldr	r3, [sp, #4]
 8008bc4:	3b04      	subs	r3, #4
 8008bc6:	429d      	cmp	r5, r3
 8008bc8:	461a      	mov	r2, r3
 8008bca:	d32e      	bcc.n	8008c2a <quorem+0xfa>
 8008bcc:	613c      	str	r4, [r7, #16]
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f001 f8c8 	bl	8009d64 <__mcmp>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	db24      	blt.n	8008c22 <quorem+0xf2>
 8008bd8:	3601      	adds	r6, #1
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f04f 0c00 	mov.w	ip, #0
 8008be0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008be4:	f8d0 e000 	ldr.w	lr, [r0]
 8008be8:	b293      	uxth	r3, r2
 8008bea:	ebac 0303 	sub.w	r3, ip, r3
 8008bee:	0c12      	lsrs	r2, r2, #16
 8008bf0:	fa13 f38e 	uxtah	r3, r3, lr
 8008bf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c02:	45c1      	cmp	r9, r8
 8008c04:	f840 3b04 	str.w	r3, [r0], #4
 8008c08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c0c:	d2e8      	bcs.n	8008be0 <quorem+0xb0>
 8008c0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c16:	b922      	cbnz	r2, 8008c22 <quorem+0xf2>
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	429d      	cmp	r5, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	d30a      	bcc.n	8008c36 <quorem+0x106>
 8008c20:	613c      	str	r4, [r7, #16]
 8008c22:	4630      	mov	r0, r6
 8008c24:	b003      	add	sp, #12
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	3b04      	subs	r3, #4
 8008c2e:	2a00      	cmp	r2, #0
 8008c30:	d1cc      	bne.n	8008bcc <quorem+0x9c>
 8008c32:	3c01      	subs	r4, #1
 8008c34:	e7c7      	b.n	8008bc6 <quorem+0x96>
 8008c36:	6812      	ldr	r2, [r2, #0]
 8008c38:	3b04      	subs	r3, #4
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	d1f0      	bne.n	8008c20 <quorem+0xf0>
 8008c3e:	3c01      	subs	r4, #1
 8008c40:	e7eb      	b.n	8008c1a <quorem+0xea>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e7ee      	b.n	8008c24 <quorem+0xf4>
	...

08008c48 <_dtoa_r>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	ed2d 8b04 	vpush	{d8-d9}
 8008c50:	ec57 6b10 	vmov	r6, r7, d0
 8008c54:	b093      	sub	sp, #76	; 0x4c
 8008c56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c5c:	9106      	str	r1, [sp, #24]
 8008c5e:	ee10 aa10 	vmov	sl, s0
 8008c62:	4604      	mov	r4, r0
 8008c64:	9209      	str	r2, [sp, #36]	; 0x24
 8008c66:	930c      	str	r3, [sp, #48]	; 0x30
 8008c68:	46bb      	mov	fp, r7
 8008c6a:	b975      	cbnz	r5, 8008c8a <_dtoa_r+0x42>
 8008c6c:	2010      	movs	r0, #16
 8008c6e:	f7ff f9d5 	bl	800801c <malloc>
 8008c72:	4602      	mov	r2, r0
 8008c74:	6260      	str	r0, [r4, #36]	; 0x24
 8008c76:	b920      	cbnz	r0, 8008c82 <_dtoa_r+0x3a>
 8008c78:	4ba7      	ldr	r3, [pc, #668]	; (8008f18 <_dtoa_r+0x2d0>)
 8008c7a:	21ea      	movs	r1, #234	; 0xea
 8008c7c:	48a7      	ldr	r0, [pc, #668]	; (8008f1c <_dtoa_r+0x2d4>)
 8008c7e:	f001 fae5 	bl	800a24c <__assert_func>
 8008c82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c86:	6005      	str	r5, [r0, #0]
 8008c88:	60c5      	str	r5, [r0, #12]
 8008c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c8c:	6819      	ldr	r1, [r3, #0]
 8008c8e:	b151      	cbz	r1, 8008ca6 <_dtoa_r+0x5e>
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	604a      	str	r2, [r1, #4]
 8008c94:	2301      	movs	r3, #1
 8008c96:	4093      	lsls	r3, r2
 8008c98:	608b      	str	r3, [r1, #8]
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fe20 	bl	80098e0 <_Bfree>
 8008ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	1e3b      	subs	r3, r7, #0
 8008ca8:	bfaa      	itet	ge
 8008caa:	2300      	movge	r3, #0
 8008cac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008cb0:	f8c8 3000 	strge.w	r3, [r8]
 8008cb4:	4b9a      	ldr	r3, [pc, #616]	; (8008f20 <_dtoa_r+0x2d8>)
 8008cb6:	bfbc      	itt	lt
 8008cb8:	2201      	movlt	r2, #1
 8008cba:	f8c8 2000 	strlt.w	r2, [r8]
 8008cbe:	ea33 030b 	bics.w	r3, r3, fp
 8008cc2:	d11b      	bne.n	8008cfc <_dtoa_r+0xb4>
 8008cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cd0:	4333      	orrs	r3, r6
 8008cd2:	f000 8592 	beq.w	80097fa <_dtoa_r+0xbb2>
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	b963      	cbnz	r3, 8008cf4 <_dtoa_r+0xac>
 8008cda:	4b92      	ldr	r3, [pc, #584]	; (8008f24 <_dtoa_r+0x2dc>)
 8008cdc:	e022      	b.n	8008d24 <_dtoa_r+0xdc>
 8008cde:	4b92      	ldr	r3, [pc, #584]	; (8008f28 <_dtoa_r+0x2e0>)
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	9801      	ldr	r0, [sp, #4]
 8008cea:	b013      	add	sp, #76	; 0x4c
 8008cec:	ecbd 8b04 	vpop	{d8-d9}
 8008cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf4:	4b8b      	ldr	r3, [pc, #556]	; (8008f24 <_dtoa_r+0x2dc>)
 8008cf6:	9301      	str	r3, [sp, #4]
 8008cf8:	3303      	adds	r3, #3
 8008cfa:	e7f3      	b.n	8008ce4 <_dtoa_r+0x9c>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4650      	mov	r0, sl
 8008d02:	4659      	mov	r1, fp
 8008d04:	f7f7 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d08:	ec4b ab19 	vmov	d9, sl, fp
 8008d0c:	4680      	mov	r8, r0
 8008d0e:	b158      	cbz	r0, 8008d28 <_dtoa_r+0xe0>
 8008d10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d12:	2301      	movs	r3, #1
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 856b 	beq.w	80097f4 <_dtoa_r+0xbac>
 8008d1e:	4883      	ldr	r0, [pc, #524]	; (8008f2c <_dtoa_r+0x2e4>)
 8008d20:	6018      	str	r0, [r3, #0]
 8008d22:	1e43      	subs	r3, r0, #1
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	e7df      	b.n	8008ce8 <_dtoa_r+0xa0>
 8008d28:	ec4b ab10 	vmov	d0, sl, fp
 8008d2c:	aa10      	add	r2, sp, #64	; 0x40
 8008d2e:	a911      	add	r1, sp, #68	; 0x44
 8008d30:	4620      	mov	r0, r4
 8008d32:	f001 f8bd 	bl	8009eb0 <__d2b>
 8008d36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008d3a:	ee08 0a10 	vmov	s16, r0
 8008d3e:	2d00      	cmp	r5, #0
 8008d40:	f000 8084 	beq.w	8008e4c <_dtoa_r+0x204>
 8008d44:	ee19 3a90 	vmov	r3, s19
 8008d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d50:	4656      	mov	r6, sl
 8008d52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d5e:	4b74      	ldr	r3, [pc, #464]	; (8008f30 <_dtoa_r+0x2e8>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fa8f 	bl	8000288 <__aeabi_dsub>
 8008d6a:	a365      	add	r3, pc, #404	; (adr r3, 8008f00 <_dtoa_r+0x2b8>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	f7f7 fc42 	bl	80005f8 <__aeabi_dmul>
 8008d74:	a364      	add	r3, pc, #400	; (adr r3, 8008f08 <_dtoa_r+0x2c0>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fa87 	bl	800028c <__adddf3>
 8008d7e:	4606      	mov	r6, r0
 8008d80:	4628      	mov	r0, r5
 8008d82:	460f      	mov	r7, r1
 8008d84:	f7f7 fbce 	bl	8000524 <__aeabi_i2d>
 8008d88:	a361      	add	r3, pc, #388	; (adr r3, 8008f10 <_dtoa_r+0x2c8>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fc33 	bl	80005f8 <__aeabi_dmul>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4630      	mov	r0, r6
 8008d98:	4639      	mov	r1, r7
 8008d9a:	f7f7 fa77 	bl	800028c <__adddf3>
 8008d9e:	4606      	mov	r6, r0
 8008da0:	460f      	mov	r7, r1
 8008da2:	f7f7 fed9 	bl	8000b58 <__aeabi_d2iz>
 8008da6:	2200      	movs	r2, #0
 8008da8:	9000      	str	r0, [sp, #0]
 8008daa:	2300      	movs	r3, #0
 8008dac:	4630      	mov	r0, r6
 8008dae:	4639      	mov	r1, r7
 8008db0:	f7f7 fe94 	bl	8000adc <__aeabi_dcmplt>
 8008db4:	b150      	cbz	r0, 8008dcc <_dtoa_r+0x184>
 8008db6:	9800      	ldr	r0, [sp, #0]
 8008db8:	f7f7 fbb4 	bl	8000524 <__aeabi_i2d>
 8008dbc:	4632      	mov	r2, r6
 8008dbe:	463b      	mov	r3, r7
 8008dc0:	f7f7 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dc4:	b910      	cbnz	r0, 8008dcc <_dtoa_r+0x184>
 8008dc6:	9b00      	ldr	r3, [sp, #0]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	9b00      	ldr	r3, [sp, #0]
 8008dce:	2b16      	cmp	r3, #22
 8008dd0:	d85a      	bhi.n	8008e88 <_dtoa_r+0x240>
 8008dd2:	9a00      	ldr	r2, [sp, #0]
 8008dd4:	4b57      	ldr	r3, [pc, #348]	; (8008f34 <_dtoa_r+0x2ec>)
 8008dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dde:	ec51 0b19 	vmov	r0, r1, d9
 8008de2:	f7f7 fe7b 	bl	8000adc <__aeabi_dcmplt>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d050      	beq.n	8008e8c <_dtoa_r+0x244>
 8008dea:	9b00      	ldr	r3, [sp, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	2300      	movs	r3, #0
 8008df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008df4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008df6:	1b5d      	subs	r5, r3, r5
 8008df8:	1e6b      	subs	r3, r5, #1
 8008dfa:	9305      	str	r3, [sp, #20]
 8008dfc:	bf45      	ittet	mi
 8008dfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e02:	9304      	strmi	r3, [sp, #16]
 8008e04:	2300      	movpl	r3, #0
 8008e06:	2300      	movmi	r3, #0
 8008e08:	bf4c      	ite	mi
 8008e0a:	9305      	strmi	r3, [sp, #20]
 8008e0c:	9304      	strpl	r3, [sp, #16]
 8008e0e:	9b00      	ldr	r3, [sp, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	db3d      	blt.n	8008e90 <_dtoa_r+0x248>
 8008e14:	9b05      	ldr	r3, [sp, #20]
 8008e16:	9a00      	ldr	r2, [sp, #0]
 8008e18:	920a      	str	r2, [sp, #40]	; 0x28
 8008e1a:	4413      	add	r3, r2
 8008e1c:	9305      	str	r3, [sp, #20]
 8008e1e:	2300      	movs	r3, #0
 8008e20:	9307      	str	r3, [sp, #28]
 8008e22:	9b06      	ldr	r3, [sp, #24]
 8008e24:	2b09      	cmp	r3, #9
 8008e26:	f200 8089 	bhi.w	8008f3c <_dtoa_r+0x2f4>
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	bfc4      	itt	gt
 8008e2e:	3b04      	subgt	r3, #4
 8008e30:	9306      	strgt	r3, [sp, #24]
 8008e32:	9b06      	ldr	r3, [sp, #24]
 8008e34:	f1a3 0302 	sub.w	r3, r3, #2
 8008e38:	bfcc      	ite	gt
 8008e3a:	2500      	movgt	r5, #0
 8008e3c:	2501      	movle	r5, #1
 8008e3e:	2b03      	cmp	r3, #3
 8008e40:	f200 8087 	bhi.w	8008f52 <_dtoa_r+0x30a>
 8008e44:	e8df f003 	tbb	[pc, r3]
 8008e48:	59383a2d 	.word	0x59383a2d
 8008e4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e50:	441d      	add	r5, r3
 8008e52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	bfc1      	itttt	gt
 8008e5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e62:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e6a:	bfda      	itte	le
 8008e6c:	f1c3 0320 	rsble	r3, r3, #32
 8008e70:	fa06 f003 	lslle.w	r0, r6, r3
 8008e74:	4318      	orrgt	r0, r3
 8008e76:	f7f7 fb45 	bl	8000504 <__aeabi_ui2d>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e82:	3d01      	subs	r5, #1
 8008e84:	930e      	str	r3, [sp, #56]	; 0x38
 8008e86:	e76a      	b.n	8008d5e <_dtoa_r+0x116>
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e7b2      	b.n	8008df2 <_dtoa_r+0x1aa>
 8008e8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e8e:	e7b1      	b.n	8008df4 <_dtoa_r+0x1ac>
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	9a00      	ldr	r2, [sp, #0]
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	9304      	str	r3, [sp, #16]
 8008e98:	4253      	negs	r3, r2
 8008e9a:	9307      	str	r3, [sp, #28]
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ea0:	e7bf      	b.n	8008e22 <_dtoa_r+0x1da>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9308      	str	r3, [sp, #32]
 8008ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dc55      	bgt.n	8008f58 <_dtoa_r+0x310>
 8008eac:	2301      	movs	r3, #1
 8008eae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8008eb6:	e00c      	b.n	8008ed2 <_dtoa_r+0x28a>
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e7f3      	b.n	8008ea4 <_dtoa_r+0x25c>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ec0:	9308      	str	r3, [sp, #32]
 8008ec2:	9b00      	ldr	r3, [sp, #0]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	9302      	str	r3, [sp, #8]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	9303      	str	r3, [sp, #12]
 8008ece:	bfb8      	it	lt
 8008ed0:	2301      	movlt	r3, #1
 8008ed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	6042      	str	r2, [r0, #4]
 8008ed8:	2204      	movs	r2, #4
 8008eda:	f102 0614 	add.w	r6, r2, #20
 8008ede:	429e      	cmp	r6, r3
 8008ee0:	6841      	ldr	r1, [r0, #4]
 8008ee2:	d93d      	bls.n	8008f60 <_dtoa_r+0x318>
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fcbb 	bl	8009860 <_Balloc>
 8008eea:	9001      	str	r0, [sp, #4]
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d13b      	bne.n	8008f68 <_dtoa_r+0x320>
 8008ef0:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <_dtoa_r+0x2f0>)
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ef8:	e6c0      	b.n	8008c7c <_dtoa_r+0x34>
 8008efa:	2301      	movs	r3, #1
 8008efc:	e7df      	b.n	8008ebe <_dtoa_r+0x276>
 8008efe:	bf00      	nop
 8008f00:	636f4361 	.word	0x636f4361
 8008f04:	3fd287a7 	.word	0x3fd287a7
 8008f08:	8b60c8b3 	.word	0x8b60c8b3
 8008f0c:	3fc68a28 	.word	0x3fc68a28
 8008f10:	509f79fb 	.word	0x509f79fb
 8008f14:	3fd34413 	.word	0x3fd34413
 8008f18:	0800d001 	.word	0x0800d001
 8008f1c:	0800d018 	.word	0x0800d018
 8008f20:	7ff00000 	.word	0x7ff00000
 8008f24:	0800cffd 	.word	0x0800cffd
 8008f28:	0800cff4 	.word	0x0800cff4
 8008f2c:	0800cfd1 	.word	0x0800cfd1
 8008f30:	3ff80000 	.word	0x3ff80000
 8008f34:	0800d108 	.word	0x0800d108
 8008f38:	0800d073 	.word	0x0800d073
 8008f3c:	2501      	movs	r5, #1
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9306      	str	r3, [sp, #24]
 8008f42:	9508      	str	r5, [sp, #32]
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2312      	movs	r3, #18
 8008f50:	e7b0      	b.n	8008eb4 <_dtoa_r+0x26c>
 8008f52:	2301      	movs	r3, #1
 8008f54:	9308      	str	r3, [sp, #32]
 8008f56:	e7f5      	b.n	8008f44 <_dtoa_r+0x2fc>
 8008f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f5e:	e7b8      	b.n	8008ed2 <_dtoa_r+0x28a>
 8008f60:	3101      	adds	r1, #1
 8008f62:	6041      	str	r1, [r0, #4]
 8008f64:	0052      	lsls	r2, r2, #1
 8008f66:	e7b8      	b.n	8008eda <_dtoa_r+0x292>
 8008f68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f6a:	9a01      	ldr	r2, [sp, #4]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	9b03      	ldr	r3, [sp, #12]
 8008f70:	2b0e      	cmp	r3, #14
 8008f72:	f200 809d 	bhi.w	80090b0 <_dtoa_r+0x468>
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	f000 809a 	beq.w	80090b0 <_dtoa_r+0x468>
 8008f7c:	9b00      	ldr	r3, [sp, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd32      	ble.n	8008fe8 <_dtoa_r+0x3a0>
 8008f82:	4ab7      	ldr	r2, [pc, #732]	; (8009260 <_dtoa_r+0x618>)
 8008f84:	f003 030f 	and.w	r3, r3, #15
 8008f88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f90:	9b00      	ldr	r3, [sp, #0]
 8008f92:	05d8      	lsls	r0, r3, #23
 8008f94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f98:	d516      	bpl.n	8008fc8 <_dtoa_r+0x380>
 8008f9a:	4bb2      	ldr	r3, [pc, #712]	; (8009264 <_dtoa_r+0x61c>)
 8008f9c:	ec51 0b19 	vmov	r0, r1, d9
 8008fa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fa4:	f7f7 fc52 	bl	800084c <__aeabi_ddiv>
 8008fa8:	f007 070f 	and.w	r7, r7, #15
 8008fac:	4682      	mov	sl, r0
 8008fae:	468b      	mov	fp, r1
 8008fb0:	2503      	movs	r5, #3
 8008fb2:	4eac      	ldr	r6, [pc, #688]	; (8009264 <_dtoa_r+0x61c>)
 8008fb4:	b957      	cbnz	r7, 8008fcc <_dtoa_r+0x384>
 8008fb6:	4642      	mov	r2, r8
 8008fb8:	464b      	mov	r3, r9
 8008fba:	4650      	mov	r0, sl
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	f7f7 fc45 	bl	800084c <__aeabi_ddiv>
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	468b      	mov	fp, r1
 8008fc6:	e028      	b.n	800901a <_dtoa_r+0x3d2>
 8008fc8:	2502      	movs	r5, #2
 8008fca:	e7f2      	b.n	8008fb2 <_dtoa_r+0x36a>
 8008fcc:	07f9      	lsls	r1, r7, #31
 8008fce:	d508      	bpl.n	8008fe2 <_dtoa_r+0x39a>
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	4649      	mov	r1, r9
 8008fd4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fd8:	f7f7 fb0e 	bl	80005f8 <__aeabi_dmul>
 8008fdc:	3501      	adds	r5, #1
 8008fde:	4680      	mov	r8, r0
 8008fe0:	4689      	mov	r9, r1
 8008fe2:	107f      	asrs	r7, r7, #1
 8008fe4:	3608      	adds	r6, #8
 8008fe6:	e7e5      	b.n	8008fb4 <_dtoa_r+0x36c>
 8008fe8:	f000 809b 	beq.w	8009122 <_dtoa_r+0x4da>
 8008fec:	9b00      	ldr	r3, [sp, #0]
 8008fee:	4f9d      	ldr	r7, [pc, #628]	; (8009264 <_dtoa_r+0x61c>)
 8008ff0:	425e      	negs	r6, r3
 8008ff2:	4b9b      	ldr	r3, [pc, #620]	; (8009260 <_dtoa_r+0x618>)
 8008ff4:	f006 020f 	and.w	r2, r6, #15
 8008ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	ec51 0b19 	vmov	r0, r1, d9
 8009004:	f7f7 faf8 	bl	80005f8 <__aeabi_dmul>
 8009008:	1136      	asrs	r6, r6, #4
 800900a:	4682      	mov	sl, r0
 800900c:	468b      	mov	fp, r1
 800900e:	2300      	movs	r3, #0
 8009010:	2502      	movs	r5, #2
 8009012:	2e00      	cmp	r6, #0
 8009014:	d17a      	bne.n	800910c <_dtoa_r+0x4c4>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1d3      	bne.n	8008fc2 <_dtoa_r+0x37a>
 800901a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 8082 	beq.w	8009126 <_dtoa_r+0x4de>
 8009022:	4b91      	ldr	r3, [pc, #580]	; (8009268 <_dtoa_r+0x620>)
 8009024:	2200      	movs	r2, #0
 8009026:	4650      	mov	r0, sl
 8009028:	4659      	mov	r1, fp
 800902a:	f7f7 fd57 	bl	8000adc <__aeabi_dcmplt>
 800902e:	2800      	cmp	r0, #0
 8009030:	d079      	beq.n	8009126 <_dtoa_r+0x4de>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d076      	beq.n	8009126 <_dtoa_r+0x4de>
 8009038:	9b02      	ldr	r3, [sp, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	dd36      	ble.n	80090ac <_dtoa_r+0x464>
 800903e:	9b00      	ldr	r3, [sp, #0]
 8009040:	4650      	mov	r0, sl
 8009042:	4659      	mov	r1, fp
 8009044:	1e5f      	subs	r7, r3, #1
 8009046:	2200      	movs	r2, #0
 8009048:	4b88      	ldr	r3, [pc, #544]	; (800926c <_dtoa_r+0x624>)
 800904a:	f7f7 fad5 	bl	80005f8 <__aeabi_dmul>
 800904e:	9e02      	ldr	r6, [sp, #8]
 8009050:	4682      	mov	sl, r0
 8009052:	468b      	mov	fp, r1
 8009054:	3501      	adds	r5, #1
 8009056:	4628      	mov	r0, r5
 8009058:	f7f7 fa64 	bl	8000524 <__aeabi_i2d>
 800905c:	4652      	mov	r2, sl
 800905e:	465b      	mov	r3, fp
 8009060:	f7f7 faca 	bl	80005f8 <__aeabi_dmul>
 8009064:	4b82      	ldr	r3, [pc, #520]	; (8009270 <_dtoa_r+0x628>)
 8009066:	2200      	movs	r2, #0
 8009068:	f7f7 f910 	bl	800028c <__adddf3>
 800906c:	46d0      	mov	r8, sl
 800906e:	46d9      	mov	r9, fp
 8009070:	4682      	mov	sl, r0
 8009072:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009076:	2e00      	cmp	r6, #0
 8009078:	d158      	bne.n	800912c <_dtoa_r+0x4e4>
 800907a:	4b7e      	ldr	r3, [pc, #504]	; (8009274 <_dtoa_r+0x62c>)
 800907c:	2200      	movs	r2, #0
 800907e:	4640      	mov	r0, r8
 8009080:	4649      	mov	r1, r9
 8009082:	f7f7 f901 	bl	8000288 <__aeabi_dsub>
 8009086:	4652      	mov	r2, sl
 8009088:	465b      	mov	r3, fp
 800908a:	4680      	mov	r8, r0
 800908c:	4689      	mov	r9, r1
 800908e:	f7f7 fd43 	bl	8000b18 <__aeabi_dcmpgt>
 8009092:	2800      	cmp	r0, #0
 8009094:	f040 8295 	bne.w	80095c2 <_dtoa_r+0x97a>
 8009098:	4652      	mov	r2, sl
 800909a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800909e:	4640      	mov	r0, r8
 80090a0:	4649      	mov	r1, r9
 80090a2:	f7f7 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f040 8289 	bne.w	80095be <_dtoa_r+0x976>
 80090ac:	ec5b ab19 	vmov	sl, fp, d9
 80090b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f2c0 8148 	blt.w	8009348 <_dtoa_r+0x700>
 80090b8:	9a00      	ldr	r2, [sp, #0]
 80090ba:	2a0e      	cmp	r2, #14
 80090bc:	f300 8144 	bgt.w	8009348 <_dtoa_r+0x700>
 80090c0:	4b67      	ldr	r3, [pc, #412]	; (8009260 <_dtoa_r+0x618>)
 80090c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f280 80d5 	bge.w	800927c <_dtoa_r+0x634>
 80090d2:	9b03      	ldr	r3, [sp, #12]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f300 80d1 	bgt.w	800927c <_dtoa_r+0x634>
 80090da:	f040 826f 	bne.w	80095bc <_dtoa_r+0x974>
 80090de:	4b65      	ldr	r3, [pc, #404]	; (8009274 <_dtoa_r+0x62c>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 fa87 	bl	80005f8 <__aeabi_dmul>
 80090ea:	4652      	mov	r2, sl
 80090ec:	465b      	mov	r3, fp
 80090ee:	f7f7 fd09 	bl	8000b04 <__aeabi_dcmpge>
 80090f2:	9e03      	ldr	r6, [sp, #12]
 80090f4:	4637      	mov	r7, r6
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f040 8245 	bne.w	8009586 <_dtoa_r+0x93e>
 80090fc:	9d01      	ldr	r5, [sp, #4]
 80090fe:	2331      	movs	r3, #49	; 0x31
 8009100:	f805 3b01 	strb.w	r3, [r5], #1
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	3301      	adds	r3, #1
 8009108:	9300      	str	r3, [sp, #0]
 800910a:	e240      	b.n	800958e <_dtoa_r+0x946>
 800910c:	07f2      	lsls	r2, r6, #31
 800910e:	d505      	bpl.n	800911c <_dtoa_r+0x4d4>
 8009110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009114:	f7f7 fa70 	bl	80005f8 <__aeabi_dmul>
 8009118:	3501      	adds	r5, #1
 800911a:	2301      	movs	r3, #1
 800911c:	1076      	asrs	r6, r6, #1
 800911e:	3708      	adds	r7, #8
 8009120:	e777      	b.n	8009012 <_dtoa_r+0x3ca>
 8009122:	2502      	movs	r5, #2
 8009124:	e779      	b.n	800901a <_dtoa_r+0x3d2>
 8009126:	9f00      	ldr	r7, [sp, #0]
 8009128:	9e03      	ldr	r6, [sp, #12]
 800912a:	e794      	b.n	8009056 <_dtoa_r+0x40e>
 800912c:	9901      	ldr	r1, [sp, #4]
 800912e:	4b4c      	ldr	r3, [pc, #304]	; (8009260 <_dtoa_r+0x618>)
 8009130:	4431      	add	r1, r6
 8009132:	910d      	str	r1, [sp, #52]	; 0x34
 8009134:	9908      	ldr	r1, [sp, #32]
 8009136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800913a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800913e:	2900      	cmp	r1, #0
 8009140:	d043      	beq.n	80091ca <_dtoa_r+0x582>
 8009142:	494d      	ldr	r1, [pc, #308]	; (8009278 <_dtoa_r+0x630>)
 8009144:	2000      	movs	r0, #0
 8009146:	f7f7 fb81 	bl	800084c <__aeabi_ddiv>
 800914a:	4652      	mov	r2, sl
 800914c:	465b      	mov	r3, fp
 800914e:	f7f7 f89b 	bl	8000288 <__aeabi_dsub>
 8009152:	9d01      	ldr	r5, [sp, #4]
 8009154:	4682      	mov	sl, r0
 8009156:	468b      	mov	fp, r1
 8009158:	4649      	mov	r1, r9
 800915a:	4640      	mov	r0, r8
 800915c:	f7f7 fcfc 	bl	8000b58 <__aeabi_d2iz>
 8009160:	4606      	mov	r6, r0
 8009162:	f7f7 f9df 	bl	8000524 <__aeabi_i2d>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 f88b 	bl	8000288 <__aeabi_dsub>
 8009172:	3630      	adds	r6, #48	; 0x30
 8009174:	f805 6b01 	strb.w	r6, [r5], #1
 8009178:	4652      	mov	r2, sl
 800917a:	465b      	mov	r3, fp
 800917c:	4680      	mov	r8, r0
 800917e:	4689      	mov	r9, r1
 8009180:	f7f7 fcac 	bl	8000adc <__aeabi_dcmplt>
 8009184:	2800      	cmp	r0, #0
 8009186:	d163      	bne.n	8009250 <_dtoa_r+0x608>
 8009188:	4642      	mov	r2, r8
 800918a:	464b      	mov	r3, r9
 800918c:	4936      	ldr	r1, [pc, #216]	; (8009268 <_dtoa_r+0x620>)
 800918e:	2000      	movs	r0, #0
 8009190:	f7f7 f87a 	bl	8000288 <__aeabi_dsub>
 8009194:	4652      	mov	r2, sl
 8009196:	465b      	mov	r3, fp
 8009198:	f7f7 fca0 	bl	8000adc <__aeabi_dcmplt>
 800919c:	2800      	cmp	r0, #0
 800919e:	f040 80b5 	bne.w	800930c <_dtoa_r+0x6c4>
 80091a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a4:	429d      	cmp	r5, r3
 80091a6:	d081      	beq.n	80090ac <_dtoa_r+0x464>
 80091a8:	4b30      	ldr	r3, [pc, #192]	; (800926c <_dtoa_r+0x624>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	4650      	mov	r0, sl
 80091ae:	4659      	mov	r1, fp
 80091b0:	f7f7 fa22 	bl	80005f8 <__aeabi_dmul>
 80091b4:	4b2d      	ldr	r3, [pc, #180]	; (800926c <_dtoa_r+0x624>)
 80091b6:	4682      	mov	sl, r0
 80091b8:	468b      	mov	fp, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	2200      	movs	r2, #0
 80091c0:	f7f7 fa1a 	bl	80005f8 <__aeabi_dmul>
 80091c4:	4680      	mov	r8, r0
 80091c6:	4689      	mov	r9, r1
 80091c8:	e7c6      	b.n	8009158 <_dtoa_r+0x510>
 80091ca:	4650      	mov	r0, sl
 80091cc:	4659      	mov	r1, fp
 80091ce:	f7f7 fa13 	bl	80005f8 <__aeabi_dmul>
 80091d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091d4:	9d01      	ldr	r5, [sp, #4]
 80091d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091d8:	4682      	mov	sl, r0
 80091da:	468b      	mov	fp, r1
 80091dc:	4649      	mov	r1, r9
 80091de:	4640      	mov	r0, r8
 80091e0:	f7f7 fcba 	bl	8000b58 <__aeabi_d2iz>
 80091e4:	4606      	mov	r6, r0
 80091e6:	f7f7 f99d 	bl	8000524 <__aeabi_i2d>
 80091ea:	3630      	adds	r6, #48	; 0x30
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4640      	mov	r0, r8
 80091f2:	4649      	mov	r1, r9
 80091f4:	f7f7 f848 	bl	8000288 <__aeabi_dsub>
 80091f8:	f805 6b01 	strb.w	r6, [r5], #1
 80091fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091fe:	429d      	cmp	r5, r3
 8009200:	4680      	mov	r8, r0
 8009202:	4689      	mov	r9, r1
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	d124      	bne.n	8009254 <_dtoa_r+0x60c>
 800920a:	4b1b      	ldr	r3, [pc, #108]	; (8009278 <_dtoa_r+0x630>)
 800920c:	4650      	mov	r0, sl
 800920e:	4659      	mov	r1, fp
 8009210:	f7f7 f83c 	bl	800028c <__adddf3>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8009220:	2800      	cmp	r0, #0
 8009222:	d173      	bne.n	800930c <_dtoa_r+0x6c4>
 8009224:	4652      	mov	r2, sl
 8009226:	465b      	mov	r3, fp
 8009228:	4913      	ldr	r1, [pc, #76]	; (8009278 <_dtoa_r+0x630>)
 800922a:	2000      	movs	r0, #0
 800922c:	f7f7 f82c 	bl	8000288 <__aeabi_dsub>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	f7f7 fc50 	bl	8000adc <__aeabi_dcmplt>
 800923c:	2800      	cmp	r0, #0
 800923e:	f43f af35 	beq.w	80090ac <_dtoa_r+0x464>
 8009242:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009244:	1e6b      	subs	r3, r5, #1
 8009246:	930f      	str	r3, [sp, #60]	; 0x3c
 8009248:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800924c:	2b30      	cmp	r3, #48	; 0x30
 800924e:	d0f8      	beq.n	8009242 <_dtoa_r+0x5fa>
 8009250:	9700      	str	r7, [sp, #0]
 8009252:	e049      	b.n	80092e8 <_dtoa_r+0x6a0>
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <_dtoa_r+0x624>)
 8009256:	f7f7 f9cf 	bl	80005f8 <__aeabi_dmul>
 800925a:	4680      	mov	r8, r0
 800925c:	4689      	mov	r9, r1
 800925e:	e7bd      	b.n	80091dc <_dtoa_r+0x594>
 8009260:	0800d108 	.word	0x0800d108
 8009264:	0800d0e0 	.word	0x0800d0e0
 8009268:	3ff00000 	.word	0x3ff00000
 800926c:	40240000 	.word	0x40240000
 8009270:	401c0000 	.word	0x401c0000
 8009274:	40140000 	.word	0x40140000
 8009278:	3fe00000 	.word	0x3fe00000
 800927c:	9d01      	ldr	r5, [sp, #4]
 800927e:	4656      	mov	r6, sl
 8009280:	465f      	mov	r7, fp
 8009282:	4642      	mov	r2, r8
 8009284:	464b      	mov	r3, r9
 8009286:	4630      	mov	r0, r6
 8009288:	4639      	mov	r1, r7
 800928a:	f7f7 fadf 	bl	800084c <__aeabi_ddiv>
 800928e:	f7f7 fc63 	bl	8000b58 <__aeabi_d2iz>
 8009292:	4682      	mov	sl, r0
 8009294:	f7f7 f946 	bl	8000524 <__aeabi_i2d>
 8009298:	4642      	mov	r2, r8
 800929a:	464b      	mov	r3, r9
 800929c:	f7f7 f9ac 	bl	80005f8 <__aeabi_dmul>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80092ac:	f7f6 ffec 	bl	8000288 <__aeabi_dsub>
 80092b0:	f805 6b01 	strb.w	r6, [r5], #1
 80092b4:	9e01      	ldr	r6, [sp, #4]
 80092b6:	9f03      	ldr	r7, [sp, #12]
 80092b8:	1bae      	subs	r6, r5, r6
 80092ba:	42b7      	cmp	r7, r6
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	d135      	bne.n	800932e <_dtoa_r+0x6e6>
 80092c2:	f7f6 ffe3 	bl	800028c <__adddf3>
 80092c6:	4642      	mov	r2, r8
 80092c8:	464b      	mov	r3, r9
 80092ca:	4606      	mov	r6, r0
 80092cc:	460f      	mov	r7, r1
 80092ce:	f7f7 fc23 	bl	8000b18 <__aeabi_dcmpgt>
 80092d2:	b9d0      	cbnz	r0, 800930a <_dtoa_r+0x6c2>
 80092d4:	4642      	mov	r2, r8
 80092d6:	464b      	mov	r3, r9
 80092d8:	4630      	mov	r0, r6
 80092da:	4639      	mov	r1, r7
 80092dc:	f7f7 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80092e0:	b110      	cbz	r0, 80092e8 <_dtoa_r+0x6a0>
 80092e2:	f01a 0f01 	tst.w	sl, #1
 80092e6:	d110      	bne.n	800930a <_dtoa_r+0x6c2>
 80092e8:	4620      	mov	r0, r4
 80092ea:	ee18 1a10 	vmov	r1, s16
 80092ee:	f000 faf7 	bl	80098e0 <_Bfree>
 80092f2:	2300      	movs	r3, #0
 80092f4:	9800      	ldr	r0, [sp, #0]
 80092f6:	702b      	strb	r3, [r5, #0]
 80092f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092fa:	3001      	adds	r0, #1
 80092fc:	6018      	str	r0, [r3, #0]
 80092fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009300:	2b00      	cmp	r3, #0
 8009302:	f43f acf1 	beq.w	8008ce8 <_dtoa_r+0xa0>
 8009306:	601d      	str	r5, [r3, #0]
 8009308:	e4ee      	b.n	8008ce8 <_dtoa_r+0xa0>
 800930a:	9f00      	ldr	r7, [sp, #0]
 800930c:	462b      	mov	r3, r5
 800930e:	461d      	mov	r5, r3
 8009310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009314:	2a39      	cmp	r2, #57	; 0x39
 8009316:	d106      	bne.n	8009326 <_dtoa_r+0x6de>
 8009318:	9a01      	ldr	r2, [sp, #4]
 800931a:	429a      	cmp	r2, r3
 800931c:	d1f7      	bne.n	800930e <_dtoa_r+0x6c6>
 800931e:	9901      	ldr	r1, [sp, #4]
 8009320:	2230      	movs	r2, #48	; 0x30
 8009322:	3701      	adds	r7, #1
 8009324:	700a      	strb	r2, [r1, #0]
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	3201      	adds	r2, #1
 800932a:	701a      	strb	r2, [r3, #0]
 800932c:	e790      	b.n	8009250 <_dtoa_r+0x608>
 800932e:	4ba6      	ldr	r3, [pc, #664]	; (80095c8 <_dtoa_r+0x980>)
 8009330:	2200      	movs	r2, #0
 8009332:	f7f7 f961 	bl	80005f8 <__aeabi_dmul>
 8009336:	2200      	movs	r2, #0
 8009338:	2300      	movs	r3, #0
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	f7f7 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009342:	2800      	cmp	r0, #0
 8009344:	d09d      	beq.n	8009282 <_dtoa_r+0x63a>
 8009346:	e7cf      	b.n	80092e8 <_dtoa_r+0x6a0>
 8009348:	9a08      	ldr	r2, [sp, #32]
 800934a:	2a00      	cmp	r2, #0
 800934c:	f000 80d7 	beq.w	80094fe <_dtoa_r+0x8b6>
 8009350:	9a06      	ldr	r2, [sp, #24]
 8009352:	2a01      	cmp	r2, #1
 8009354:	f300 80ba 	bgt.w	80094cc <_dtoa_r+0x884>
 8009358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800935a:	2a00      	cmp	r2, #0
 800935c:	f000 80b2 	beq.w	80094c4 <_dtoa_r+0x87c>
 8009360:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009364:	9e07      	ldr	r6, [sp, #28]
 8009366:	9d04      	ldr	r5, [sp, #16]
 8009368:	9a04      	ldr	r2, [sp, #16]
 800936a:	441a      	add	r2, r3
 800936c:	9204      	str	r2, [sp, #16]
 800936e:	9a05      	ldr	r2, [sp, #20]
 8009370:	2101      	movs	r1, #1
 8009372:	441a      	add	r2, r3
 8009374:	4620      	mov	r0, r4
 8009376:	9205      	str	r2, [sp, #20]
 8009378:	f000 fb6a 	bl	8009a50 <__i2b>
 800937c:	4607      	mov	r7, r0
 800937e:	2d00      	cmp	r5, #0
 8009380:	dd0c      	ble.n	800939c <_dtoa_r+0x754>
 8009382:	9b05      	ldr	r3, [sp, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	dd09      	ble.n	800939c <_dtoa_r+0x754>
 8009388:	42ab      	cmp	r3, r5
 800938a:	9a04      	ldr	r2, [sp, #16]
 800938c:	bfa8      	it	ge
 800938e:	462b      	movge	r3, r5
 8009390:	1ad2      	subs	r2, r2, r3
 8009392:	9204      	str	r2, [sp, #16]
 8009394:	9a05      	ldr	r2, [sp, #20]
 8009396:	1aed      	subs	r5, r5, r3
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	9305      	str	r3, [sp, #20]
 800939c:	9b07      	ldr	r3, [sp, #28]
 800939e:	b31b      	cbz	r3, 80093e8 <_dtoa_r+0x7a0>
 80093a0:	9b08      	ldr	r3, [sp, #32]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 80af 	beq.w	8009506 <_dtoa_r+0x8be>
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	dd13      	ble.n	80093d4 <_dtoa_r+0x78c>
 80093ac:	4639      	mov	r1, r7
 80093ae:	4632      	mov	r2, r6
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fc0d 	bl	8009bd0 <__pow5mult>
 80093b6:	ee18 2a10 	vmov	r2, s16
 80093ba:	4601      	mov	r1, r0
 80093bc:	4607      	mov	r7, r0
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 fb5c 	bl	8009a7c <__multiply>
 80093c4:	ee18 1a10 	vmov	r1, s16
 80093c8:	4680      	mov	r8, r0
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 fa88 	bl	80098e0 <_Bfree>
 80093d0:	ee08 8a10 	vmov	s16, r8
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	1b9a      	subs	r2, r3, r6
 80093d8:	d006      	beq.n	80093e8 <_dtoa_r+0x7a0>
 80093da:	ee18 1a10 	vmov	r1, s16
 80093de:	4620      	mov	r0, r4
 80093e0:	f000 fbf6 	bl	8009bd0 <__pow5mult>
 80093e4:	ee08 0a10 	vmov	s16, r0
 80093e8:	2101      	movs	r1, #1
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 fb30 	bl	8009a50 <__i2b>
 80093f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	4606      	mov	r6, r0
 80093f6:	f340 8088 	ble.w	800950a <_dtoa_r+0x8c2>
 80093fa:	461a      	mov	r2, r3
 80093fc:	4601      	mov	r1, r0
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 fbe6 	bl	8009bd0 <__pow5mult>
 8009404:	9b06      	ldr	r3, [sp, #24]
 8009406:	2b01      	cmp	r3, #1
 8009408:	4606      	mov	r6, r0
 800940a:	f340 8081 	ble.w	8009510 <_dtoa_r+0x8c8>
 800940e:	f04f 0800 	mov.w	r8, #0
 8009412:	6933      	ldr	r3, [r6, #16]
 8009414:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009418:	6918      	ldr	r0, [r3, #16]
 800941a:	f000 fac9 	bl	80099b0 <__hi0bits>
 800941e:	f1c0 0020 	rsb	r0, r0, #32
 8009422:	9b05      	ldr	r3, [sp, #20]
 8009424:	4418      	add	r0, r3
 8009426:	f010 001f 	ands.w	r0, r0, #31
 800942a:	f000 8092 	beq.w	8009552 <_dtoa_r+0x90a>
 800942e:	f1c0 0320 	rsb	r3, r0, #32
 8009432:	2b04      	cmp	r3, #4
 8009434:	f340 808a 	ble.w	800954c <_dtoa_r+0x904>
 8009438:	f1c0 001c 	rsb	r0, r0, #28
 800943c:	9b04      	ldr	r3, [sp, #16]
 800943e:	4403      	add	r3, r0
 8009440:	9304      	str	r3, [sp, #16]
 8009442:	9b05      	ldr	r3, [sp, #20]
 8009444:	4403      	add	r3, r0
 8009446:	4405      	add	r5, r0
 8009448:	9305      	str	r3, [sp, #20]
 800944a:	9b04      	ldr	r3, [sp, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	dd07      	ble.n	8009460 <_dtoa_r+0x818>
 8009450:	ee18 1a10 	vmov	r1, s16
 8009454:	461a      	mov	r2, r3
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fc14 	bl	8009c84 <__lshift>
 800945c:	ee08 0a10 	vmov	s16, r0
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	dd05      	ble.n	8009472 <_dtoa_r+0x82a>
 8009466:	4631      	mov	r1, r6
 8009468:	461a      	mov	r2, r3
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fc0a 	bl	8009c84 <__lshift>
 8009470:	4606      	mov	r6, r0
 8009472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009474:	2b00      	cmp	r3, #0
 8009476:	d06e      	beq.n	8009556 <_dtoa_r+0x90e>
 8009478:	ee18 0a10 	vmov	r0, s16
 800947c:	4631      	mov	r1, r6
 800947e:	f000 fc71 	bl	8009d64 <__mcmp>
 8009482:	2800      	cmp	r0, #0
 8009484:	da67      	bge.n	8009556 <_dtoa_r+0x90e>
 8009486:	9b00      	ldr	r3, [sp, #0]
 8009488:	3b01      	subs	r3, #1
 800948a:	ee18 1a10 	vmov	r1, s16
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	220a      	movs	r2, #10
 8009492:	2300      	movs	r3, #0
 8009494:	4620      	mov	r0, r4
 8009496:	f000 fa45 	bl	8009924 <__multadd>
 800949a:	9b08      	ldr	r3, [sp, #32]
 800949c:	ee08 0a10 	vmov	s16, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 81b1 	beq.w	8009808 <_dtoa_r+0xbc0>
 80094a6:	2300      	movs	r3, #0
 80094a8:	4639      	mov	r1, r7
 80094aa:	220a      	movs	r2, #10
 80094ac:	4620      	mov	r0, r4
 80094ae:	f000 fa39 	bl	8009924 <__multadd>
 80094b2:	9b02      	ldr	r3, [sp, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	4607      	mov	r7, r0
 80094b8:	f300 808e 	bgt.w	80095d8 <_dtoa_r+0x990>
 80094bc:	9b06      	ldr	r3, [sp, #24]
 80094be:	2b02      	cmp	r3, #2
 80094c0:	dc51      	bgt.n	8009566 <_dtoa_r+0x91e>
 80094c2:	e089      	b.n	80095d8 <_dtoa_r+0x990>
 80094c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094ca:	e74b      	b.n	8009364 <_dtoa_r+0x71c>
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	1e5e      	subs	r6, r3, #1
 80094d0:	9b07      	ldr	r3, [sp, #28]
 80094d2:	42b3      	cmp	r3, r6
 80094d4:	bfbf      	itttt	lt
 80094d6:	9b07      	ldrlt	r3, [sp, #28]
 80094d8:	9607      	strlt	r6, [sp, #28]
 80094da:	1af2      	sublt	r2, r6, r3
 80094dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80094de:	bfb6      	itet	lt
 80094e0:	189b      	addlt	r3, r3, r2
 80094e2:	1b9e      	subge	r6, r3, r6
 80094e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80094e6:	9b03      	ldr	r3, [sp, #12]
 80094e8:	bfb8      	it	lt
 80094ea:	2600      	movlt	r6, #0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	bfb7      	itett	lt
 80094f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094f8:	1a9d      	sublt	r5, r3, r2
 80094fa:	2300      	movlt	r3, #0
 80094fc:	e734      	b.n	8009368 <_dtoa_r+0x720>
 80094fe:	9e07      	ldr	r6, [sp, #28]
 8009500:	9d04      	ldr	r5, [sp, #16]
 8009502:	9f08      	ldr	r7, [sp, #32]
 8009504:	e73b      	b.n	800937e <_dtoa_r+0x736>
 8009506:	9a07      	ldr	r2, [sp, #28]
 8009508:	e767      	b.n	80093da <_dtoa_r+0x792>
 800950a:	9b06      	ldr	r3, [sp, #24]
 800950c:	2b01      	cmp	r3, #1
 800950e:	dc18      	bgt.n	8009542 <_dtoa_r+0x8fa>
 8009510:	f1ba 0f00 	cmp.w	sl, #0
 8009514:	d115      	bne.n	8009542 <_dtoa_r+0x8fa>
 8009516:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800951a:	b993      	cbnz	r3, 8009542 <_dtoa_r+0x8fa>
 800951c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009520:	0d1b      	lsrs	r3, r3, #20
 8009522:	051b      	lsls	r3, r3, #20
 8009524:	b183      	cbz	r3, 8009548 <_dtoa_r+0x900>
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	3301      	adds	r3, #1
 800952a:	9304      	str	r3, [sp, #16]
 800952c:	9b05      	ldr	r3, [sp, #20]
 800952e:	3301      	adds	r3, #1
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	f04f 0801 	mov.w	r8, #1
 8009536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009538:	2b00      	cmp	r3, #0
 800953a:	f47f af6a 	bne.w	8009412 <_dtoa_r+0x7ca>
 800953e:	2001      	movs	r0, #1
 8009540:	e76f      	b.n	8009422 <_dtoa_r+0x7da>
 8009542:	f04f 0800 	mov.w	r8, #0
 8009546:	e7f6      	b.n	8009536 <_dtoa_r+0x8ee>
 8009548:	4698      	mov	r8, r3
 800954a:	e7f4      	b.n	8009536 <_dtoa_r+0x8ee>
 800954c:	f43f af7d 	beq.w	800944a <_dtoa_r+0x802>
 8009550:	4618      	mov	r0, r3
 8009552:	301c      	adds	r0, #28
 8009554:	e772      	b.n	800943c <_dtoa_r+0x7f4>
 8009556:	9b03      	ldr	r3, [sp, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	dc37      	bgt.n	80095cc <_dtoa_r+0x984>
 800955c:	9b06      	ldr	r3, [sp, #24]
 800955e:	2b02      	cmp	r3, #2
 8009560:	dd34      	ble.n	80095cc <_dtoa_r+0x984>
 8009562:	9b03      	ldr	r3, [sp, #12]
 8009564:	9302      	str	r3, [sp, #8]
 8009566:	9b02      	ldr	r3, [sp, #8]
 8009568:	b96b      	cbnz	r3, 8009586 <_dtoa_r+0x93e>
 800956a:	4631      	mov	r1, r6
 800956c:	2205      	movs	r2, #5
 800956e:	4620      	mov	r0, r4
 8009570:	f000 f9d8 	bl	8009924 <__multadd>
 8009574:	4601      	mov	r1, r0
 8009576:	4606      	mov	r6, r0
 8009578:	ee18 0a10 	vmov	r0, s16
 800957c:	f000 fbf2 	bl	8009d64 <__mcmp>
 8009580:	2800      	cmp	r0, #0
 8009582:	f73f adbb 	bgt.w	80090fc <_dtoa_r+0x4b4>
 8009586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009588:	9d01      	ldr	r5, [sp, #4]
 800958a:	43db      	mvns	r3, r3
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	f04f 0800 	mov.w	r8, #0
 8009592:	4631      	mov	r1, r6
 8009594:	4620      	mov	r0, r4
 8009596:	f000 f9a3 	bl	80098e0 <_Bfree>
 800959a:	2f00      	cmp	r7, #0
 800959c:	f43f aea4 	beq.w	80092e8 <_dtoa_r+0x6a0>
 80095a0:	f1b8 0f00 	cmp.w	r8, #0
 80095a4:	d005      	beq.n	80095b2 <_dtoa_r+0x96a>
 80095a6:	45b8      	cmp	r8, r7
 80095a8:	d003      	beq.n	80095b2 <_dtoa_r+0x96a>
 80095aa:	4641      	mov	r1, r8
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 f997 	bl	80098e0 <_Bfree>
 80095b2:	4639      	mov	r1, r7
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 f993 	bl	80098e0 <_Bfree>
 80095ba:	e695      	b.n	80092e8 <_dtoa_r+0x6a0>
 80095bc:	2600      	movs	r6, #0
 80095be:	4637      	mov	r7, r6
 80095c0:	e7e1      	b.n	8009586 <_dtoa_r+0x93e>
 80095c2:	9700      	str	r7, [sp, #0]
 80095c4:	4637      	mov	r7, r6
 80095c6:	e599      	b.n	80090fc <_dtoa_r+0x4b4>
 80095c8:	40240000 	.word	0x40240000
 80095cc:	9b08      	ldr	r3, [sp, #32]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 80ca 	beq.w	8009768 <_dtoa_r+0xb20>
 80095d4:	9b03      	ldr	r3, [sp, #12]
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	2d00      	cmp	r5, #0
 80095da:	dd05      	ble.n	80095e8 <_dtoa_r+0x9a0>
 80095dc:	4639      	mov	r1, r7
 80095de:	462a      	mov	r2, r5
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fb4f 	bl	8009c84 <__lshift>
 80095e6:	4607      	mov	r7, r0
 80095e8:	f1b8 0f00 	cmp.w	r8, #0
 80095ec:	d05b      	beq.n	80096a6 <_dtoa_r+0xa5e>
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 f935 	bl	8009860 <_Balloc>
 80095f6:	4605      	mov	r5, r0
 80095f8:	b928      	cbnz	r0, 8009606 <_dtoa_r+0x9be>
 80095fa:	4b87      	ldr	r3, [pc, #540]	; (8009818 <_dtoa_r+0xbd0>)
 80095fc:	4602      	mov	r2, r0
 80095fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009602:	f7ff bb3b 	b.w	8008c7c <_dtoa_r+0x34>
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	3202      	adds	r2, #2
 800960a:	0092      	lsls	r2, r2, #2
 800960c:	f107 010c 	add.w	r1, r7, #12
 8009610:	300c      	adds	r0, #12
 8009612:	f000 f90b 	bl	800982c <memcpy>
 8009616:	2201      	movs	r2, #1
 8009618:	4629      	mov	r1, r5
 800961a:	4620      	mov	r0, r4
 800961c:	f000 fb32 	bl	8009c84 <__lshift>
 8009620:	9b01      	ldr	r3, [sp, #4]
 8009622:	f103 0901 	add.w	r9, r3, #1
 8009626:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800962a:	4413      	add	r3, r2
 800962c:	9305      	str	r3, [sp, #20]
 800962e:	f00a 0301 	and.w	r3, sl, #1
 8009632:	46b8      	mov	r8, r7
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	4607      	mov	r7, r0
 8009638:	4631      	mov	r1, r6
 800963a:	ee18 0a10 	vmov	r0, s16
 800963e:	f7ff fa77 	bl	8008b30 <quorem>
 8009642:	4641      	mov	r1, r8
 8009644:	9002      	str	r0, [sp, #8]
 8009646:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800964a:	ee18 0a10 	vmov	r0, s16
 800964e:	f000 fb89 	bl	8009d64 <__mcmp>
 8009652:	463a      	mov	r2, r7
 8009654:	9003      	str	r0, [sp, #12]
 8009656:	4631      	mov	r1, r6
 8009658:	4620      	mov	r0, r4
 800965a:	f000 fb9f 	bl	8009d9c <__mdiff>
 800965e:	68c2      	ldr	r2, [r0, #12]
 8009660:	f109 3bff 	add.w	fp, r9, #4294967295
 8009664:	4605      	mov	r5, r0
 8009666:	bb02      	cbnz	r2, 80096aa <_dtoa_r+0xa62>
 8009668:	4601      	mov	r1, r0
 800966a:	ee18 0a10 	vmov	r0, s16
 800966e:	f000 fb79 	bl	8009d64 <__mcmp>
 8009672:	4602      	mov	r2, r0
 8009674:	4629      	mov	r1, r5
 8009676:	4620      	mov	r0, r4
 8009678:	9207      	str	r2, [sp, #28]
 800967a:	f000 f931 	bl	80098e0 <_Bfree>
 800967e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009682:	ea43 0102 	orr.w	r1, r3, r2
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	430b      	orrs	r3, r1
 800968a:	464d      	mov	r5, r9
 800968c:	d10f      	bne.n	80096ae <_dtoa_r+0xa66>
 800968e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009692:	d02a      	beq.n	80096ea <_dtoa_r+0xaa2>
 8009694:	9b03      	ldr	r3, [sp, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	dd02      	ble.n	80096a0 <_dtoa_r+0xa58>
 800969a:	9b02      	ldr	r3, [sp, #8]
 800969c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80096a0:	f88b a000 	strb.w	sl, [fp]
 80096a4:	e775      	b.n	8009592 <_dtoa_r+0x94a>
 80096a6:	4638      	mov	r0, r7
 80096a8:	e7ba      	b.n	8009620 <_dtoa_r+0x9d8>
 80096aa:	2201      	movs	r2, #1
 80096ac:	e7e2      	b.n	8009674 <_dtoa_r+0xa2c>
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	db04      	blt.n	80096be <_dtoa_r+0xa76>
 80096b4:	9906      	ldr	r1, [sp, #24]
 80096b6:	430b      	orrs	r3, r1
 80096b8:	9904      	ldr	r1, [sp, #16]
 80096ba:	430b      	orrs	r3, r1
 80096bc:	d122      	bne.n	8009704 <_dtoa_r+0xabc>
 80096be:	2a00      	cmp	r2, #0
 80096c0:	ddee      	ble.n	80096a0 <_dtoa_r+0xa58>
 80096c2:	ee18 1a10 	vmov	r1, s16
 80096c6:	2201      	movs	r2, #1
 80096c8:	4620      	mov	r0, r4
 80096ca:	f000 fadb 	bl	8009c84 <__lshift>
 80096ce:	4631      	mov	r1, r6
 80096d0:	ee08 0a10 	vmov	s16, r0
 80096d4:	f000 fb46 	bl	8009d64 <__mcmp>
 80096d8:	2800      	cmp	r0, #0
 80096da:	dc03      	bgt.n	80096e4 <_dtoa_r+0xa9c>
 80096dc:	d1e0      	bne.n	80096a0 <_dtoa_r+0xa58>
 80096de:	f01a 0f01 	tst.w	sl, #1
 80096e2:	d0dd      	beq.n	80096a0 <_dtoa_r+0xa58>
 80096e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096e8:	d1d7      	bne.n	800969a <_dtoa_r+0xa52>
 80096ea:	2339      	movs	r3, #57	; 0x39
 80096ec:	f88b 3000 	strb.w	r3, [fp]
 80096f0:	462b      	mov	r3, r5
 80096f2:	461d      	mov	r5, r3
 80096f4:	3b01      	subs	r3, #1
 80096f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096fa:	2a39      	cmp	r2, #57	; 0x39
 80096fc:	d071      	beq.n	80097e2 <_dtoa_r+0xb9a>
 80096fe:	3201      	adds	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e746      	b.n	8009592 <_dtoa_r+0x94a>
 8009704:	2a00      	cmp	r2, #0
 8009706:	dd07      	ble.n	8009718 <_dtoa_r+0xad0>
 8009708:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800970c:	d0ed      	beq.n	80096ea <_dtoa_r+0xaa2>
 800970e:	f10a 0301 	add.w	r3, sl, #1
 8009712:	f88b 3000 	strb.w	r3, [fp]
 8009716:	e73c      	b.n	8009592 <_dtoa_r+0x94a>
 8009718:	9b05      	ldr	r3, [sp, #20]
 800971a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800971e:	4599      	cmp	r9, r3
 8009720:	d047      	beq.n	80097b2 <_dtoa_r+0xb6a>
 8009722:	ee18 1a10 	vmov	r1, s16
 8009726:	2300      	movs	r3, #0
 8009728:	220a      	movs	r2, #10
 800972a:	4620      	mov	r0, r4
 800972c:	f000 f8fa 	bl	8009924 <__multadd>
 8009730:	45b8      	cmp	r8, r7
 8009732:	ee08 0a10 	vmov	s16, r0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	f04f 020a 	mov.w	r2, #10
 800973e:	4641      	mov	r1, r8
 8009740:	4620      	mov	r0, r4
 8009742:	d106      	bne.n	8009752 <_dtoa_r+0xb0a>
 8009744:	f000 f8ee 	bl	8009924 <__multadd>
 8009748:	4680      	mov	r8, r0
 800974a:	4607      	mov	r7, r0
 800974c:	f109 0901 	add.w	r9, r9, #1
 8009750:	e772      	b.n	8009638 <_dtoa_r+0x9f0>
 8009752:	f000 f8e7 	bl	8009924 <__multadd>
 8009756:	4639      	mov	r1, r7
 8009758:	4680      	mov	r8, r0
 800975a:	2300      	movs	r3, #0
 800975c:	220a      	movs	r2, #10
 800975e:	4620      	mov	r0, r4
 8009760:	f000 f8e0 	bl	8009924 <__multadd>
 8009764:	4607      	mov	r7, r0
 8009766:	e7f1      	b.n	800974c <_dtoa_r+0xb04>
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	9302      	str	r3, [sp, #8]
 800976c:	9d01      	ldr	r5, [sp, #4]
 800976e:	ee18 0a10 	vmov	r0, s16
 8009772:	4631      	mov	r1, r6
 8009774:	f7ff f9dc 	bl	8008b30 <quorem>
 8009778:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800977c:	9b01      	ldr	r3, [sp, #4]
 800977e:	f805 ab01 	strb.w	sl, [r5], #1
 8009782:	1aea      	subs	r2, r5, r3
 8009784:	9b02      	ldr	r3, [sp, #8]
 8009786:	4293      	cmp	r3, r2
 8009788:	dd09      	ble.n	800979e <_dtoa_r+0xb56>
 800978a:	ee18 1a10 	vmov	r1, s16
 800978e:	2300      	movs	r3, #0
 8009790:	220a      	movs	r2, #10
 8009792:	4620      	mov	r0, r4
 8009794:	f000 f8c6 	bl	8009924 <__multadd>
 8009798:	ee08 0a10 	vmov	s16, r0
 800979c:	e7e7      	b.n	800976e <_dtoa_r+0xb26>
 800979e:	9b02      	ldr	r3, [sp, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bfc8      	it	gt
 80097a4:	461d      	movgt	r5, r3
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	bfd8      	it	le
 80097aa:	2501      	movle	r5, #1
 80097ac:	441d      	add	r5, r3
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	ee18 1a10 	vmov	r1, s16
 80097b6:	2201      	movs	r2, #1
 80097b8:	4620      	mov	r0, r4
 80097ba:	f000 fa63 	bl	8009c84 <__lshift>
 80097be:	4631      	mov	r1, r6
 80097c0:	ee08 0a10 	vmov	s16, r0
 80097c4:	f000 face 	bl	8009d64 <__mcmp>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	dc91      	bgt.n	80096f0 <_dtoa_r+0xaa8>
 80097cc:	d102      	bne.n	80097d4 <_dtoa_r+0xb8c>
 80097ce:	f01a 0f01 	tst.w	sl, #1
 80097d2:	d18d      	bne.n	80096f0 <_dtoa_r+0xaa8>
 80097d4:	462b      	mov	r3, r5
 80097d6:	461d      	mov	r5, r3
 80097d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097dc:	2a30      	cmp	r2, #48	; 0x30
 80097de:	d0fa      	beq.n	80097d6 <_dtoa_r+0xb8e>
 80097e0:	e6d7      	b.n	8009592 <_dtoa_r+0x94a>
 80097e2:	9a01      	ldr	r2, [sp, #4]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d184      	bne.n	80096f2 <_dtoa_r+0xaaa>
 80097e8:	9b00      	ldr	r3, [sp, #0]
 80097ea:	3301      	adds	r3, #1
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	2331      	movs	r3, #49	; 0x31
 80097f0:	7013      	strb	r3, [r2, #0]
 80097f2:	e6ce      	b.n	8009592 <_dtoa_r+0x94a>
 80097f4:	4b09      	ldr	r3, [pc, #36]	; (800981c <_dtoa_r+0xbd4>)
 80097f6:	f7ff ba95 	b.w	8008d24 <_dtoa_r+0xdc>
 80097fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f47f aa6e 	bne.w	8008cde <_dtoa_r+0x96>
 8009802:	4b07      	ldr	r3, [pc, #28]	; (8009820 <_dtoa_r+0xbd8>)
 8009804:	f7ff ba8e 	b.w	8008d24 <_dtoa_r+0xdc>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	dcae      	bgt.n	800976c <_dtoa_r+0xb24>
 800980e:	9b06      	ldr	r3, [sp, #24]
 8009810:	2b02      	cmp	r3, #2
 8009812:	f73f aea8 	bgt.w	8009566 <_dtoa_r+0x91e>
 8009816:	e7a9      	b.n	800976c <_dtoa_r+0xb24>
 8009818:	0800d073 	.word	0x0800d073
 800981c:	0800cfd0 	.word	0x0800cfd0
 8009820:	0800cff4 	.word	0x0800cff4

08009824 <_localeconv_r>:
 8009824:	4800      	ldr	r0, [pc, #0]	; (8009828 <_localeconv_r+0x4>)
 8009826:	4770      	bx	lr
 8009828:	20000170 	.word	0x20000170

0800982c <memcpy>:
 800982c:	440a      	add	r2, r1
 800982e:	4291      	cmp	r1, r2
 8009830:	f100 33ff 	add.w	r3, r0, #4294967295
 8009834:	d100      	bne.n	8009838 <memcpy+0xc>
 8009836:	4770      	bx	lr
 8009838:	b510      	push	{r4, lr}
 800983a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009842:	4291      	cmp	r1, r2
 8009844:	d1f9      	bne.n	800983a <memcpy+0xe>
 8009846:	bd10      	pop	{r4, pc}

08009848 <__malloc_lock>:
 8009848:	4801      	ldr	r0, [pc, #4]	; (8009850 <__malloc_lock+0x8>)
 800984a:	f000 bd30 	b.w	800a2ae <__retarget_lock_acquire_recursive>
 800984e:	bf00      	nop
 8009850:	20000458 	.word	0x20000458

08009854 <__malloc_unlock>:
 8009854:	4801      	ldr	r0, [pc, #4]	; (800985c <__malloc_unlock+0x8>)
 8009856:	f000 bd2b 	b.w	800a2b0 <__retarget_lock_release_recursive>
 800985a:	bf00      	nop
 800985c:	20000458 	.word	0x20000458

08009860 <_Balloc>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009864:	4604      	mov	r4, r0
 8009866:	460d      	mov	r5, r1
 8009868:	b976      	cbnz	r6, 8009888 <_Balloc+0x28>
 800986a:	2010      	movs	r0, #16
 800986c:	f7fe fbd6 	bl	800801c <malloc>
 8009870:	4602      	mov	r2, r0
 8009872:	6260      	str	r0, [r4, #36]	; 0x24
 8009874:	b920      	cbnz	r0, 8009880 <_Balloc+0x20>
 8009876:	4b18      	ldr	r3, [pc, #96]	; (80098d8 <_Balloc+0x78>)
 8009878:	4818      	ldr	r0, [pc, #96]	; (80098dc <_Balloc+0x7c>)
 800987a:	2166      	movs	r1, #102	; 0x66
 800987c:	f000 fce6 	bl	800a24c <__assert_func>
 8009880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009884:	6006      	str	r6, [r0, #0]
 8009886:	60c6      	str	r6, [r0, #12]
 8009888:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800988a:	68f3      	ldr	r3, [r6, #12]
 800988c:	b183      	cbz	r3, 80098b0 <_Balloc+0x50>
 800988e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009896:	b9b8      	cbnz	r0, 80098c8 <_Balloc+0x68>
 8009898:	2101      	movs	r1, #1
 800989a:	fa01 f605 	lsl.w	r6, r1, r5
 800989e:	1d72      	adds	r2, r6, #5
 80098a0:	0092      	lsls	r2, r2, #2
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 fb60 	bl	8009f68 <_calloc_r>
 80098a8:	b160      	cbz	r0, 80098c4 <_Balloc+0x64>
 80098aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ae:	e00e      	b.n	80098ce <_Balloc+0x6e>
 80098b0:	2221      	movs	r2, #33	; 0x21
 80098b2:	2104      	movs	r1, #4
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 fb57 	bl	8009f68 <_calloc_r>
 80098ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098bc:	60f0      	str	r0, [r6, #12]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e4      	bne.n	800988e <_Balloc+0x2e>
 80098c4:	2000      	movs	r0, #0
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	6802      	ldr	r2, [r0, #0]
 80098ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098ce:	2300      	movs	r3, #0
 80098d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098d4:	e7f7      	b.n	80098c6 <_Balloc+0x66>
 80098d6:	bf00      	nop
 80098d8:	0800d001 	.word	0x0800d001
 80098dc:	0800d084 	.word	0x0800d084

080098e0 <_Bfree>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098e4:	4605      	mov	r5, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	b976      	cbnz	r6, 8009908 <_Bfree+0x28>
 80098ea:	2010      	movs	r0, #16
 80098ec:	f7fe fb96 	bl	800801c <malloc>
 80098f0:	4602      	mov	r2, r0
 80098f2:	6268      	str	r0, [r5, #36]	; 0x24
 80098f4:	b920      	cbnz	r0, 8009900 <_Bfree+0x20>
 80098f6:	4b09      	ldr	r3, [pc, #36]	; (800991c <_Bfree+0x3c>)
 80098f8:	4809      	ldr	r0, [pc, #36]	; (8009920 <_Bfree+0x40>)
 80098fa:	218a      	movs	r1, #138	; 0x8a
 80098fc:	f000 fca6 	bl	800a24c <__assert_func>
 8009900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009904:	6006      	str	r6, [r0, #0]
 8009906:	60c6      	str	r6, [r0, #12]
 8009908:	b13c      	cbz	r4, 800991a <_Bfree+0x3a>
 800990a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800990c:	6862      	ldr	r2, [r4, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009914:	6021      	str	r1, [r4, #0]
 8009916:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	0800d001 	.word	0x0800d001
 8009920:	0800d084 	.word	0x0800d084

08009924 <__multadd>:
 8009924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009928:	690d      	ldr	r5, [r1, #16]
 800992a:	4607      	mov	r7, r0
 800992c:	460c      	mov	r4, r1
 800992e:	461e      	mov	r6, r3
 8009930:	f101 0c14 	add.w	ip, r1, #20
 8009934:	2000      	movs	r0, #0
 8009936:	f8dc 3000 	ldr.w	r3, [ip]
 800993a:	b299      	uxth	r1, r3
 800993c:	fb02 6101 	mla	r1, r2, r1, r6
 8009940:	0c1e      	lsrs	r6, r3, #16
 8009942:	0c0b      	lsrs	r3, r1, #16
 8009944:	fb02 3306 	mla	r3, r2, r6, r3
 8009948:	b289      	uxth	r1, r1
 800994a:	3001      	adds	r0, #1
 800994c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009950:	4285      	cmp	r5, r0
 8009952:	f84c 1b04 	str.w	r1, [ip], #4
 8009956:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800995a:	dcec      	bgt.n	8009936 <__multadd+0x12>
 800995c:	b30e      	cbz	r6, 80099a2 <__multadd+0x7e>
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	42ab      	cmp	r3, r5
 8009962:	dc19      	bgt.n	8009998 <__multadd+0x74>
 8009964:	6861      	ldr	r1, [r4, #4]
 8009966:	4638      	mov	r0, r7
 8009968:	3101      	adds	r1, #1
 800996a:	f7ff ff79 	bl	8009860 <_Balloc>
 800996e:	4680      	mov	r8, r0
 8009970:	b928      	cbnz	r0, 800997e <__multadd+0x5a>
 8009972:	4602      	mov	r2, r0
 8009974:	4b0c      	ldr	r3, [pc, #48]	; (80099a8 <__multadd+0x84>)
 8009976:	480d      	ldr	r0, [pc, #52]	; (80099ac <__multadd+0x88>)
 8009978:	21b5      	movs	r1, #181	; 0xb5
 800997a:	f000 fc67 	bl	800a24c <__assert_func>
 800997e:	6922      	ldr	r2, [r4, #16]
 8009980:	3202      	adds	r2, #2
 8009982:	f104 010c 	add.w	r1, r4, #12
 8009986:	0092      	lsls	r2, r2, #2
 8009988:	300c      	adds	r0, #12
 800998a:	f7ff ff4f 	bl	800982c <memcpy>
 800998e:	4621      	mov	r1, r4
 8009990:	4638      	mov	r0, r7
 8009992:	f7ff ffa5 	bl	80098e0 <_Bfree>
 8009996:	4644      	mov	r4, r8
 8009998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800999c:	3501      	adds	r5, #1
 800999e:	615e      	str	r6, [r3, #20]
 80099a0:	6125      	str	r5, [r4, #16]
 80099a2:	4620      	mov	r0, r4
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	0800d073 	.word	0x0800d073
 80099ac:	0800d084 	.word	0x0800d084

080099b0 <__hi0bits>:
 80099b0:	0c03      	lsrs	r3, r0, #16
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	b9d3      	cbnz	r3, 80099ec <__hi0bits+0x3c>
 80099b6:	0400      	lsls	r0, r0, #16
 80099b8:	2310      	movs	r3, #16
 80099ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80099be:	bf04      	itt	eq
 80099c0:	0200      	lsleq	r0, r0, #8
 80099c2:	3308      	addeq	r3, #8
 80099c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80099c8:	bf04      	itt	eq
 80099ca:	0100      	lsleq	r0, r0, #4
 80099cc:	3304      	addeq	r3, #4
 80099ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80099d2:	bf04      	itt	eq
 80099d4:	0080      	lsleq	r0, r0, #2
 80099d6:	3302      	addeq	r3, #2
 80099d8:	2800      	cmp	r0, #0
 80099da:	db05      	blt.n	80099e8 <__hi0bits+0x38>
 80099dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80099e0:	f103 0301 	add.w	r3, r3, #1
 80099e4:	bf08      	it	eq
 80099e6:	2320      	moveq	r3, #32
 80099e8:	4618      	mov	r0, r3
 80099ea:	4770      	bx	lr
 80099ec:	2300      	movs	r3, #0
 80099ee:	e7e4      	b.n	80099ba <__hi0bits+0xa>

080099f0 <__lo0bits>:
 80099f0:	6803      	ldr	r3, [r0, #0]
 80099f2:	f013 0207 	ands.w	r2, r3, #7
 80099f6:	4601      	mov	r1, r0
 80099f8:	d00b      	beq.n	8009a12 <__lo0bits+0x22>
 80099fa:	07da      	lsls	r2, r3, #31
 80099fc:	d423      	bmi.n	8009a46 <__lo0bits+0x56>
 80099fe:	0798      	lsls	r0, r3, #30
 8009a00:	bf49      	itett	mi
 8009a02:	085b      	lsrmi	r3, r3, #1
 8009a04:	089b      	lsrpl	r3, r3, #2
 8009a06:	2001      	movmi	r0, #1
 8009a08:	600b      	strmi	r3, [r1, #0]
 8009a0a:	bf5c      	itt	pl
 8009a0c:	600b      	strpl	r3, [r1, #0]
 8009a0e:	2002      	movpl	r0, #2
 8009a10:	4770      	bx	lr
 8009a12:	b298      	uxth	r0, r3
 8009a14:	b9a8      	cbnz	r0, 8009a42 <__lo0bits+0x52>
 8009a16:	0c1b      	lsrs	r3, r3, #16
 8009a18:	2010      	movs	r0, #16
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	b90a      	cbnz	r2, 8009a22 <__lo0bits+0x32>
 8009a1e:	3008      	adds	r0, #8
 8009a20:	0a1b      	lsrs	r3, r3, #8
 8009a22:	071a      	lsls	r2, r3, #28
 8009a24:	bf04      	itt	eq
 8009a26:	091b      	lsreq	r3, r3, #4
 8009a28:	3004      	addeq	r0, #4
 8009a2a:	079a      	lsls	r2, r3, #30
 8009a2c:	bf04      	itt	eq
 8009a2e:	089b      	lsreq	r3, r3, #2
 8009a30:	3002      	addeq	r0, #2
 8009a32:	07da      	lsls	r2, r3, #31
 8009a34:	d403      	bmi.n	8009a3e <__lo0bits+0x4e>
 8009a36:	085b      	lsrs	r3, r3, #1
 8009a38:	f100 0001 	add.w	r0, r0, #1
 8009a3c:	d005      	beq.n	8009a4a <__lo0bits+0x5a>
 8009a3e:	600b      	str	r3, [r1, #0]
 8009a40:	4770      	bx	lr
 8009a42:	4610      	mov	r0, r2
 8009a44:	e7e9      	b.n	8009a1a <__lo0bits+0x2a>
 8009a46:	2000      	movs	r0, #0
 8009a48:	4770      	bx	lr
 8009a4a:	2020      	movs	r0, #32
 8009a4c:	4770      	bx	lr
	...

08009a50 <__i2b>:
 8009a50:	b510      	push	{r4, lr}
 8009a52:	460c      	mov	r4, r1
 8009a54:	2101      	movs	r1, #1
 8009a56:	f7ff ff03 	bl	8009860 <_Balloc>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	b928      	cbnz	r0, 8009a6a <__i2b+0x1a>
 8009a5e:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <__i2b+0x24>)
 8009a60:	4805      	ldr	r0, [pc, #20]	; (8009a78 <__i2b+0x28>)
 8009a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a66:	f000 fbf1 	bl	800a24c <__assert_func>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	6144      	str	r4, [r0, #20]
 8009a6e:	6103      	str	r3, [r0, #16]
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	bf00      	nop
 8009a74:	0800d073 	.word	0x0800d073
 8009a78:	0800d084 	.word	0x0800d084

08009a7c <__multiply>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	4691      	mov	r9, r2
 8009a82:	690a      	ldr	r2, [r1, #16]
 8009a84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	bfb8      	it	lt
 8009a8c:	460b      	movlt	r3, r1
 8009a8e:	460c      	mov	r4, r1
 8009a90:	bfbc      	itt	lt
 8009a92:	464c      	movlt	r4, r9
 8009a94:	4699      	movlt	r9, r3
 8009a96:	6927      	ldr	r7, [r4, #16]
 8009a98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a9c:	68a3      	ldr	r3, [r4, #8]
 8009a9e:	6861      	ldr	r1, [r4, #4]
 8009aa0:	eb07 060a 	add.w	r6, r7, sl
 8009aa4:	42b3      	cmp	r3, r6
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	bfb8      	it	lt
 8009aaa:	3101      	addlt	r1, #1
 8009aac:	f7ff fed8 	bl	8009860 <_Balloc>
 8009ab0:	b930      	cbnz	r0, 8009ac0 <__multiply+0x44>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	4b44      	ldr	r3, [pc, #272]	; (8009bc8 <__multiply+0x14c>)
 8009ab6:	4845      	ldr	r0, [pc, #276]	; (8009bcc <__multiply+0x150>)
 8009ab8:	f240 115d 	movw	r1, #349	; 0x15d
 8009abc:	f000 fbc6 	bl	800a24c <__assert_func>
 8009ac0:	f100 0514 	add.w	r5, r0, #20
 8009ac4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ac8:	462b      	mov	r3, r5
 8009aca:	2200      	movs	r2, #0
 8009acc:	4543      	cmp	r3, r8
 8009ace:	d321      	bcc.n	8009b14 <__multiply+0x98>
 8009ad0:	f104 0314 	add.w	r3, r4, #20
 8009ad4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ad8:	f109 0314 	add.w	r3, r9, #20
 8009adc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ae0:	9202      	str	r2, [sp, #8]
 8009ae2:	1b3a      	subs	r2, r7, r4
 8009ae4:	3a15      	subs	r2, #21
 8009ae6:	f022 0203 	bic.w	r2, r2, #3
 8009aea:	3204      	adds	r2, #4
 8009aec:	f104 0115 	add.w	r1, r4, #21
 8009af0:	428f      	cmp	r7, r1
 8009af2:	bf38      	it	cc
 8009af4:	2204      	movcc	r2, #4
 8009af6:	9201      	str	r2, [sp, #4]
 8009af8:	9a02      	ldr	r2, [sp, #8]
 8009afa:	9303      	str	r3, [sp, #12]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d80c      	bhi.n	8009b1a <__multiply+0x9e>
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	dd03      	ble.n	8009b0c <__multiply+0x90>
 8009b04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d05a      	beq.n	8009bc2 <__multiply+0x146>
 8009b0c:	6106      	str	r6, [r0, #16]
 8009b0e:	b005      	add	sp, #20
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	f843 2b04 	str.w	r2, [r3], #4
 8009b18:	e7d8      	b.n	8009acc <__multiply+0x50>
 8009b1a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b1e:	f1ba 0f00 	cmp.w	sl, #0
 8009b22:	d024      	beq.n	8009b6e <__multiply+0xf2>
 8009b24:	f104 0e14 	add.w	lr, r4, #20
 8009b28:	46a9      	mov	r9, r5
 8009b2a:	f04f 0c00 	mov.w	ip, #0
 8009b2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b32:	f8d9 1000 	ldr.w	r1, [r9]
 8009b36:	fa1f fb82 	uxth.w	fp, r2
 8009b3a:	b289      	uxth	r1, r1
 8009b3c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009b44:	f8d9 2000 	ldr.w	r2, [r9]
 8009b48:	4461      	add	r1, ip
 8009b4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b4e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009b52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b56:	b289      	uxth	r1, r1
 8009b58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b5c:	4577      	cmp	r7, lr
 8009b5e:	f849 1b04 	str.w	r1, [r9], #4
 8009b62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b66:	d8e2      	bhi.n	8009b2e <__multiply+0xb2>
 8009b68:	9a01      	ldr	r2, [sp, #4]
 8009b6a:	f845 c002 	str.w	ip, [r5, r2]
 8009b6e:	9a03      	ldr	r2, [sp, #12]
 8009b70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009b74:	3304      	adds	r3, #4
 8009b76:	f1b9 0f00 	cmp.w	r9, #0
 8009b7a:	d020      	beq.n	8009bbe <__multiply+0x142>
 8009b7c:	6829      	ldr	r1, [r5, #0]
 8009b7e:	f104 0c14 	add.w	ip, r4, #20
 8009b82:	46ae      	mov	lr, r5
 8009b84:	f04f 0a00 	mov.w	sl, #0
 8009b88:	f8bc b000 	ldrh.w	fp, [ip]
 8009b8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009b90:	fb09 220b 	mla	r2, r9, fp, r2
 8009b94:	4492      	add	sl, r2
 8009b96:	b289      	uxth	r1, r1
 8009b98:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b9c:	f84e 1b04 	str.w	r1, [lr], #4
 8009ba0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ba4:	f8be 1000 	ldrh.w	r1, [lr]
 8009ba8:	0c12      	lsrs	r2, r2, #16
 8009baa:	fb09 1102 	mla	r1, r9, r2, r1
 8009bae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009bb2:	4567      	cmp	r7, ip
 8009bb4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bb8:	d8e6      	bhi.n	8009b88 <__multiply+0x10c>
 8009bba:	9a01      	ldr	r2, [sp, #4]
 8009bbc:	50a9      	str	r1, [r5, r2]
 8009bbe:	3504      	adds	r5, #4
 8009bc0:	e79a      	b.n	8009af8 <__multiply+0x7c>
 8009bc2:	3e01      	subs	r6, #1
 8009bc4:	e79c      	b.n	8009b00 <__multiply+0x84>
 8009bc6:	bf00      	nop
 8009bc8:	0800d073 	.word	0x0800d073
 8009bcc:	0800d084 	.word	0x0800d084

08009bd0 <__pow5mult>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	4615      	mov	r5, r2
 8009bd6:	f012 0203 	ands.w	r2, r2, #3
 8009bda:	4606      	mov	r6, r0
 8009bdc:	460f      	mov	r7, r1
 8009bde:	d007      	beq.n	8009bf0 <__pow5mult+0x20>
 8009be0:	4c25      	ldr	r4, [pc, #148]	; (8009c78 <__pow5mult+0xa8>)
 8009be2:	3a01      	subs	r2, #1
 8009be4:	2300      	movs	r3, #0
 8009be6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bea:	f7ff fe9b 	bl	8009924 <__multadd>
 8009bee:	4607      	mov	r7, r0
 8009bf0:	10ad      	asrs	r5, r5, #2
 8009bf2:	d03d      	beq.n	8009c70 <__pow5mult+0xa0>
 8009bf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009bf6:	b97c      	cbnz	r4, 8009c18 <__pow5mult+0x48>
 8009bf8:	2010      	movs	r0, #16
 8009bfa:	f7fe fa0f 	bl	800801c <malloc>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6270      	str	r0, [r6, #36]	; 0x24
 8009c02:	b928      	cbnz	r0, 8009c10 <__pow5mult+0x40>
 8009c04:	4b1d      	ldr	r3, [pc, #116]	; (8009c7c <__pow5mult+0xac>)
 8009c06:	481e      	ldr	r0, [pc, #120]	; (8009c80 <__pow5mult+0xb0>)
 8009c08:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c0c:	f000 fb1e 	bl	800a24c <__assert_func>
 8009c10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c14:	6004      	str	r4, [r0, #0]
 8009c16:	60c4      	str	r4, [r0, #12]
 8009c18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c20:	b94c      	cbnz	r4, 8009c36 <__pow5mult+0x66>
 8009c22:	f240 2171 	movw	r1, #625	; 0x271
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7ff ff12 	bl	8009a50 <__i2b>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c32:	4604      	mov	r4, r0
 8009c34:	6003      	str	r3, [r0, #0]
 8009c36:	f04f 0900 	mov.w	r9, #0
 8009c3a:	07eb      	lsls	r3, r5, #31
 8009c3c:	d50a      	bpl.n	8009c54 <__pow5mult+0x84>
 8009c3e:	4639      	mov	r1, r7
 8009c40:	4622      	mov	r2, r4
 8009c42:	4630      	mov	r0, r6
 8009c44:	f7ff ff1a 	bl	8009a7c <__multiply>
 8009c48:	4639      	mov	r1, r7
 8009c4a:	4680      	mov	r8, r0
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	f7ff fe47 	bl	80098e0 <_Bfree>
 8009c52:	4647      	mov	r7, r8
 8009c54:	106d      	asrs	r5, r5, #1
 8009c56:	d00b      	beq.n	8009c70 <__pow5mult+0xa0>
 8009c58:	6820      	ldr	r0, [r4, #0]
 8009c5a:	b938      	cbnz	r0, 8009c6c <__pow5mult+0x9c>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff ff0b 	bl	8009a7c <__multiply>
 8009c66:	6020      	str	r0, [r4, #0]
 8009c68:	f8c0 9000 	str.w	r9, [r0]
 8009c6c:	4604      	mov	r4, r0
 8009c6e:	e7e4      	b.n	8009c3a <__pow5mult+0x6a>
 8009c70:	4638      	mov	r0, r7
 8009c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c76:	bf00      	nop
 8009c78:	0800d1d0 	.word	0x0800d1d0
 8009c7c:	0800d001 	.word	0x0800d001
 8009c80:	0800d084 	.word	0x0800d084

08009c84 <__lshift>:
 8009c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c88:	460c      	mov	r4, r1
 8009c8a:	6849      	ldr	r1, [r1, #4]
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	4607      	mov	r7, r0
 8009c96:	4691      	mov	r9, r2
 8009c98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c9c:	f108 0601 	add.w	r6, r8, #1
 8009ca0:	42b3      	cmp	r3, r6
 8009ca2:	db0b      	blt.n	8009cbc <__lshift+0x38>
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f7ff fddb 	bl	8009860 <_Balloc>
 8009caa:	4605      	mov	r5, r0
 8009cac:	b948      	cbnz	r0, 8009cc2 <__lshift+0x3e>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	4b2a      	ldr	r3, [pc, #168]	; (8009d5c <__lshift+0xd8>)
 8009cb2:	482b      	ldr	r0, [pc, #172]	; (8009d60 <__lshift+0xdc>)
 8009cb4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009cb8:	f000 fac8 	bl	800a24c <__assert_func>
 8009cbc:	3101      	adds	r1, #1
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	e7ee      	b.n	8009ca0 <__lshift+0x1c>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f100 0114 	add.w	r1, r0, #20
 8009cc8:	f100 0210 	add.w	r2, r0, #16
 8009ccc:	4618      	mov	r0, r3
 8009cce:	4553      	cmp	r3, sl
 8009cd0:	db37      	blt.n	8009d42 <__lshift+0xbe>
 8009cd2:	6920      	ldr	r0, [r4, #16]
 8009cd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009cd8:	f104 0314 	add.w	r3, r4, #20
 8009cdc:	f019 091f 	ands.w	r9, r9, #31
 8009ce0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ce4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ce8:	d02f      	beq.n	8009d4a <__lshift+0xc6>
 8009cea:	f1c9 0e20 	rsb	lr, r9, #32
 8009cee:	468a      	mov	sl, r1
 8009cf0:	f04f 0c00 	mov.w	ip, #0
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	fa02 f209 	lsl.w	r2, r2, r9
 8009cfa:	ea42 020c 	orr.w	r2, r2, ip
 8009cfe:	f84a 2b04 	str.w	r2, [sl], #4
 8009d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d06:	4298      	cmp	r0, r3
 8009d08:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d0c:	d8f2      	bhi.n	8009cf4 <__lshift+0x70>
 8009d0e:	1b03      	subs	r3, r0, r4
 8009d10:	3b15      	subs	r3, #21
 8009d12:	f023 0303 	bic.w	r3, r3, #3
 8009d16:	3304      	adds	r3, #4
 8009d18:	f104 0215 	add.w	r2, r4, #21
 8009d1c:	4290      	cmp	r0, r2
 8009d1e:	bf38      	it	cc
 8009d20:	2304      	movcc	r3, #4
 8009d22:	f841 c003 	str.w	ip, [r1, r3]
 8009d26:	f1bc 0f00 	cmp.w	ip, #0
 8009d2a:	d001      	beq.n	8009d30 <__lshift+0xac>
 8009d2c:	f108 0602 	add.w	r6, r8, #2
 8009d30:	3e01      	subs	r6, #1
 8009d32:	4638      	mov	r0, r7
 8009d34:	612e      	str	r6, [r5, #16]
 8009d36:	4621      	mov	r1, r4
 8009d38:	f7ff fdd2 	bl	80098e0 <_Bfree>
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d46:	3301      	adds	r3, #1
 8009d48:	e7c1      	b.n	8009cce <__lshift+0x4a>
 8009d4a:	3904      	subs	r1, #4
 8009d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d54:	4298      	cmp	r0, r3
 8009d56:	d8f9      	bhi.n	8009d4c <__lshift+0xc8>
 8009d58:	e7ea      	b.n	8009d30 <__lshift+0xac>
 8009d5a:	bf00      	nop
 8009d5c:	0800d073 	.word	0x0800d073
 8009d60:	0800d084 	.word	0x0800d084

08009d64 <__mcmp>:
 8009d64:	b530      	push	{r4, r5, lr}
 8009d66:	6902      	ldr	r2, [r0, #16]
 8009d68:	690c      	ldr	r4, [r1, #16]
 8009d6a:	1b12      	subs	r2, r2, r4
 8009d6c:	d10e      	bne.n	8009d8c <__mcmp+0x28>
 8009d6e:	f100 0314 	add.w	r3, r0, #20
 8009d72:	3114      	adds	r1, #20
 8009d74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009d78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009d7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009d80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009d84:	42a5      	cmp	r5, r4
 8009d86:	d003      	beq.n	8009d90 <__mcmp+0x2c>
 8009d88:	d305      	bcc.n	8009d96 <__mcmp+0x32>
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	bd30      	pop	{r4, r5, pc}
 8009d90:	4283      	cmp	r3, r0
 8009d92:	d3f3      	bcc.n	8009d7c <__mcmp+0x18>
 8009d94:	e7fa      	b.n	8009d8c <__mcmp+0x28>
 8009d96:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9a:	e7f7      	b.n	8009d8c <__mcmp+0x28>

08009d9c <__mdiff>:
 8009d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da0:	460c      	mov	r4, r1
 8009da2:	4606      	mov	r6, r0
 8009da4:	4611      	mov	r1, r2
 8009da6:	4620      	mov	r0, r4
 8009da8:	4690      	mov	r8, r2
 8009daa:	f7ff ffdb 	bl	8009d64 <__mcmp>
 8009dae:	1e05      	subs	r5, r0, #0
 8009db0:	d110      	bne.n	8009dd4 <__mdiff+0x38>
 8009db2:	4629      	mov	r1, r5
 8009db4:	4630      	mov	r0, r6
 8009db6:	f7ff fd53 	bl	8009860 <_Balloc>
 8009dba:	b930      	cbnz	r0, 8009dca <__mdiff+0x2e>
 8009dbc:	4b3a      	ldr	r3, [pc, #232]	; (8009ea8 <__mdiff+0x10c>)
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	f240 2132 	movw	r1, #562	; 0x232
 8009dc4:	4839      	ldr	r0, [pc, #228]	; (8009eac <__mdiff+0x110>)
 8009dc6:	f000 fa41 	bl	800a24c <__assert_func>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd4:	bfa4      	itt	ge
 8009dd6:	4643      	movge	r3, r8
 8009dd8:	46a0      	movge	r8, r4
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009de0:	bfa6      	itte	ge
 8009de2:	461c      	movge	r4, r3
 8009de4:	2500      	movge	r5, #0
 8009de6:	2501      	movlt	r5, #1
 8009de8:	f7ff fd3a 	bl	8009860 <_Balloc>
 8009dec:	b920      	cbnz	r0, 8009df8 <__mdiff+0x5c>
 8009dee:	4b2e      	ldr	r3, [pc, #184]	; (8009ea8 <__mdiff+0x10c>)
 8009df0:	4602      	mov	r2, r0
 8009df2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009df6:	e7e5      	b.n	8009dc4 <__mdiff+0x28>
 8009df8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009dfc:	6926      	ldr	r6, [r4, #16]
 8009dfe:	60c5      	str	r5, [r0, #12]
 8009e00:	f104 0914 	add.w	r9, r4, #20
 8009e04:	f108 0514 	add.w	r5, r8, #20
 8009e08:	f100 0e14 	add.w	lr, r0, #20
 8009e0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e14:	f108 0210 	add.w	r2, r8, #16
 8009e18:	46f2      	mov	sl, lr
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e24:	fa1f f883 	uxth.w	r8, r3
 8009e28:	fa11 f18b 	uxtah	r1, r1, fp
 8009e2c:	0c1b      	lsrs	r3, r3, #16
 8009e2e:	eba1 0808 	sub.w	r8, r1, r8
 8009e32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009e3a:	fa1f f888 	uxth.w	r8, r8
 8009e3e:	1419      	asrs	r1, r3, #16
 8009e40:	454e      	cmp	r6, r9
 8009e42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009e46:	f84a 3b04 	str.w	r3, [sl], #4
 8009e4a:	d8e7      	bhi.n	8009e1c <__mdiff+0x80>
 8009e4c:	1b33      	subs	r3, r6, r4
 8009e4e:	3b15      	subs	r3, #21
 8009e50:	f023 0303 	bic.w	r3, r3, #3
 8009e54:	3304      	adds	r3, #4
 8009e56:	3415      	adds	r4, #21
 8009e58:	42a6      	cmp	r6, r4
 8009e5a:	bf38      	it	cc
 8009e5c:	2304      	movcc	r3, #4
 8009e5e:	441d      	add	r5, r3
 8009e60:	4473      	add	r3, lr
 8009e62:	469e      	mov	lr, r3
 8009e64:	462e      	mov	r6, r5
 8009e66:	4566      	cmp	r6, ip
 8009e68:	d30e      	bcc.n	8009e88 <__mdiff+0xec>
 8009e6a:	f10c 0203 	add.w	r2, ip, #3
 8009e6e:	1b52      	subs	r2, r2, r5
 8009e70:	f022 0203 	bic.w	r2, r2, #3
 8009e74:	3d03      	subs	r5, #3
 8009e76:	45ac      	cmp	ip, r5
 8009e78:	bf38      	it	cc
 8009e7a:	2200      	movcc	r2, #0
 8009e7c:	441a      	add	r2, r3
 8009e7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009e82:	b17b      	cbz	r3, 8009ea4 <__mdiff+0x108>
 8009e84:	6107      	str	r7, [r0, #16]
 8009e86:	e7a3      	b.n	8009dd0 <__mdiff+0x34>
 8009e88:	f856 8b04 	ldr.w	r8, [r6], #4
 8009e8c:	fa11 f288 	uxtah	r2, r1, r8
 8009e90:	1414      	asrs	r4, r2, #16
 8009e92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009e96:	b292      	uxth	r2, r2
 8009e98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009e9c:	f84e 2b04 	str.w	r2, [lr], #4
 8009ea0:	1421      	asrs	r1, r4, #16
 8009ea2:	e7e0      	b.n	8009e66 <__mdiff+0xca>
 8009ea4:	3f01      	subs	r7, #1
 8009ea6:	e7ea      	b.n	8009e7e <__mdiff+0xe2>
 8009ea8:	0800d073 	.word	0x0800d073
 8009eac:	0800d084 	.word	0x0800d084

08009eb0 <__d2b>:
 8009eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	ec57 6b10 	vmov	r6, r7, d0
 8009ebc:	4690      	mov	r8, r2
 8009ebe:	f7ff fccf 	bl	8009860 <_Balloc>
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	b930      	cbnz	r0, 8009ed4 <__d2b+0x24>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	4b25      	ldr	r3, [pc, #148]	; (8009f60 <__d2b+0xb0>)
 8009eca:	4826      	ldr	r0, [pc, #152]	; (8009f64 <__d2b+0xb4>)
 8009ecc:	f240 310a 	movw	r1, #778	; 0x30a
 8009ed0:	f000 f9bc 	bl	800a24c <__assert_func>
 8009ed4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ed8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009edc:	bb35      	cbnz	r5, 8009f2c <__d2b+0x7c>
 8009ede:	2e00      	cmp	r6, #0
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	d028      	beq.n	8009f36 <__d2b+0x86>
 8009ee4:	4668      	mov	r0, sp
 8009ee6:	9600      	str	r6, [sp, #0]
 8009ee8:	f7ff fd82 	bl	80099f0 <__lo0bits>
 8009eec:	9900      	ldr	r1, [sp, #0]
 8009eee:	b300      	cbz	r0, 8009f32 <__d2b+0x82>
 8009ef0:	9a01      	ldr	r2, [sp, #4]
 8009ef2:	f1c0 0320 	rsb	r3, r0, #32
 8009ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8009efa:	430b      	orrs	r3, r1
 8009efc:	40c2      	lsrs	r2, r0
 8009efe:	6163      	str	r3, [r4, #20]
 8009f00:	9201      	str	r2, [sp, #4]
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	61a3      	str	r3, [r4, #24]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bf14      	ite	ne
 8009f0a:	2202      	movne	r2, #2
 8009f0c:	2201      	moveq	r2, #1
 8009f0e:	6122      	str	r2, [r4, #16]
 8009f10:	b1d5      	cbz	r5, 8009f48 <__d2b+0x98>
 8009f12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f16:	4405      	add	r5, r0
 8009f18:	f8c9 5000 	str.w	r5, [r9]
 8009f1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f20:	f8c8 0000 	str.w	r0, [r8]
 8009f24:	4620      	mov	r0, r4
 8009f26:	b003      	add	sp, #12
 8009f28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f30:	e7d5      	b.n	8009ede <__d2b+0x2e>
 8009f32:	6161      	str	r1, [r4, #20]
 8009f34:	e7e5      	b.n	8009f02 <__d2b+0x52>
 8009f36:	a801      	add	r0, sp, #4
 8009f38:	f7ff fd5a 	bl	80099f0 <__lo0bits>
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	6163      	str	r3, [r4, #20]
 8009f40:	2201      	movs	r2, #1
 8009f42:	6122      	str	r2, [r4, #16]
 8009f44:	3020      	adds	r0, #32
 8009f46:	e7e3      	b.n	8009f10 <__d2b+0x60>
 8009f48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f50:	f8c9 0000 	str.w	r0, [r9]
 8009f54:	6918      	ldr	r0, [r3, #16]
 8009f56:	f7ff fd2b 	bl	80099b0 <__hi0bits>
 8009f5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f5e:	e7df      	b.n	8009f20 <__d2b+0x70>
 8009f60:	0800d073 	.word	0x0800d073
 8009f64:	0800d084 	.word	0x0800d084

08009f68 <_calloc_r>:
 8009f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f6a:	fba1 2402 	umull	r2, r4, r1, r2
 8009f6e:	b94c      	cbnz	r4, 8009f84 <_calloc_r+0x1c>
 8009f70:	4611      	mov	r1, r2
 8009f72:	9201      	str	r2, [sp, #4]
 8009f74:	f7fe f8ce 	bl	8008114 <_malloc_r>
 8009f78:	9a01      	ldr	r2, [sp, #4]
 8009f7a:	4605      	mov	r5, r0
 8009f7c:	b930      	cbnz	r0, 8009f8c <_calloc_r+0x24>
 8009f7e:	4628      	mov	r0, r5
 8009f80:	b003      	add	sp, #12
 8009f82:	bd30      	pop	{r4, r5, pc}
 8009f84:	220c      	movs	r2, #12
 8009f86:	6002      	str	r2, [r0, #0]
 8009f88:	2500      	movs	r5, #0
 8009f8a:	e7f8      	b.n	8009f7e <_calloc_r+0x16>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	f7fe f84d 	bl	800802c <memset>
 8009f92:	e7f4      	b.n	8009f7e <_calloc_r+0x16>

08009f94 <__ssputs_r>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	688e      	ldr	r6, [r1, #8]
 8009f9a:	429e      	cmp	r6, r3
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	4690      	mov	r8, r2
 8009fa2:	461f      	mov	r7, r3
 8009fa4:	d838      	bhi.n	800a018 <__ssputs_r+0x84>
 8009fa6:	898a      	ldrh	r2, [r1, #12]
 8009fa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fac:	d032      	beq.n	800a014 <__ssputs_r+0x80>
 8009fae:	6825      	ldr	r5, [r4, #0]
 8009fb0:	6909      	ldr	r1, [r1, #16]
 8009fb2:	eba5 0901 	sub.w	r9, r5, r1
 8009fb6:	6965      	ldr	r5, [r4, #20]
 8009fb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	444b      	add	r3, r9
 8009fc4:	106d      	asrs	r5, r5, #1
 8009fc6:	429d      	cmp	r5, r3
 8009fc8:	bf38      	it	cc
 8009fca:	461d      	movcc	r5, r3
 8009fcc:	0553      	lsls	r3, r2, #21
 8009fce:	d531      	bpl.n	800a034 <__ssputs_r+0xa0>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7fe f89f 	bl	8008114 <_malloc_r>
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	b950      	cbnz	r0, 8009ff0 <__ssputs_r+0x5c>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	f8ca 3000 	str.w	r3, [sl]
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe6:	81a3      	strh	r3, [r4, #12]
 8009fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff0:	6921      	ldr	r1, [r4, #16]
 8009ff2:	464a      	mov	r2, r9
 8009ff4:	f7ff fc1a 	bl	800982c <memcpy>
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	6126      	str	r6, [r4, #16]
 800a006:	6165      	str	r5, [r4, #20]
 800a008:	444e      	add	r6, r9
 800a00a:	eba5 0509 	sub.w	r5, r5, r9
 800a00e:	6026      	str	r6, [r4, #0]
 800a010:	60a5      	str	r5, [r4, #8]
 800a012:	463e      	mov	r6, r7
 800a014:	42be      	cmp	r6, r7
 800a016:	d900      	bls.n	800a01a <__ssputs_r+0x86>
 800a018:	463e      	mov	r6, r7
 800a01a:	6820      	ldr	r0, [r4, #0]
 800a01c:	4632      	mov	r2, r6
 800a01e:	4641      	mov	r1, r8
 800a020:	f000 f959 	bl	800a2d6 <memmove>
 800a024:	68a3      	ldr	r3, [r4, #8]
 800a026:	1b9b      	subs	r3, r3, r6
 800a028:	60a3      	str	r3, [r4, #8]
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	4433      	add	r3, r6
 800a02e:	6023      	str	r3, [r4, #0]
 800a030:	2000      	movs	r0, #0
 800a032:	e7db      	b.n	8009fec <__ssputs_r+0x58>
 800a034:	462a      	mov	r2, r5
 800a036:	f000 f968 	bl	800a30a <_realloc_r>
 800a03a:	4606      	mov	r6, r0
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d1e1      	bne.n	800a004 <__ssputs_r+0x70>
 800a040:	6921      	ldr	r1, [r4, #16]
 800a042:	4650      	mov	r0, sl
 800a044:	f7fd fffa 	bl	800803c <_free_r>
 800a048:	e7c7      	b.n	8009fda <__ssputs_r+0x46>
	...

0800a04c <_svfiprintf_r>:
 800a04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	4698      	mov	r8, r3
 800a052:	898b      	ldrh	r3, [r1, #12]
 800a054:	061b      	lsls	r3, r3, #24
 800a056:	b09d      	sub	sp, #116	; 0x74
 800a058:	4607      	mov	r7, r0
 800a05a:	460d      	mov	r5, r1
 800a05c:	4614      	mov	r4, r2
 800a05e:	d50e      	bpl.n	800a07e <_svfiprintf_r+0x32>
 800a060:	690b      	ldr	r3, [r1, #16]
 800a062:	b963      	cbnz	r3, 800a07e <_svfiprintf_r+0x32>
 800a064:	2140      	movs	r1, #64	; 0x40
 800a066:	f7fe f855 	bl	8008114 <_malloc_r>
 800a06a:	6028      	str	r0, [r5, #0]
 800a06c:	6128      	str	r0, [r5, #16]
 800a06e:	b920      	cbnz	r0, 800a07a <_svfiprintf_r+0x2e>
 800a070:	230c      	movs	r3, #12
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	f04f 30ff 	mov.w	r0, #4294967295
 800a078:	e0d1      	b.n	800a21e <_svfiprintf_r+0x1d2>
 800a07a:	2340      	movs	r3, #64	; 0x40
 800a07c:	616b      	str	r3, [r5, #20]
 800a07e:	2300      	movs	r3, #0
 800a080:	9309      	str	r3, [sp, #36]	; 0x24
 800a082:	2320      	movs	r3, #32
 800a084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a088:	f8cd 800c 	str.w	r8, [sp, #12]
 800a08c:	2330      	movs	r3, #48	; 0x30
 800a08e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a238 <_svfiprintf_r+0x1ec>
 800a092:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a096:	f04f 0901 	mov.w	r9, #1
 800a09a:	4623      	mov	r3, r4
 800a09c:	469a      	mov	sl, r3
 800a09e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0a2:	b10a      	cbz	r2, 800a0a8 <_svfiprintf_r+0x5c>
 800a0a4:	2a25      	cmp	r2, #37	; 0x25
 800a0a6:	d1f9      	bne.n	800a09c <_svfiprintf_r+0x50>
 800a0a8:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ac:	d00b      	beq.n	800a0c6 <_svfiprintf_r+0x7a>
 800a0ae:	465b      	mov	r3, fp
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	4638      	mov	r0, r7
 800a0b6:	f7ff ff6d 	bl	8009f94 <__ssputs_r>
 800a0ba:	3001      	adds	r0, #1
 800a0bc:	f000 80aa 	beq.w	800a214 <_svfiprintf_r+0x1c8>
 800a0c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0c2:	445a      	add	r2, fp
 800a0c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 80a2 	beq.w	800a214 <_svfiprintf_r+0x1c8>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0da:	f10a 0a01 	add.w	sl, sl, #1
 800a0de:	9304      	str	r3, [sp, #16]
 800a0e0:	9307      	str	r3, [sp, #28]
 800a0e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0e6:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e8:	4654      	mov	r4, sl
 800a0ea:	2205      	movs	r2, #5
 800a0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f0:	4851      	ldr	r0, [pc, #324]	; (800a238 <_svfiprintf_r+0x1ec>)
 800a0f2:	f7f6 f875 	bl	80001e0 <memchr>
 800a0f6:	9a04      	ldr	r2, [sp, #16]
 800a0f8:	b9d8      	cbnz	r0, 800a132 <_svfiprintf_r+0xe6>
 800a0fa:	06d0      	lsls	r0, r2, #27
 800a0fc:	bf44      	itt	mi
 800a0fe:	2320      	movmi	r3, #32
 800a100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a104:	0711      	lsls	r1, r2, #28
 800a106:	bf44      	itt	mi
 800a108:	232b      	movmi	r3, #43	; 0x2b
 800a10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a10e:	f89a 3000 	ldrb.w	r3, [sl]
 800a112:	2b2a      	cmp	r3, #42	; 0x2a
 800a114:	d015      	beq.n	800a142 <_svfiprintf_r+0xf6>
 800a116:	9a07      	ldr	r2, [sp, #28]
 800a118:	4654      	mov	r4, sl
 800a11a:	2000      	movs	r0, #0
 800a11c:	f04f 0c0a 	mov.w	ip, #10
 800a120:	4621      	mov	r1, r4
 800a122:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a126:	3b30      	subs	r3, #48	; 0x30
 800a128:	2b09      	cmp	r3, #9
 800a12a:	d94e      	bls.n	800a1ca <_svfiprintf_r+0x17e>
 800a12c:	b1b0      	cbz	r0, 800a15c <_svfiprintf_r+0x110>
 800a12e:	9207      	str	r2, [sp, #28]
 800a130:	e014      	b.n	800a15c <_svfiprintf_r+0x110>
 800a132:	eba0 0308 	sub.w	r3, r0, r8
 800a136:	fa09 f303 	lsl.w	r3, r9, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	46a2      	mov	sl, r4
 800a140:	e7d2      	b.n	800a0e8 <_svfiprintf_r+0x9c>
 800a142:	9b03      	ldr	r3, [sp, #12]
 800a144:	1d19      	adds	r1, r3, #4
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	9103      	str	r1, [sp, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	bfbb      	ittet	lt
 800a14e:	425b      	neglt	r3, r3
 800a150:	f042 0202 	orrlt.w	r2, r2, #2
 800a154:	9307      	strge	r3, [sp, #28]
 800a156:	9307      	strlt	r3, [sp, #28]
 800a158:	bfb8      	it	lt
 800a15a:	9204      	strlt	r2, [sp, #16]
 800a15c:	7823      	ldrb	r3, [r4, #0]
 800a15e:	2b2e      	cmp	r3, #46	; 0x2e
 800a160:	d10c      	bne.n	800a17c <_svfiprintf_r+0x130>
 800a162:	7863      	ldrb	r3, [r4, #1]
 800a164:	2b2a      	cmp	r3, #42	; 0x2a
 800a166:	d135      	bne.n	800a1d4 <_svfiprintf_r+0x188>
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	1d1a      	adds	r2, r3, #4
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	9203      	str	r2, [sp, #12]
 800a170:	2b00      	cmp	r3, #0
 800a172:	bfb8      	it	lt
 800a174:	f04f 33ff 	movlt.w	r3, #4294967295
 800a178:	3402      	adds	r4, #2
 800a17a:	9305      	str	r3, [sp, #20]
 800a17c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a248 <_svfiprintf_r+0x1fc>
 800a180:	7821      	ldrb	r1, [r4, #0]
 800a182:	2203      	movs	r2, #3
 800a184:	4650      	mov	r0, sl
 800a186:	f7f6 f82b 	bl	80001e0 <memchr>
 800a18a:	b140      	cbz	r0, 800a19e <_svfiprintf_r+0x152>
 800a18c:	2340      	movs	r3, #64	; 0x40
 800a18e:	eba0 000a 	sub.w	r0, r0, sl
 800a192:	fa03 f000 	lsl.w	r0, r3, r0
 800a196:	9b04      	ldr	r3, [sp, #16]
 800a198:	4303      	orrs	r3, r0
 800a19a:	3401      	adds	r4, #1
 800a19c:	9304      	str	r3, [sp, #16]
 800a19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a2:	4826      	ldr	r0, [pc, #152]	; (800a23c <_svfiprintf_r+0x1f0>)
 800a1a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a8:	2206      	movs	r2, #6
 800a1aa:	f7f6 f819 	bl	80001e0 <memchr>
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d038      	beq.n	800a224 <_svfiprintf_r+0x1d8>
 800a1b2:	4b23      	ldr	r3, [pc, #140]	; (800a240 <_svfiprintf_r+0x1f4>)
 800a1b4:	bb1b      	cbnz	r3, 800a1fe <_svfiprintf_r+0x1b2>
 800a1b6:	9b03      	ldr	r3, [sp, #12]
 800a1b8:	3307      	adds	r3, #7
 800a1ba:	f023 0307 	bic.w	r3, r3, #7
 800a1be:	3308      	adds	r3, #8
 800a1c0:	9303      	str	r3, [sp, #12]
 800a1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c4:	4433      	add	r3, r6
 800a1c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c8:	e767      	b.n	800a09a <_svfiprintf_r+0x4e>
 800a1ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	e7a5      	b.n	800a120 <_svfiprintf_r+0xd4>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	3401      	adds	r4, #1
 800a1d8:	9305      	str	r3, [sp, #20]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	f04f 0c0a 	mov.w	ip, #10
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1e6:	3a30      	subs	r2, #48	; 0x30
 800a1e8:	2a09      	cmp	r2, #9
 800a1ea:	d903      	bls.n	800a1f4 <_svfiprintf_r+0x1a8>
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0c5      	beq.n	800a17c <_svfiprintf_r+0x130>
 800a1f0:	9105      	str	r1, [sp, #20]
 800a1f2:	e7c3      	b.n	800a17c <_svfiprintf_r+0x130>
 800a1f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e7f0      	b.n	800a1e0 <_svfiprintf_r+0x194>
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	462a      	mov	r2, r5
 800a204:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <_svfiprintf_r+0x1f8>)
 800a206:	a904      	add	r1, sp, #16
 800a208:	4638      	mov	r0, r7
 800a20a:	f7fe f897 	bl	800833c <_printf_float>
 800a20e:	1c42      	adds	r2, r0, #1
 800a210:	4606      	mov	r6, r0
 800a212:	d1d6      	bne.n	800a1c2 <_svfiprintf_r+0x176>
 800a214:	89ab      	ldrh	r3, [r5, #12]
 800a216:	065b      	lsls	r3, r3, #25
 800a218:	f53f af2c 	bmi.w	800a074 <_svfiprintf_r+0x28>
 800a21c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a21e:	b01d      	add	sp, #116	; 0x74
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	ab03      	add	r3, sp, #12
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	462a      	mov	r2, r5
 800a22a:	4b06      	ldr	r3, [pc, #24]	; (800a244 <_svfiprintf_r+0x1f8>)
 800a22c:	a904      	add	r1, sp, #16
 800a22e:	4638      	mov	r0, r7
 800a230:	f7fe fb28 	bl	8008884 <_printf_i>
 800a234:	e7eb      	b.n	800a20e <_svfiprintf_r+0x1c2>
 800a236:	bf00      	nop
 800a238:	0800d1dc 	.word	0x0800d1dc
 800a23c:	0800d1e6 	.word	0x0800d1e6
 800a240:	0800833d 	.word	0x0800833d
 800a244:	08009f95 	.word	0x08009f95
 800a248:	0800d1e2 	.word	0x0800d1e2

0800a24c <__assert_func>:
 800a24c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a24e:	4614      	mov	r4, r2
 800a250:	461a      	mov	r2, r3
 800a252:	4b09      	ldr	r3, [pc, #36]	; (800a278 <__assert_func+0x2c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4605      	mov	r5, r0
 800a258:	68d8      	ldr	r0, [r3, #12]
 800a25a:	b14c      	cbz	r4, 800a270 <__assert_func+0x24>
 800a25c:	4b07      	ldr	r3, [pc, #28]	; (800a27c <__assert_func+0x30>)
 800a25e:	9100      	str	r1, [sp, #0]
 800a260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a264:	4906      	ldr	r1, [pc, #24]	; (800a280 <__assert_func+0x34>)
 800a266:	462b      	mov	r3, r5
 800a268:	f000 f80e 	bl	800a288 <fiprintf>
 800a26c:	f000 faa4 	bl	800a7b8 <abort>
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <__assert_func+0x38>)
 800a272:	461c      	mov	r4, r3
 800a274:	e7f3      	b.n	800a25e <__assert_func+0x12>
 800a276:	bf00      	nop
 800a278:	2000001c 	.word	0x2000001c
 800a27c:	0800d1ed 	.word	0x0800d1ed
 800a280:	0800d1fa 	.word	0x0800d1fa
 800a284:	0800d228 	.word	0x0800d228

0800a288 <fiprintf>:
 800a288:	b40e      	push	{r1, r2, r3}
 800a28a:	b503      	push	{r0, r1, lr}
 800a28c:	4601      	mov	r1, r0
 800a28e:	ab03      	add	r3, sp, #12
 800a290:	4805      	ldr	r0, [pc, #20]	; (800a2a8 <fiprintf+0x20>)
 800a292:	f853 2b04 	ldr.w	r2, [r3], #4
 800a296:	6800      	ldr	r0, [r0, #0]
 800a298:	9301      	str	r3, [sp, #4]
 800a29a:	f000 f88f 	bl	800a3bc <_vfiprintf_r>
 800a29e:	b002      	add	sp, #8
 800a2a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a4:	b003      	add	sp, #12
 800a2a6:	4770      	bx	lr
 800a2a8:	2000001c 	.word	0x2000001c

0800a2ac <__retarget_lock_init_recursive>:
 800a2ac:	4770      	bx	lr

0800a2ae <__retarget_lock_acquire_recursive>:
 800a2ae:	4770      	bx	lr

0800a2b0 <__retarget_lock_release_recursive>:
 800a2b0:	4770      	bx	lr

0800a2b2 <__ascii_mbtowc>:
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	b901      	cbnz	r1, 800a2b8 <__ascii_mbtowc+0x6>
 800a2b6:	a901      	add	r1, sp, #4
 800a2b8:	b142      	cbz	r2, 800a2cc <__ascii_mbtowc+0x1a>
 800a2ba:	b14b      	cbz	r3, 800a2d0 <__ascii_mbtowc+0x1e>
 800a2bc:	7813      	ldrb	r3, [r2, #0]
 800a2be:	600b      	str	r3, [r1, #0]
 800a2c0:	7812      	ldrb	r2, [r2, #0]
 800a2c2:	1e10      	subs	r0, r2, #0
 800a2c4:	bf18      	it	ne
 800a2c6:	2001      	movne	r0, #1
 800a2c8:	b002      	add	sp, #8
 800a2ca:	4770      	bx	lr
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	e7fb      	b.n	800a2c8 <__ascii_mbtowc+0x16>
 800a2d0:	f06f 0001 	mvn.w	r0, #1
 800a2d4:	e7f8      	b.n	800a2c8 <__ascii_mbtowc+0x16>

0800a2d6 <memmove>:
 800a2d6:	4288      	cmp	r0, r1
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	eb01 0402 	add.w	r4, r1, r2
 800a2de:	d902      	bls.n	800a2e6 <memmove+0x10>
 800a2e0:	4284      	cmp	r4, r0
 800a2e2:	4623      	mov	r3, r4
 800a2e4:	d807      	bhi.n	800a2f6 <memmove+0x20>
 800a2e6:	1e43      	subs	r3, r0, #1
 800a2e8:	42a1      	cmp	r1, r4
 800a2ea:	d008      	beq.n	800a2fe <memmove+0x28>
 800a2ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2f4:	e7f8      	b.n	800a2e8 <memmove+0x12>
 800a2f6:	4402      	add	r2, r0
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	428a      	cmp	r2, r1
 800a2fc:	d100      	bne.n	800a300 <memmove+0x2a>
 800a2fe:	bd10      	pop	{r4, pc}
 800a300:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a304:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a308:	e7f7      	b.n	800a2fa <memmove+0x24>

0800a30a <_realloc_r>:
 800a30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30e:	4680      	mov	r8, r0
 800a310:	4614      	mov	r4, r2
 800a312:	460e      	mov	r6, r1
 800a314:	b921      	cbnz	r1, 800a320 <_realloc_r+0x16>
 800a316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	4611      	mov	r1, r2
 800a31c:	f7fd befa 	b.w	8008114 <_malloc_r>
 800a320:	b92a      	cbnz	r2, 800a32e <_realloc_r+0x24>
 800a322:	f7fd fe8b 	bl	800803c <_free_r>
 800a326:	4625      	mov	r5, r4
 800a328:	4628      	mov	r0, r5
 800a32a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32e:	f000 fc67 	bl	800ac00 <_malloc_usable_size_r>
 800a332:	4284      	cmp	r4, r0
 800a334:	4607      	mov	r7, r0
 800a336:	d802      	bhi.n	800a33e <_realloc_r+0x34>
 800a338:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a33c:	d812      	bhi.n	800a364 <_realloc_r+0x5a>
 800a33e:	4621      	mov	r1, r4
 800a340:	4640      	mov	r0, r8
 800a342:	f7fd fee7 	bl	8008114 <_malloc_r>
 800a346:	4605      	mov	r5, r0
 800a348:	2800      	cmp	r0, #0
 800a34a:	d0ed      	beq.n	800a328 <_realloc_r+0x1e>
 800a34c:	42bc      	cmp	r4, r7
 800a34e:	4622      	mov	r2, r4
 800a350:	4631      	mov	r1, r6
 800a352:	bf28      	it	cs
 800a354:	463a      	movcs	r2, r7
 800a356:	f7ff fa69 	bl	800982c <memcpy>
 800a35a:	4631      	mov	r1, r6
 800a35c:	4640      	mov	r0, r8
 800a35e:	f7fd fe6d 	bl	800803c <_free_r>
 800a362:	e7e1      	b.n	800a328 <_realloc_r+0x1e>
 800a364:	4635      	mov	r5, r6
 800a366:	e7df      	b.n	800a328 <_realloc_r+0x1e>

0800a368 <__sfputc_r>:
 800a368:	6893      	ldr	r3, [r2, #8]
 800a36a:	3b01      	subs	r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	b410      	push	{r4}
 800a370:	6093      	str	r3, [r2, #8]
 800a372:	da08      	bge.n	800a386 <__sfputc_r+0x1e>
 800a374:	6994      	ldr	r4, [r2, #24]
 800a376:	42a3      	cmp	r3, r4
 800a378:	db01      	blt.n	800a37e <__sfputc_r+0x16>
 800a37a:	290a      	cmp	r1, #10
 800a37c:	d103      	bne.n	800a386 <__sfputc_r+0x1e>
 800a37e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a382:	f000 b94b 	b.w	800a61c <__swbuf_r>
 800a386:	6813      	ldr	r3, [r2, #0]
 800a388:	1c58      	adds	r0, r3, #1
 800a38a:	6010      	str	r0, [r2, #0]
 800a38c:	7019      	strb	r1, [r3, #0]
 800a38e:	4608      	mov	r0, r1
 800a390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <__sfputs_r>:
 800a396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a398:	4606      	mov	r6, r0
 800a39a:	460f      	mov	r7, r1
 800a39c:	4614      	mov	r4, r2
 800a39e:	18d5      	adds	r5, r2, r3
 800a3a0:	42ac      	cmp	r4, r5
 800a3a2:	d101      	bne.n	800a3a8 <__sfputs_r+0x12>
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	e007      	b.n	800a3b8 <__sfputs_r+0x22>
 800a3a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ac:	463a      	mov	r2, r7
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7ff ffda 	bl	800a368 <__sfputc_r>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d1f3      	bne.n	800a3a0 <__sfputs_r+0xa>
 800a3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3bc <_vfiprintf_r>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	b09d      	sub	sp, #116	; 0x74
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	4698      	mov	r8, r3
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	b118      	cbz	r0, 800a3d4 <_vfiprintf_r+0x18>
 800a3cc:	6983      	ldr	r3, [r0, #24]
 800a3ce:	b90b      	cbnz	r3, 800a3d4 <_vfiprintf_r+0x18>
 800a3d0:	f000 fb14 	bl	800a9fc <__sinit>
 800a3d4:	4b89      	ldr	r3, [pc, #548]	; (800a5fc <_vfiprintf_r+0x240>)
 800a3d6:	429d      	cmp	r5, r3
 800a3d8:	d11b      	bne.n	800a412 <_vfiprintf_r+0x56>
 800a3da:	6875      	ldr	r5, [r6, #4]
 800a3dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3de:	07d9      	lsls	r1, r3, #31
 800a3e0:	d405      	bmi.n	800a3ee <_vfiprintf_r+0x32>
 800a3e2:	89ab      	ldrh	r3, [r5, #12]
 800a3e4:	059a      	lsls	r2, r3, #22
 800a3e6:	d402      	bmi.n	800a3ee <_vfiprintf_r+0x32>
 800a3e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ea:	f7ff ff60 	bl	800a2ae <__retarget_lock_acquire_recursive>
 800a3ee:	89ab      	ldrh	r3, [r5, #12]
 800a3f0:	071b      	lsls	r3, r3, #28
 800a3f2:	d501      	bpl.n	800a3f8 <_vfiprintf_r+0x3c>
 800a3f4:	692b      	ldr	r3, [r5, #16]
 800a3f6:	b9eb      	cbnz	r3, 800a434 <_vfiprintf_r+0x78>
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f000 f96e 	bl	800a6dc <__swsetup_r>
 800a400:	b1c0      	cbz	r0, 800a434 <_vfiprintf_r+0x78>
 800a402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a404:	07dc      	lsls	r4, r3, #31
 800a406:	d50e      	bpl.n	800a426 <_vfiprintf_r+0x6a>
 800a408:	f04f 30ff 	mov.w	r0, #4294967295
 800a40c:	b01d      	add	sp, #116	; 0x74
 800a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a412:	4b7b      	ldr	r3, [pc, #492]	; (800a600 <_vfiprintf_r+0x244>)
 800a414:	429d      	cmp	r5, r3
 800a416:	d101      	bne.n	800a41c <_vfiprintf_r+0x60>
 800a418:	68b5      	ldr	r5, [r6, #8]
 800a41a:	e7df      	b.n	800a3dc <_vfiprintf_r+0x20>
 800a41c:	4b79      	ldr	r3, [pc, #484]	; (800a604 <_vfiprintf_r+0x248>)
 800a41e:	429d      	cmp	r5, r3
 800a420:	bf08      	it	eq
 800a422:	68f5      	ldreq	r5, [r6, #12]
 800a424:	e7da      	b.n	800a3dc <_vfiprintf_r+0x20>
 800a426:	89ab      	ldrh	r3, [r5, #12]
 800a428:	0598      	lsls	r0, r3, #22
 800a42a:	d4ed      	bmi.n	800a408 <_vfiprintf_r+0x4c>
 800a42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a42e:	f7ff ff3f 	bl	800a2b0 <__retarget_lock_release_recursive>
 800a432:	e7e9      	b.n	800a408 <_vfiprintf_r+0x4c>
 800a434:	2300      	movs	r3, #0
 800a436:	9309      	str	r3, [sp, #36]	; 0x24
 800a438:	2320      	movs	r3, #32
 800a43a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a43e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a442:	2330      	movs	r3, #48	; 0x30
 800a444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a608 <_vfiprintf_r+0x24c>
 800a448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a44c:	f04f 0901 	mov.w	r9, #1
 800a450:	4623      	mov	r3, r4
 800a452:	469a      	mov	sl, r3
 800a454:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a458:	b10a      	cbz	r2, 800a45e <_vfiprintf_r+0xa2>
 800a45a:	2a25      	cmp	r2, #37	; 0x25
 800a45c:	d1f9      	bne.n	800a452 <_vfiprintf_r+0x96>
 800a45e:	ebba 0b04 	subs.w	fp, sl, r4
 800a462:	d00b      	beq.n	800a47c <_vfiprintf_r+0xc0>
 800a464:	465b      	mov	r3, fp
 800a466:	4622      	mov	r2, r4
 800a468:	4629      	mov	r1, r5
 800a46a:	4630      	mov	r0, r6
 800a46c:	f7ff ff93 	bl	800a396 <__sfputs_r>
 800a470:	3001      	adds	r0, #1
 800a472:	f000 80aa 	beq.w	800a5ca <_vfiprintf_r+0x20e>
 800a476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a478:	445a      	add	r2, fp
 800a47a:	9209      	str	r2, [sp, #36]	; 0x24
 800a47c:	f89a 3000 	ldrb.w	r3, [sl]
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 80a2 	beq.w	800a5ca <_vfiprintf_r+0x20e>
 800a486:	2300      	movs	r3, #0
 800a488:	f04f 32ff 	mov.w	r2, #4294967295
 800a48c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a490:	f10a 0a01 	add.w	sl, sl, #1
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	9307      	str	r3, [sp, #28]
 800a498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a49c:	931a      	str	r3, [sp, #104]	; 0x68
 800a49e:	4654      	mov	r4, sl
 800a4a0:	2205      	movs	r2, #5
 800a4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a6:	4858      	ldr	r0, [pc, #352]	; (800a608 <_vfiprintf_r+0x24c>)
 800a4a8:	f7f5 fe9a 	bl	80001e0 <memchr>
 800a4ac:	9a04      	ldr	r2, [sp, #16]
 800a4ae:	b9d8      	cbnz	r0, 800a4e8 <_vfiprintf_r+0x12c>
 800a4b0:	06d1      	lsls	r1, r2, #27
 800a4b2:	bf44      	itt	mi
 800a4b4:	2320      	movmi	r3, #32
 800a4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ba:	0713      	lsls	r3, r2, #28
 800a4bc:	bf44      	itt	mi
 800a4be:	232b      	movmi	r3, #43	; 0x2b
 800a4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ca:	d015      	beq.n	800a4f8 <_vfiprintf_r+0x13c>
 800a4cc:	9a07      	ldr	r2, [sp, #28]
 800a4ce:	4654      	mov	r4, sl
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	f04f 0c0a 	mov.w	ip, #10
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4dc:	3b30      	subs	r3, #48	; 0x30
 800a4de:	2b09      	cmp	r3, #9
 800a4e0:	d94e      	bls.n	800a580 <_vfiprintf_r+0x1c4>
 800a4e2:	b1b0      	cbz	r0, 800a512 <_vfiprintf_r+0x156>
 800a4e4:	9207      	str	r2, [sp, #28]
 800a4e6:	e014      	b.n	800a512 <_vfiprintf_r+0x156>
 800a4e8:	eba0 0308 	sub.w	r3, r0, r8
 800a4ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	46a2      	mov	sl, r4
 800a4f6:	e7d2      	b.n	800a49e <_vfiprintf_r+0xe2>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	1d19      	adds	r1, r3, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	9103      	str	r1, [sp, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	bfbb      	ittet	lt
 800a504:	425b      	neglt	r3, r3
 800a506:	f042 0202 	orrlt.w	r2, r2, #2
 800a50a:	9307      	strge	r3, [sp, #28]
 800a50c:	9307      	strlt	r3, [sp, #28]
 800a50e:	bfb8      	it	lt
 800a510:	9204      	strlt	r2, [sp, #16]
 800a512:	7823      	ldrb	r3, [r4, #0]
 800a514:	2b2e      	cmp	r3, #46	; 0x2e
 800a516:	d10c      	bne.n	800a532 <_vfiprintf_r+0x176>
 800a518:	7863      	ldrb	r3, [r4, #1]
 800a51a:	2b2a      	cmp	r3, #42	; 0x2a
 800a51c:	d135      	bne.n	800a58a <_vfiprintf_r+0x1ce>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	1d1a      	adds	r2, r3, #4
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	9203      	str	r2, [sp, #12]
 800a526:	2b00      	cmp	r3, #0
 800a528:	bfb8      	it	lt
 800a52a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a52e:	3402      	adds	r4, #2
 800a530:	9305      	str	r3, [sp, #20]
 800a532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a618 <_vfiprintf_r+0x25c>
 800a536:	7821      	ldrb	r1, [r4, #0]
 800a538:	2203      	movs	r2, #3
 800a53a:	4650      	mov	r0, sl
 800a53c:	f7f5 fe50 	bl	80001e0 <memchr>
 800a540:	b140      	cbz	r0, 800a554 <_vfiprintf_r+0x198>
 800a542:	2340      	movs	r3, #64	; 0x40
 800a544:	eba0 000a 	sub.w	r0, r0, sl
 800a548:	fa03 f000 	lsl.w	r0, r3, r0
 800a54c:	9b04      	ldr	r3, [sp, #16]
 800a54e:	4303      	orrs	r3, r0
 800a550:	3401      	adds	r4, #1
 800a552:	9304      	str	r3, [sp, #16]
 800a554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a558:	482c      	ldr	r0, [pc, #176]	; (800a60c <_vfiprintf_r+0x250>)
 800a55a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a55e:	2206      	movs	r2, #6
 800a560:	f7f5 fe3e 	bl	80001e0 <memchr>
 800a564:	2800      	cmp	r0, #0
 800a566:	d03f      	beq.n	800a5e8 <_vfiprintf_r+0x22c>
 800a568:	4b29      	ldr	r3, [pc, #164]	; (800a610 <_vfiprintf_r+0x254>)
 800a56a:	bb1b      	cbnz	r3, 800a5b4 <_vfiprintf_r+0x1f8>
 800a56c:	9b03      	ldr	r3, [sp, #12]
 800a56e:	3307      	adds	r3, #7
 800a570:	f023 0307 	bic.w	r3, r3, #7
 800a574:	3308      	adds	r3, #8
 800a576:	9303      	str	r3, [sp, #12]
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	443b      	add	r3, r7
 800a57c:	9309      	str	r3, [sp, #36]	; 0x24
 800a57e:	e767      	b.n	800a450 <_vfiprintf_r+0x94>
 800a580:	fb0c 3202 	mla	r2, ip, r2, r3
 800a584:	460c      	mov	r4, r1
 800a586:	2001      	movs	r0, #1
 800a588:	e7a5      	b.n	800a4d6 <_vfiprintf_r+0x11a>
 800a58a:	2300      	movs	r3, #0
 800a58c:	3401      	adds	r4, #1
 800a58e:	9305      	str	r3, [sp, #20]
 800a590:	4619      	mov	r1, r3
 800a592:	f04f 0c0a 	mov.w	ip, #10
 800a596:	4620      	mov	r0, r4
 800a598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a59c:	3a30      	subs	r2, #48	; 0x30
 800a59e:	2a09      	cmp	r2, #9
 800a5a0:	d903      	bls.n	800a5aa <_vfiprintf_r+0x1ee>
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0c5      	beq.n	800a532 <_vfiprintf_r+0x176>
 800a5a6:	9105      	str	r1, [sp, #20]
 800a5a8:	e7c3      	b.n	800a532 <_vfiprintf_r+0x176>
 800a5aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e7f0      	b.n	800a596 <_vfiprintf_r+0x1da>
 800a5b4:	ab03      	add	r3, sp, #12
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	4b16      	ldr	r3, [pc, #88]	; (800a614 <_vfiprintf_r+0x258>)
 800a5bc:	a904      	add	r1, sp, #16
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7fd febc 	bl	800833c <_printf_float>
 800a5c4:	4607      	mov	r7, r0
 800a5c6:	1c78      	adds	r0, r7, #1
 800a5c8:	d1d6      	bne.n	800a578 <_vfiprintf_r+0x1bc>
 800a5ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5cc:	07d9      	lsls	r1, r3, #31
 800a5ce:	d405      	bmi.n	800a5dc <_vfiprintf_r+0x220>
 800a5d0:	89ab      	ldrh	r3, [r5, #12]
 800a5d2:	059a      	lsls	r2, r3, #22
 800a5d4:	d402      	bmi.n	800a5dc <_vfiprintf_r+0x220>
 800a5d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d8:	f7ff fe6a 	bl	800a2b0 <__retarget_lock_release_recursive>
 800a5dc:	89ab      	ldrh	r3, [r5, #12]
 800a5de:	065b      	lsls	r3, r3, #25
 800a5e0:	f53f af12 	bmi.w	800a408 <_vfiprintf_r+0x4c>
 800a5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5e6:	e711      	b.n	800a40c <_vfiprintf_r+0x50>
 800a5e8:	ab03      	add	r3, sp, #12
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	462a      	mov	r2, r5
 800a5ee:	4b09      	ldr	r3, [pc, #36]	; (800a614 <_vfiprintf_r+0x258>)
 800a5f0:	a904      	add	r1, sp, #16
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7fe f946 	bl	8008884 <_printf_i>
 800a5f8:	e7e4      	b.n	800a5c4 <_vfiprintf_r+0x208>
 800a5fa:	bf00      	nop
 800a5fc:	0800d354 	.word	0x0800d354
 800a600:	0800d374 	.word	0x0800d374
 800a604:	0800d334 	.word	0x0800d334
 800a608:	0800d1dc 	.word	0x0800d1dc
 800a60c:	0800d1e6 	.word	0x0800d1e6
 800a610:	0800833d 	.word	0x0800833d
 800a614:	0800a397 	.word	0x0800a397
 800a618:	0800d1e2 	.word	0x0800d1e2

0800a61c <__swbuf_r>:
 800a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a61e:	460e      	mov	r6, r1
 800a620:	4614      	mov	r4, r2
 800a622:	4605      	mov	r5, r0
 800a624:	b118      	cbz	r0, 800a62e <__swbuf_r+0x12>
 800a626:	6983      	ldr	r3, [r0, #24]
 800a628:	b90b      	cbnz	r3, 800a62e <__swbuf_r+0x12>
 800a62a:	f000 f9e7 	bl	800a9fc <__sinit>
 800a62e:	4b21      	ldr	r3, [pc, #132]	; (800a6b4 <__swbuf_r+0x98>)
 800a630:	429c      	cmp	r4, r3
 800a632:	d12b      	bne.n	800a68c <__swbuf_r+0x70>
 800a634:	686c      	ldr	r4, [r5, #4]
 800a636:	69a3      	ldr	r3, [r4, #24]
 800a638:	60a3      	str	r3, [r4, #8]
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	071a      	lsls	r2, r3, #28
 800a63e:	d52f      	bpl.n	800a6a0 <__swbuf_r+0x84>
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	b36b      	cbz	r3, 800a6a0 <__swbuf_r+0x84>
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	6820      	ldr	r0, [r4, #0]
 800a648:	1ac0      	subs	r0, r0, r3
 800a64a:	6963      	ldr	r3, [r4, #20]
 800a64c:	b2f6      	uxtb	r6, r6
 800a64e:	4283      	cmp	r3, r0
 800a650:	4637      	mov	r7, r6
 800a652:	dc04      	bgt.n	800a65e <__swbuf_r+0x42>
 800a654:	4621      	mov	r1, r4
 800a656:	4628      	mov	r0, r5
 800a658:	f000 f93c 	bl	800a8d4 <_fflush_r>
 800a65c:	bb30      	cbnz	r0, 800a6ac <__swbuf_r+0x90>
 800a65e:	68a3      	ldr	r3, [r4, #8]
 800a660:	3b01      	subs	r3, #1
 800a662:	60a3      	str	r3, [r4, #8]
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	1c5a      	adds	r2, r3, #1
 800a668:	6022      	str	r2, [r4, #0]
 800a66a:	701e      	strb	r6, [r3, #0]
 800a66c:	6963      	ldr	r3, [r4, #20]
 800a66e:	3001      	adds	r0, #1
 800a670:	4283      	cmp	r3, r0
 800a672:	d004      	beq.n	800a67e <__swbuf_r+0x62>
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	07db      	lsls	r3, r3, #31
 800a678:	d506      	bpl.n	800a688 <__swbuf_r+0x6c>
 800a67a:	2e0a      	cmp	r6, #10
 800a67c:	d104      	bne.n	800a688 <__swbuf_r+0x6c>
 800a67e:	4621      	mov	r1, r4
 800a680:	4628      	mov	r0, r5
 800a682:	f000 f927 	bl	800a8d4 <_fflush_r>
 800a686:	b988      	cbnz	r0, 800a6ac <__swbuf_r+0x90>
 800a688:	4638      	mov	r0, r7
 800a68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68c:	4b0a      	ldr	r3, [pc, #40]	; (800a6b8 <__swbuf_r+0x9c>)
 800a68e:	429c      	cmp	r4, r3
 800a690:	d101      	bne.n	800a696 <__swbuf_r+0x7a>
 800a692:	68ac      	ldr	r4, [r5, #8]
 800a694:	e7cf      	b.n	800a636 <__swbuf_r+0x1a>
 800a696:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <__swbuf_r+0xa0>)
 800a698:	429c      	cmp	r4, r3
 800a69a:	bf08      	it	eq
 800a69c:	68ec      	ldreq	r4, [r5, #12]
 800a69e:	e7ca      	b.n	800a636 <__swbuf_r+0x1a>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f000 f81a 	bl	800a6dc <__swsetup_r>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	d0cb      	beq.n	800a644 <__swbuf_r+0x28>
 800a6ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a6b0:	e7ea      	b.n	800a688 <__swbuf_r+0x6c>
 800a6b2:	bf00      	nop
 800a6b4:	0800d354 	.word	0x0800d354
 800a6b8:	0800d374 	.word	0x0800d374
 800a6bc:	0800d334 	.word	0x0800d334

0800a6c0 <__ascii_wctomb>:
 800a6c0:	b149      	cbz	r1, 800a6d6 <__ascii_wctomb+0x16>
 800a6c2:	2aff      	cmp	r2, #255	; 0xff
 800a6c4:	bf85      	ittet	hi
 800a6c6:	238a      	movhi	r3, #138	; 0x8a
 800a6c8:	6003      	strhi	r3, [r0, #0]
 800a6ca:	700a      	strbls	r2, [r1, #0]
 800a6cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6d0:	bf98      	it	ls
 800a6d2:	2001      	movls	r0, #1
 800a6d4:	4770      	bx	lr
 800a6d6:	4608      	mov	r0, r1
 800a6d8:	4770      	bx	lr
	...

0800a6dc <__swsetup_r>:
 800a6dc:	4b32      	ldr	r3, [pc, #200]	; (800a7a8 <__swsetup_r+0xcc>)
 800a6de:	b570      	push	{r4, r5, r6, lr}
 800a6e0:	681d      	ldr	r5, [r3, #0]
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	b125      	cbz	r5, 800a6f2 <__swsetup_r+0x16>
 800a6e8:	69ab      	ldr	r3, [r5, #24]
 800a6ea:	b913      	cbnz	r3, 800a6f2 <__swsetup_r+0x16>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	f000 f985 	bl	800a9fc <__sinit>
 800a6f2:	4b2e      	ldr	r3, [pc, #184]	; (800a7ac <__swsetup_r+0xd0>)
 800a6f4:	429c      	cmp	r4, r3
 800a6f6:	d10f      	bne.n	800a718 <__swsetup_r+0x3c>
 800a6f8:	686c      	ldr	r4, [r5, #4]
 800a6fa:	89a3      	ldrh	r3, [r4, #12]
 800a6fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a700:	0719      	lsls	r1, r3, #28
 800a702:	d42c      	bmi.n	800a75e <__swsetup_r+0x82>
 800a704:	06dd      	lsls	r5, r3, #27
 800a706:	d411      	bmi.n	800a72c <__swsetup_r+0x50>
 800a708:	2309      	movs	r3, #9
 800a70a:	6033      	str	r3, [r6, #0]
 800a70c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a710:	81a3      	strh	r3, [r4, #12]
 800a712:	f04f 30ff 	mov.w	r0, #4294967295
 800a716:	e03e      	b.n	800a796 <__swsetup_r+0xba>
 800a718:	4b25      	ldr	r3, [pc, #148]	; (800a7b0 <__swsetup_r+0xd4>)
 800a71a:	429c      	cmp	r4, r3
 800a71c:	d101      	bne.n	800a722 <__swsetup_r+0x46>
 800a71e:	68ac      	ldr	r4, [r5, #8]
 800a720:	e7eb      	b.n	800a6fa <__swsetup_r+0x1e>
 800a722:	4b24      	ldr	r3, [pc, #144]	; (800a7b4 <__swsetup_r+0xd8>)
 800a724:	429c      	cmp	r4, r3
 800a726:	bf08      	it	eq
 800a728:	68ec      	ldreq	r4, [r5, #12]
 800a72a:	e7e6      	b.n	800a6fa <__swsetup_r+0x1e>
 800a72c:	0758      	lsls	r0, r3, #29
 800a72e:	d512      	bpl.n	800a756 <__swsetup_r+0x7a>
 800a730:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a732:	b141      	cbz	r1, 800a746 <__swsetup_r+0x6a>
 800a734:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a738:	4299      	cmp	r1, r3
 800a73a:	d002      	beq.n	800a742 <__swsetup_r+0x66>
 800a73c:	4630      	mov	r0, r6
 800a73e:	f7fd fc7d 	bl	800803c <_free_r>
 800a742:	2300      	movs	r3, #0
 800a744:	6363      	str	r3, [r4, #52]	; 0x34
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a74c:	81a3      	strh	r3, [r4, #12]
 800a74e:	2300      	movs	r3, #0
 800a750:	6063      	str	r3, [r4, #4]
 800a752:	6923      	ldr	r3, [r4, #16]
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	f043 0308 	orr.w	r3, r3, #8
 800a75c:	81a3      	strh	r3, [r4, #12]
 800a75e:	6923      	ldr	r3, [r4, #16]
 800a760:	b94b      	cbnz	r3, 800a776 <__swsetup_r+0x9a>
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a76c:	d003      	beq.n	800a776 <__swsetup_r+0x9a>
 800a76e:	4621      	mov	r1, r4
 800a770:	4630      	mov	r0, r6
 800a772:	f000 fa05 	bl	800ab80 <__smakebuf_r>
 800a776:	89a0      	ldrh	r0, [r4, #12]
 800a778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a77c:	f010 0301 	ands.w	r3, r0, #1
 800a780:	d00a      	beq.n	800a798 <__swsetup_r+0xbc>
 800a782:	2300      	movs	r3, #0
 800a784:	60a3      	str	r3, [r4, #8]
 800a786:	6963      	ldr	r3, [r4, #20]
 800a788:	425b      	negs	r3, r3
 800a78a:	61a3      	str	r3, [r4, #24]
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	b943      	cbnz	r3, 800a7a2 <__swsetup_r+0xc6>
 800a790:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a794:	d1ba      	bne.n	800a70c <__swsetup_r+0x30>
 800a796:	bd70      	pop	{r4, r5, r6, pc}
 800a798:	0781      	lsls	r1, r0, #30
 800a79a:	bf58      	it	pl
 800a79c:	6963      	ldrpl	r3, [r4, #20]
 800a79e:	60a3      	str	r3, [r4, #8]
 800a7a0:	e7f4      	b.n	800a78c <__swsetup_r+0xb0>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	e7f7      	b.n	800a796 <__swsetup_r+0xba>
 800a7a6:	bf00      	nop
 800a7a8:	2000001c 	.word	0x2000001c
 800a7ac:	0800d354 	.word	0x0800d354
 800a7b0:	0800d374 	.word	0x0800d374
 800a7b4:	0800d334 	.word	0x0800d334

0800a7b8 <abort>:
 800a7b8:	b508      	push	{r3, lr}
 800a7ba:	2006      	movs	r0, #6
 800a7bc:	f000 fa50 	bl	800ac60 <raise>
 800a7c0:	2001      	movs	r0, #1
 800a7c2:	f7f7 ff69 	bl	8002698 <_exit>
	...

0800a7c8 <__sflush_r>:
 800a7c8:	898a      	ldrh	r2, [r1, #12]
 800a7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ce:	4605      	mov	r5, r0
 800a7d0:	0710      	lsls	r0, r2, #28
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	d458      	bmi.n	800a888 <__sflush_r+0xc0>
 800a7d6:	684b      	ldr	r3, [r1, #4]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc05      	bgt.n	800a7e8 <__sflush_r+0x20>
 800a7dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	dc02      	bgt.n	800a7e8 <__sflush_r+0x20>
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d0f9      	beq.n	800a7e2 <__sflush_r+0x1a>
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7f4:	682f      	ldr	r7, [r5, #0]
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	d032      	beq.n	800a860 <__sflush_r+0x98>
 800a7fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	075a      	lsls	r2, r3, #29
 800a800:	d505      	bpl.n	800a80e <__sflush_r+0x46>
 800a802:	6863      	ldr	r3, [r4, #4]
 800a804:	1ac0      	subs	r0, r0, r3
 800a806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a808:	b10b      	cbz	r3, 800a80e <__sflush_r+0x46>
 800a80a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a80c:	1ac0      	subs	r0, r0, r3
 800a80e:	2300      	movs	r3, #0
 800a810:	4602      	mov	r2, r0
 800a812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a814:	6a21      	ldr	r1, [r4, #32]
 800a816:	4628      	mov	r0, r5
 800a818:	47b0      	blx	r6
 800a81a:	1c43      	adds	r3, r0, #1
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	d106      	bne.n	800a82e <__sflush_r+0x66>
 800a820:	6829      	ldr	r1, [r5, #0]
 800a822:	291d      	cmp	r1, #29
 800a824:	d82c      	bhi.n	800a880 <__sflush_r+0xb8>
 800a826:	4a2a      	ldr	r2, [pc, #168]	; (800a8d0 <__sflush_r+0x108>)
 800a828:	40ca      	lsrs	r2, r1
 800a82a:	07d6      	lsls	r6, r2, #31
 800a82c:	d528      	bpl.n	800a880 <__sflush_r+0xb8>
 800a82e:	2200      	movs	r2, #0
 800a830:	6062      	str	r2, [r4, #4]
 800a832:	04d9      	lsls	r1, r3, #19
 800a834:	6922      	ldr	r2, [r4, #16]
 800a836:	6022      	str	r2, [r4, #0]
 800a838:	d504      	bpl.n	800a844 <__sflush_r+0x7c>
 800a83a:	1c42      	adds	r2, r0, #1
 800a83c:	d101      	bne.n	800a842 <__sflush_r+0x7a>
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	b903      	cbnz	r3, 800a844 <__sflush_r+0x7c>
 800a842:	6560      	str	r0, [r4, #84]	; 0x54
 800a844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a846:	602f      	str	r7, [r5, #0]
 800a848:	2900      	cmp	r1, #0
 800a84a:	d0ca      	beq.n	800a7e2 <__sflush_r+0x1a>
 800a84c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a850:	4299      	cmp	r1, r3
 800a852:	d002      	beq.n	800a85a <__sflush_r+0x92>
 800a854:	4628      	mov	r0, r5
 800a856:	f7fd fbf1 	bl	800803c <_free_r>
 800a85a:	2000      	movs	r0, #0
 800a85c:	6360      	str	r0, [r4, #52]	; 0x34
 800a85e:	e7c1      	b.n	800a7e4 <__sflush_r+0x1c>
 800a860:	6a21      	ldr	r1, [r4, #32]
 800a862:	2301      	movs	r3, #1
 800a864:	4628      	mov	r0, r5
 800a866:	47b0      	blx	r6
 800a868:	1c41      	adds	r1, r0, #1
 800a86a:	d1c7      	bne.n	800a7fc <__sflush_r+0x34>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d0c4      	beq.n	800a7fc <__sflush_r+0x34>
 800a872:	2b1d      	cmp	r3, #29
 800a874:	d001      	beq.n	800a87a <__sflush_r+0xb2>
 800a876:	2b16      	cmp	r3, #22
 800a878:	d101      	bne.n	800a87e <__sflush_r+0xb6>
 800a87a:	602f      	str	r7, [r5, #0]
 800a87c:	e7b1      	b.n	800a7e2 <__sflush_r+0x1a>
 800a87e:	89a3      	ldrh	r3, [r4, #12]
 800a880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	e7ad      	b.n	800a7e4 <__sflush_r+0x1c>
 800a888:	690f      	ldr	r7, [r1, #16]
 800a88a:	2f00      	cmp	r7, #0
 800a88c:	d0a9      	beq.n	800a7e2 <__sflush_r+0x1a>
 800a88e:	0793      	lsls	r3, r2, #30
 800a890:	680e      	ldr	r6, [r1, #0]
 800a892:	bf08      	it	eq
 800a894:	694b      	ldreq	r3, [r1, #20]
 800a896:	600f      	str	r7, [r1, #0]
 800a898:	bf18      	it	ne
 800a89a:	2300      	movne	r3, #0
 800a89c:	eba6 0807 	sub.w	r8, r6, r7
 800a8a0:	608b      	str	r3, [r1, #8]
 800a8a2:	f1b8 0f00 	cmp.w	r8, #0
 800a8a6:	dd9c      	ble.n	800a7e2 <__sflush_r+0x1a>
 800a8a8:	6a21      	ldr	r1, [r4, #32]
 800a8aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8ac:	4643      	mov	r3, r8
 800a8ae:	463a      	mov	r2, r7
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	47b0      	blx	r6
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	dc06      	bgt.n	800a8c6 <__sflush_r+0xfe>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	e78e      	b.n	800a7e4 <__sflush_r+0x1c>
 800a8c6:	4407      	add	r7, r0
 800a8c8:	eba8 0800 	sub.w	r8, r8, r0
 800a8cc:	e7e9      	b.n	800a8a2 <__sflush_r+0xda>
 800a8ce:	bf00      	nop
 800a8d0:	20400001 	.word	0x20400001

0800a8d4 <_fflush_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	690b      	ldr	r3, [r1, #16]
 800a8d8:	4605      	mov	r5, r0
 800a8da:	460c      	mov	r4, r1
 800a8dc:	b913      	cbnz	r3, 800a8e4 <_fflush_r+0x10>
 800a8de:	2500      	movs	r5, #0
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	b118      	cbz	r0, 800a8ee <_fflush_r+0x1a>
 800a8e6:	6983      	ldr	r3, [r0, #24]
 800a8e8:	b90b      	cbnz	r3, 800a8ee <_fflush_r+0x1a>
 800a8ea:	f000 f887 	bl	800a9fc <__sinit>
 800a8ee:	4b14      	ldr	r3, [pc, #80]	; (800a940 <_fflush_r+0x6c>)
 800a8f0:	429c      	cmp	r4, r3
 800a8f2:	d11b      	bne.n	800a92c <_fflush_r+0x58>
 800a8f4:	686c      	ldr	r4, [r5, #4]
 800a8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0ef      	beq.n	800a8de <_fflush_r+0xa>
 800a8fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a900:	07d0      	lsls	r0, r2, #31
 800a902:	d404      	bmi.n	800a90e <_fflush_r+0x3a>
 800a904:	0599      	lsls	r1, r3, #22
 800a906:	d402      	bmi.n	800a90e <_fflush_r+0x3a>
 800a908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a90a:	f7ff fcd0 	bl	800a2ae <__retarget_lock_acquire_recursive>
 800a90e:	4628      	mov	r0, r5
 800a910:	4621      	mov	r1, r4
 800a912:	f7ff ff59 	bl	800a7c8 <__sflush_r>
 800a916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a918:	07da      	lsls	r2, r3, #31
 800a91a:	4605      	mov	r5, r0
 800a91c:	d4e0      	bmi.n	800a8e0 <_fflush_r+0xc>
 800a91e:	89a3      	ldrh	r3, [r4, #12]
 800a920:	059b      	lsls	r3, r3, #22
 800a922:	d4dd      	bmi.n	800a8e0 <_fflush_r+0xc>
 800a924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a926:	f7ff fcc3 	bl	800a2b0 <__retarget_lock_release_recursive>
 800a92a:	e7d9      	b.n	800a8e0 <_fflush_r+0xc>
 800a92c:	4b05      	ldr	r3, [pc, #20]	; (800a944 <_fflush_r+0x70>)
 800a92e:	429c      	cmp	r4, r3
 800a930:	d101      	bne.n	800a936 <_fflush_r+0x62>
 800a932:	68ac      	ldr	r4, [r5, #8]
 800a934:	e7df      	b.n	800a8f6 <_fflush_r+0x22>
 800a936:	4b04      	ldr	r3, [pc, #16]	; (800a948 <_fflush_r+0x74>)
 800a938:	429c      	cmp	r4, r3
 800a93a:	bf08      	it	eq
 800a93c:	68ec      	ldreq	r4, [r5, #12]
 800a93e:	e7da      	b.n	800a8f6 <_fflush_r+0x22>
 800a940:	0800d354 	.word	0x0800d354
 800a944:	0800d374 	.word	0x0800d374
 800a948:	0800d334 	.word	0x0800d334

0800a94c <std>:
 800a94c:	2300      	movs	r3, #0
 800a94e:	b510      	push	{r4, lr}
 800a950:	4604      	mov	r4, r0
 800a952:	e9c0 3300 	strd	r3, r3, [r0]
 800a956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a95a:	6083      	str	r3, [r0, #8]
 800a95c:	8181      	strh	r1, [r0, #12]
 800a95e:	6643      	str	r3, [r0, #100]	; 0x64
 800a960:	81c2      	strh	r2, [r0, #14]
 800a962:	6183      	str	r3, [r0, #24]
 800a964:	4619      	mov	r1, r3
 800a966:	2208      	movs	r2, #8
 800a968:	305c      	adds	r0, #92	; 0x5c
 800a96a:	f7fd fb5f 	bl	800802c <memset>
 800a96e:	4b05      	ldr	r3, [pc, #20]	; (800a984 <std+0x38>)
 800a970:	6263      	str	r3, [r4, #36]	; 0x24
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <std+0x3c>)
 800a974:	62a3      	str	r3, [r4, #40]	; 0x28
 800a976:	4b05      	ldr	r3, [pc, #20]	; (800a98c <std+0x40>)
 800a978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a97a:	4b05      	ldr	r3, [pc, #20]	; (800a990 <std+0x44>)
 800a97c:	6224      	str	r4, [r4, #32]
 800a97e:	6323      	str	r3, [r4, #48]	; 0x30
 800a980:	bd10      	pop	{r4, pc}
 800a982:	bf00      	nop
 800a984:	0800ac99 	.word	0x0800ac99
 800a988:	0800acbb 	.word	0x0800acbb
 800a98c:	0800acf3 	.word	0x0800acf3
 800a990:	0800ad17 	.word	0x0800ad17

0800a994 <_cleanup_r>:
 800a994:	4901      	ldr	r1, [pc, #4]	; (800a99c <_cleanup_r+0x8>)
 800a996:	f000 b8af 	b.w	800aaf8 <_fwalk_reent>
 800a99a:	bf00      	nop
 800a99c:	0800a8d5 	.word	0x0800a8d5

0800a9a0 <__sfmoreglue>:
 800a9a0:	b570      	push	{r4, r5, r6, lr}
 800a9a2:	2268      	movs	r2, #104	; 0x68
 800a9a4:	1e4d      	subs	r5, r1, #1
 800a9a6:	4355      	muls	r5, r2
 800a9a8:	460e      	mov	r6, r1
 800a9aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9ae:	f7fd fbb1 	bl	8008114 <_malloc_r>
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	b140      	cbz	r0, 800a9c8 <__sfmoreglue+0x28>
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9bc:	300c      	adds	r0, #12
 800a9be:	60a0      	str	r0, [r4, #8]
 800a9c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9c4:	f7fd fb32 	bl	800802c <memset>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}

0800a9cc <__sfp_lock_acquire>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__sfp_lock_acquire+0x8>)
 800a9ce:	f7ff bc6e 	b.w	800a2ae <__retarget_lock_acquire_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	20000459 	.word	0x20000459

0800a9d8 <__sfp_lock_release>:
 800a9d8:	4801      	ldr	r0, [pc, #4]	; (800a9e0 <__sfp_lock_release+0x8>)
 800a9da:	f7ff bc69 	b.w	800a2b0 <__retarget_lock_release_recursive>
 800a9de:	bf00      	nop
 800a9e0:	20000459 	.word	0x20000459

0800a9e4 <__sinit_lock_acquire>:
 800a9e4:	4801      	ldr	r0, [pc, #4]	; (800a9ec <__sinit_lock_acquire+0x8>)
 800a9e6:	f7ff bc62 	b.w	800a2ae <__retarget_lock_acquire_recursive>
 800a9ea:	bf00      	nop
 800a9ec:	2000045a 	.word	0x2000045a

0800a9f0 <__sinit_lock_release>:
 800a9f0:	4801      	ldr	r0, [pc, #4]	; (800a9f8 <__sinit_lock_release+0x8>)
 800a9f2:	f7ff bc5d 	b.w	800a2b0 <__retarget_lock_release_recursive>
 800a9f6:	bf00      	nop
 800a9f8:	2000045a 	.word	0x2000045a

0800a9fc <__sinit>:
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	4604      	mov	r4, r0
 800aa00:	f7ff fff0 	bl	800a9e4 <__sinit_lock_acquire>
 800aa04:	69a3      	ldr	r3, [r4, #24]
 800aa06:	b11b      	cbz	r3, 800aa10 <__sinit+0x14>
 800aa08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa0c:	f7ff bff0 	b.w	800a9f0 <__sinit_lock_release>
 800aa10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa14:	6523      	str	r3, [r4, #80]	; 0x50
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <__sinit+0x68>)
 800aa18:	4a13      	ldr	r2, [pc, #76]	; (800aa68 <__sinit+0x6c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	bf04      	itt	eq
 800aa22:	2301      	moveq	r3, #1
 800aa24:	61a3      	streq	r3, [r4, #24]
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 f820 	bl	800aa6c <__sfp>
 800aa2c:	6060      	str	r0, [r4, #4]
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 f81c 	bl	800aa6c <__sfp>
 800aa34:	60a0      	str	r0, [r4, #8]
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 f818 	bl	800aa6c <__sfp>
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	60e0      	str	r0, [r4, #12]
 800aa40:	2104      	movs	r1, #4
 800aa42:	6860      	ldr	r0, [r4, #4]
 800aa44:	f7ff ff82 	bl	800a94c <std>
 800aa48:	68a0      	ldr	r0, [r4, #8]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	2109      	movs	r1, #9
 800aa4e:	f7ff ff7d 	bl	800a94c <std>
 800aa52:	68e0      	ldr	r0, [r4, #12]
 800aa54:	2202      	movs	r2, #2
 800aa56:	2112      	movs	r1, #18
 800aa58:	f7ff ff78 	bl	800a94c <std>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	61a3      	str	r3, [r4, #24]
 800aa60:	e7d2      	b.n	800aa08 <__sinit+0xc>
 800aa62:	bf00      	nop
 800aa64:	0800cfbc 	.word	0x0800cfbc
 800aa68:	0800a995 	.word	0x0800a995

0800aa6c <__sfp>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	4607      	mov	r7, r0
 800aa70:	f7ff ffac 	bl	800a9cc <__sfp_lock_acquire>
 800aa74:	4b1e      	ldr	r3, [pc, #120]	; (800aaf0 <__sfp+0x84>)
 800aa76:	681e      	ldr	r6, [r3, #0]
 800aa78:	69b3      	ldr	r3, [r6, #24]
 800aa7a:	b913      	cbnz	r3, 800aa82 <__sfp+0x16>
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f7ff ffbd 	bl	800a9fc <__sinit>
 800aa82:	3648      	adds	r6, #72	; 0x48
 800aa84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	d503      	bpl.n	800aa94 <__sfp+0x28>
 800aa8c:	6833      	ldr	r3, [r6, #0]
 800aa8e:	b30b      	cbz	r3, 800aad4 <__sfp+0x68>
 800aa90:	6836      	ldr	r6, [r6, #0]
 800aa92:	e7f7      	b.n	800aa84 <__sfp+0x18>
 800aa94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa98:	b9d5      	cbnz	r5, 800aad0 <__sfp+0x64>
 800aa9a:	4b16      	ldr	r3, [pc, #88]	; (800aaf4 <__sfp+0x88>)
 800aa9c:	60e3      	str	r3, [r4, #12]
 800aa9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aaa2:	6665      	str	r5, [r4, #100]	; 0x64
 800aaa4:	f7ff fc02 	bl	800a2ac <__retarget_lock_init_recursive>
 800aaa8:	f7ff ff96 	bl	800a9d8 <__sfp_lock_release>
 800aaac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aab0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aab4:	6025      	str	r5, [r4, #0]
 800aab6:	61a5      	str	r5, [r4, #24]
 800aab8:	2208      	movs	r2, #8
 800aaba:	4629      	mov	r1, r5
 800aabc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aac0:	f7fd fab4 	bl	800802c <memset>
 800aac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aacc:	4620      	mov	r0, r4
 800aace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad0:	3468      	adds	r4, #104	; 0x68
 800aad2:	e7d9      	b.n	800aa88 <__sfp+0x1c>
 800aad4:	2104      	movs	r1, #4
 800aad6:	4638      	mov	r0, r7
 800aad8:	f7ff ff62 	bl	800a9a0 <__sfmoreglue>
 800aadc:	4604      	mov	r4, r0
 800aade:	6030      	str	r0, [r6, #0]
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d1d5      	bne.n	800aa90 <__sfp+0x24>
 800aae4:	f7ff ff78 	bl	800a9d8 <__sfp_lock_release>
 800aae8:	230c      	movs	r3, #12
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	e7ee      	b.n	800aacc <__sfp+0x60>
 800aaee:	bf00      	nop
 800aaf0:	0800cfbc 	.word	0x0800cfbc
 800aaf4:	ffff0001 	.word	0xffff0001

0800aaf8 <_fwalk_reent>:
 800aaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aafc:	4606      	mov	r6, r0
 800aafe:	4688      	mov	r8, r1
 800ab00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab04:	2700      	movs	r7, #0
 800ab06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab0e:	d505      	bpl.n	800ab1c <_fwalk_reent+0x24>
 800ab10:	6824      	ldr	r4, [r4, #0]
 800ab12:	2c00      	cmp	r4, #0
 800ab14:	d1f7      	bne.n	800ab06 <_fwalk_reent+0xe>
 800ab16:	4638      	mov	r0, r7
 800ab18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab1c:	89ab      	ldrh	r3, [r5, #12]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d907      	bls.n	800ab32 <_fwalk_reent+0x3a>
 800ab22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab26:	3301      	adds	r3, #1
 800ab28:	d003      	beq.n	800ab32 <_fwalk_reent+0x3a>
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	47c0      	blx	r8
 800ab30:	4307      	orrs	r7, r0
 800ab32:	3568      	adds	r5, #104	; 0x68
 800ab34:	e7e9      	b.n	800ab0a <_fwalk_reent+0x12>

0800ab36 <__swhatbuf_r>:
 800ab36:	b570      	push	{r4, r5, r6, lr}
 800ab38:	460e      	mov	r6, r1
 800ab3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab3e:	2900      	cmp	r1, #0
 800ab40:	b096      	sub	sp, #88	; 0x58
 800ab42:	4614      	mov	r4, r2
 800ab44:	461d      	mov	r5, r3
 800ab46:	da08      	bge.n	800ab5a <__swhatbuf_r+0x24>
 800ab48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	602a      	str	r2, [r5, #0]
 800ab50:	061a      	lsls	r2, r3, #24
 800ab52:	d410      	bmi.n	800ab76 <__swhatbuf_r+0x40>
 800ab54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab58:	e00e      	b.n	800ab78 <__swhatbuf_r+0x42>
 800ab5a:	466a      	mov	r2, sp
 800ab5c:	f000 f902 	bl	800ad64 <_fstat_r>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	dbf1      	blt.n	800ab48 <__swhatbuf_r+0x12>
 800ab64:	9a01      	ldr	r2, [sp, #4]
 800ab66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab6e:	425a      	negs	r2, r3
 800ab70:	415a      	adcs	r2, r3
 800ab72:	602a      	str	r2, [r5, #0]
 800ab74:	e7ee      	b.n	800ab54 <__swhatbuf_r+0x1e>
 800ab76:	2340      	movs	r3, #64	; 0x40
 800ab78:	2000      	movs	r0, #0
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	b016      	add	sp, #88	; 0x58
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}

0800ab80 <__smakebuf_r>:
 800ab80:	898b      	ldrh	r3, [r1, #12]
 800ab82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab84:	079d      	lsls	r5, r3, #30
 800ab86:	4606      	mov	r6, r0
 800ab88:	460c      	mov	r4, r1
 800ab8a:	d507      	bpl.n	800ab9c <__smakebuf_r+0x1c>
 800ab8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	6123      	str	r3, [r4, #16]
 800ab94:	2301      	movs	r3, #1
 800ab96:	6163      	str	r3, [r4, #20]
 800ab98:	b002      	add	sp, #8
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	ab01      	add	r3, sp, #4
 800ab9e:	466a      	mov	r2, sp
 800aba0:	f7ff ffc9 	bl	800ab36 <__swhatbuf_r>
 800aba4:	9900      	ldr	r1, [sp, #0]
 800aba6:	4605      	mov	r5, r0
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7fd fab3 	bl	8008114 <_malloc_r>
 800abae:	b948      	cbnz	r0, 800abc4 <__smakebuf_r+0x44>
 800abb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb4:	059a      	lsls	r2, r3, #22
 800abb6:	d4ef      	bmi.n	800ab98 <__smakebuf_r+0x18>
 800abb8:	f023 0303 	bic.w	r3, r3, #3
 800abbc:	f043 0302 	orr.w	r3, r3, #2
 800abc0:	81a3      	strh	r3, [r4, #12]
 800abc2:	e7e3      	b.n	800ab8c <__smakebuf_r+0xc>
 800abc4:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <__smakebuf_r+0x7c>)
 800abc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	6020      	str	r0, [r4, #0]
 800abcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd0:	81a3      	strh	r3, [r4, #12]
 800abd2:	9b00      	ldr	r3, [sp, #0]
 800abd4:	6163      	str	r3, [r4, #20]
 800abd6:	9b01      	ldr	r3, [sp, #4]
 800abd8:	6120      	str	r0, [r4, #16]
 800abda:	b15b      	cbz	r3, 800abf4 <__smakebuf_r+0x74>
 800abdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abe0:	4630      	mov	r0, r6
 800abe2:	f000 f8d1 	bl	800ad88 <_isatty_r>
 800abe6:	b128      	cbz	r0, 800abf4 <__smakebuf_r+0x74>
 800abe8:	89a3      	ldrh	r3, [r4, #12]
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	f043 0301 	orr.w	r3, r3, #1
 800abf2:	81a3      	strh	r3, [r4, #12]
 800abf4:	89a0      	ldrh	r0, [r4, #12]
 800abf6:	4305      	orrs	r5, r0
 800abf8:	81a5      	strh	r5, [r4, #12]
 800abfa:	e7cd      	b.n	800ab98 <__smakebuf_r+0x18>
 800abfc:	0800a995 	.word	0x0800a995

0800ac00 <_malloc_usable_size_r>:
 800ac00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac04:	1f18      	subs	r0, r3, #4
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	bfbc      	itt	lt
 800ac0a:	580b      	ldrlt	r3, [r1, r0]
 800ac0c:	18c0      	addlt	r0, r0, r3
 800ac0e:	4770      	bx	lr

0800ac10 <_raise_r>:
 800ac10:	291f      	cmp	r1, #31
 800ac12:	b538      	push	{r3, r4, r5, lr}
 800ac14:	4604      	mov	r4, r0
 800ac16:	460d      	mov	r5, r1
 800ac18:	d904      	bls.n	800ac24 <_raise_r+0x14>
 800ac1a:	2316      	movs	r3, #22
 800ac1c:	6003      	str	r3, [r0, #0]
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac26:	b112      	cbz	r2, 800ac2e <_raise_r+0x1e>
 800ac28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac2c:	b94b      	cbnz	r3, 800ac42 <_raise_r+0x32>
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 f830 	bl	800ac94 <_getpid_r>
 800ac34:	462a      	mov	r2, r5
 800ac36:	4601      	mov	r1, r0
 800ac38:	4620      	mov	r0, r4
 800ac3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac3e:	f000 b817 	b.w	800ac70 <_kill_r>
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d00a      	beq.n	800ac5c <_raise_r+0x4c>
 800ac46:	1c59      	adds	r1, r3, #1
 800ac48:	d103      	bne.n	800ac52 <_raise_r+0x42>
 800ac4a:	2316      	movs	r3, #22
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	2001      	movs	r0, #1
 800ac50:	e7e7      	b.n	800ac22 <_raise_r+0x12>
 800ac52:	2400      	movs	r4, #0
 800ac54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac58:	4628      	mov	r0, r5
 800ac5a:	4798      	blx	r3
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	e7e0      	b.n	800ac22 <_raise_r+0x12>

0800ac60 <raise>:
 800ac60:	4b02      	ldr	r3, [pc, #8]	; (800ac6c <raise+0xc>)
 800ac62:	4601      	mov	r1, r0
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	f7ff bfd3 	b.w	800ac10 <_raise_r>
 800ac6a:	bf00      	nop
 800ac6c:	2000001c 	.word	0x2000001c

0800ac70 <_kill_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d07      	ldr	r5, [pc, #28]	; (800ac90 <_kill_r+0x20>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	602b      	str	r3, [r5, #0]
 800ac7e:	f7f7 fcfb 	bl	8002678 <_kill>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	d102      	bne.n	800ac8c <_kill_r+0x1c>
 800ac86:	682b      	ldr	r3, [r5, #0]
 800ac88:	b103      	cbz	r3, 800ac8c <_kill_r+0x1c>
 800ac8a:	6023      	str	r3, [r4, #0]
 800ac8c:	bd38      	pop	{r3, r4, r5, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000454 	.word	0x20000454

0800ac94 <_getpid_r>:
 800ac94:	f7f7 bce8 	b.w	8002668 <_getpid>

0800ac98 <__sread>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca0:	f000 f894 	bl	800adcc <_read_r>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	bfab      	itete	ge
 800aca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acaa:	89a3      	ldrhlt	r3, [r4, #12]
 800acac:	181b      	addge	r3, r3, r0
 800acae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acb2:	bfac      	ite	ge
 800acb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800acb6:	81a3      	strhlt	r3, [r4, #12]
 800acb8:	bd10      	pop	{r4, pc}

0800acba <__swrite>:
 800acba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acbe:	461f      	mov	r7, r3
 800acc0:	898b      	ldrh	r3, [r1, #12]
 800acc2:	05db      	lsls	r3, r3, #23
 800acc4:	4605      	mov	r5, r0
 800acc6:	460c      	mov	r4, r1
 800acc8:	4616      	mov	r6, r2
 800acca:	d505      	bpl.n	800acd8 <__swrite+0x1e>
 800accc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd0:	2302      	movs	r3, #2
 800acd2:	2200      	movs	r2, #0
 800acd4:	f000 f868 	bl	800ada8 <_lseek_r>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	4632      	mov	r2, r6
 800ace6:	463b      	mov	r3, r7
 800ace8:	4628      	mov	r0, r5
 800acea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acee:	f000 b817 	b.w	800ad20 <_write_r>

0800acf2 <__sseek>:
 800acf2:	b510      	push	{r4, lr}
 800acf4:	460c      	mov	r4, r1
 800acf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfa:	f000 f855 	bl	800ada8 <_lseek_r>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	bf15      	itete	ne
 800ad04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad0e:	81a3      	strheq	r3, [r4, #12]
 800ad10:	bf18      	it	ne
 800ad12:	81a3      	strhne	r3, [r4, #12]
 800ad14:	bd10      	pop	{r4, pc}

0800ad16 <__sclose>:
 800ad16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1a:	f000 b813 	b.w	800ad44 <_close_r>
	...

0800ad20 <_write_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	; (800ad40 <_write_r+0x20>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7f7 fcd9 	bl	80026e6 <_write>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_write_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_write_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20000454 	.word	0x20000454

0800ad44 <_close_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d06      	ldr	r5, [pc, #24]	; (800ad60 <_close_r+0x1c>)
 800ad48:	2300      	movs	r3, #0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	602b      	str	r3, [r5, #0]
 800ad50:	f7f7 fce5 	bl	800271e <_close>
 800ad54:	1c43      	adds	r3, r0, #1
 800ad56:	d102      	bne.n	800ad5e <_close_r+0x1a>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	b103      	cbz	r3, 800ad5e <_close_r+0x1a>
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
 800ad60:	20000454 	.word	0x20000454

0800ad64 <_fstat_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	4d07      	ldr	r5, [pc, #28]	; (800ad84 <_fstat_r+0x20>)
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4604      	mov	r4, r0
 800ad6c:	4608      	mov	r0, r1
 800ad6e:	4611      	mov	r1, r2
 800ad70:	602b      	str	r3, [r5, #0]
 800ad72:	f7f7 fce0 	bl	8002736 <_fstat>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	d102      	bne.n	800ad80 <_fstat_r+0x1c>
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	b103      	cbz	r3, 800ad80 <_fstat_r+0x1c>
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	bd38      	pop	{r3, r4, r5, pc}
 800ad82:	bf00      	nop
 800ad84:	20000454 	.word	0x20000454

0800ad88 <_isatty_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	; (800ada4 <_isatty_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f7 fcdf 	bl	8002756 <_isatty>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_isatty_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_isatty_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20000454 	.word	0x20000454

0800ada8 <_lseek_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	; (800adc8 <_lseek_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f7 fcd8 	bl	800276c <_lseek>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_lseek_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_lseek_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	20000454 	.word	0x20000454

0800adcc <_read_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_read_r+0x20>)
 800add0:	4604      	mov	r4, r0
 800add2:	4608      	mov	r0, r1
 800add4:	4611      	mov	r1, r2
 800add6:	2200      	movs	r2, #0
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f7 fc66 	bl	80026ac <_read>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_read_r+0x1e>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_read_r+0x1e>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20000454 	.word	0x20000454

0800adf0 <_init>:
 800adf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf2:	bf00      	nop
 800adf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf6:	bc08      	pop	{r3}
 800adf8:	469e      	mov	lr, r3
 800adfa:	4770      	bx	lr

0800adfc <_fini>:
 800adfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfe:	bf00      	nop
 800ae00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae02:	bc08      	pop	{r3}
 800ae04:	469e      	mov	lr, r3
 800ae06:	4770      	bx	lr
